import {internal_enterBomOutput,internal_leaveBomOutput, internal_enterBomPartMasterDataElements,internal_leaveBomPartMasterDataElements, internal_enterBomPartMasterDataTouches,internal_leaveBomPartMasterDataTouches, internal_enterFunction,internal_leaveFunction, internal_enterModuleManufacturerDataCompletion,internal_leaveModuleManufacturerDataCompletion, internal_enterModuleAfterDataCompletion,internal_leaveModuleAfterDataCompletion, internal_enterModuleCreateBuildPlan,internal_leaveModuleCreateBuildPlan, internal_enterCollectParts,internal_leaveCollectParts, internal_enterCheckPartAttributes,internal_leaveCheckPartAttributes,internal_enterValidateVariant,internal_leaveValidateVariant,logFatal,logError,logWarning,logInfo,logDebug,getLogMessages, clearLogMessages, internal_enterBomOrderOutput, internal_leaveBomOrderOutput, getAttrChangeLogs, internal_enterLoadJson, internal_leaveLoadJson, internal_enterDataCompletionAssignDerivedData, internal_leaveDataCompletionAssignDerivedData, internal_enterDataCompletionSetDefault, internal_leaveDataCompletionSetDefault, logAttrChange, internal_enterDataCompletionSetGlobalVars, internal_leaveDataCompletionSetGlobalVars, internal_enterBomPartMasterDataTouchesStart, internal_enterBomPartMasterDataTouchesEnd} from '../logging'
import { ct_tab_ApplianceGraphicLibrary, ICT_tab_ApplianceGraphicLibrary, ct2_tab_ApplianceGraphicLibrary} from '../custom-tables/tab_ApplianceGraphicLibrary'
import { ct_tab_BoardLibrary, ICT_tab_BoardLibrary, ct2_tab_BoardLibrary} from '../custom-tables/tab_BoardLibrary'
import { ct_tab_BoardMapping, ICT_tab_BoardMapping, ct2_tab_BoardMapping} from '../custom-tables/tab_BoardMapping'
import { ct_tab_BracketConstruction, ICT_tab_BracketConstruction, ct2_tab_BracketConstruction} from '../custom-tables/tab_BracketConstruction'
import { ct_tab_BracketMapping, ICT_tab_BracketMapping, ct2_tab_BracketMapping} from '../custom-tables/tab_BracketMapping'
import { ct_tab_CarcaseBackwallConstruction, ICT_tab_CarcaseBackwallConstruction, ct2_tab_CarcaseBackwallConstruction} from '../custom-tables/tab_CarcaseBackwallConstruction'
import { ct_tab_CarcaseBackwallSettings, ICT_tab_CarcaseBackwallSettings, ct2_tab_CarcaseBackwallSettings} from '../custom-tables/tab_CarcaseBackwallSettings'
import { ct_tab_CarcaseCornerunitConstruction, ICT_tab_CarcaseCornerunitConstruction, ct2_tab_CarcaseCornerunitConstruction} from '../custom-tables/tab_CarcaseCornerunitConstruction'
import { ct_tab_CarcasePartConnectionCalculations, ICT_tab_CarcasePartConnectionCalculations, ct2_tab_CarcasePartConnectionCalculations} from '../custom-tables/tab_CarcasePartConnectionCalculations'
import { ct_tab_CarcasePartConnectionMapping, ICT_tab_CarcasePartConnectionMapping, ct2_tab_CarcasePartConnectionMapping} from '../custom-tables/tab_CarcasePartConnectionMapping'
import { ct_tab_CarcasePartGrainDirectionSettings, ICT_tab_CarcasePartGrainDirectionSettings, ct2_tab_CarcasePartGrainDirectionSettings} from '../custom-tables/tab_CarcasePartGrainDirectionSettings'
import { ct_tab_CarcasePartsShape, ICT_tab_CarcasePartsShape, ct2_tab_CarcasePartsShape} from '../custom-tables/tab_CarcasePartsShape'
import { ct_tab_CarcaseShelfbtmSettings, ICT_tab_CarcaseShelfbtmSettings, ct2_tab_CarcaseShelfbtmSettings} from '../custom-tables/tab_CarcaseShelfbtmSettings'
import { ct_tab_CarcaseShelftopSettings, ICT_tab_CarcaseShelftopSettings, ct2_tab_CarcaseShelftopSettings} from '../custom-tables/tab_CarcaseShelftopSettings'
import { ct_tab_CarcaseSidepanelSettings, ICT_tab_CarcaseSidepanelSettings, ct2_tab_CarcaseSidepanelSettings} from '../custom-tables/tab_CarcaseSidepanelSettings'
import { ct_tab_CarcaseSlopedCeilingDimension, ICT_tab_CarcaseSlopedCeilingDimension, ct2_tab_CarcaseSlopedCeilingDimension} from '../custom-tables/tab_CarcaseSlopedCeilingDimension'
import { ct_tab_CarcaseStorageunitConstruction, ICT_tab_CarcaseStorageunitConstruction, ct2_tab_CarcaseStorageunitConstruction} from '../custom-tables/tab_CarcaseStorageunitConstruction'
import { ct_tab_CornerunitStraightConstruction, ICT_tab_CornerunitStraightConstruction, ct2_tab_CornerunitStraightConstruction} from '../custom-tables/tab_CornerunitStraightConstruction'
import { ct_tab_DishwasherConstruction, ICT_tab_DishwasherConstruction, ct2_tab_DishwasherConstruction} from '../custom-tables/tab_DishwasherConstruction'
import { ct_tab_DishwasherMapping, ICT_tab_DishwasherMapping, ct2_tab_DishwasherMapping} from '../custom-tables/tab_DishwasherMapping'
import { ct_tab_DoorSettings, ICT_tab_DoorSettings, ct2_tab_DoorSettings} from '../custom-tables/tab_DoorSettings'
import { ct_tab_DrawerBoxColorMapping, ICT_tab_DrawerBoxColorMapping, ct2_tab_DrawerBoxColorMapping} from '../custom-tables/tab_DrawerBoxColorMapping'
import { ct_tab_DrawerBoxConstruction, ICT_tab_DrawerBoxConstruction, ct2_tab_DrawerBoxConstruction} from '../custom-tables/tab_DrawerBoxConstruction'
import { ct_tab_DrawerBoxDimensionMapping, ICT_tab_DrawerBoxDimensionMapping, ct2_tab_DrawerBoxDimensionMapping} from '../custom-tables/tab_DrawerBoxDimensionMapping'
import { ct_tab_DrawerBoxExtraItemSettings, ICT_tab_DrawerBoxExtraItemSettings, ct2_tab_DrawerBoxExtraItemSettings} from '../custom-tables/tab_DrawerBoxExtraItemSettings'
import { ct_tab_DrawerBoxInsertionSettings, ICT_tab_DrawerBoxInsertionSettings, ct2_tab_DrawerBoxInsertionSettings} from '../custom-tables/tab_DrawerBoxInsertionSettings'
import { ct_tab_DrawerBoxMapping, ICT_tab_DrawerBoxMapping, ct2_tab_DrawerBoxMapping} from '../custom-tables/tab_DrawerBoxMapping'
import { ct_tab_DrawerBoxWeightTypeSettings, ICT_tab_DrawerBoxWeightTypeSettings, ct2_tab_DrawerBoxWeightTypeSettings} from '../custom-tables/tab_DrawerBoxWeightTypeSettings'
import { ct_tab_DuststripMapping, ICT_tab_DuststripMapping, ct2_tab_DuststripMapping} from '../custom-tables/tab_DuststripMapping'
import { ct_tab_EdgeClassSettings, ICT_tab_EdgeClassSettings, ct2_tab_EdgeClassSettings} from '../custom-tables/tab_EdgeClassSettings'
import { ct_tab_EdgeFrameSettings, ICT_tab_EdgeFrameSettings, ct2_tab_EdgeFrameSettings} from '../custom-tables/tab_EdgeFrameSettings'
import { ct_tab_EdgeJointMapping, ICT_tab_EdgeJointMapping, ct2_tab_EdgeJointMapping} from '../custom-tables/tab_EdgeJointMapping'
import { ct_tab_EdgeJointSettings, ICT_tab_EdgeJointSettings, ct2_tab_EdgeJointSettings} from '../custom-tables/tab_EdgeJointSettings'
import { ct_tab_EdgeLibrary, ICT_tab_EdgeLibrary, ct2_tab_EdgeLibrary} from '../custom-tables/tab_EdgeLibrary'
import { ct_tab_EdgeMapping, ICT_tab_EdgeMapping, ct2_tab_EdgeMapping} from '../custom-tables/tab_EdgeMapping'
import { ct_tab_EdgeNumberSettings, ICT_tab_EdgeNumberSettings, ct2_tab_EdgeNumberSettings} from '../custom-tables/tab_EdgeNumberSettings'
import { ct_tab_EdgeSettings, ICT_tab_EdgeSettings, ct2_tab_EdgeSettings} from '../custom-tables/tab_EdgeSettings'
import { ct_tab_ErrorList, ICT_tab_ErrorList, ct2_tab_ErrorList} from '../custom-tables/tab_ErrorList'
import { ct_tab_FillerHardwareSettings, ICT_tab_FillerHardwareSettings, ct2_tab_FillerHardwareSettings} from '../custom-tables/tab_FillerHardwareSettings'
import { ct_tab_FillerSettings, ICT_tab_FillerSettings, ct2_tab_FillerSettings} from '../custom-tables/tab_FillerSettings'
import { ct_tab_FlipliftColorMapping, ICT_tab_FlipliftColorMapping, ct2_tab_FlipliftColorMapping} from '../custom-tables/tab_FlipliftColorMapping'
import { ct_tab_FlipliftConstruction, ICT_tab_FlipliftConstruction, ct2_tab_FlipliftConstruction} from '../custom-tables/tab_FlipliftConstruction'
import { ct_tab_FlipliftMapping, ICT_tab_FlipliftMapping, ct2_tab_FlipliftMapping} from '../custom-tables/tab_FlipliftMapping'
import { ct_tab_FlipliftSettings, ICT_tab_FlipliftSettings, ct2_tab_FlipliftSettings} from '../custom-tables/tab_FlipliftSettings'
import { ct_tab_FlipliftWeightTypeMapping, ICT_tab_FlipliftWeightTypeMapping, ct2_tab_FlipliftWeightTypeMapping} from '../custom-tables/tab_FlipliftWeightTypeMapping'
import { ct_tab_FramePartConnectionMapping, ICT_tab_FramePartConnectionMapping, ct2_tab_FramePartConnectionMapping} from '../custom-tables/tab_FramePartConnectionMapping'
import { ct_tab_FridgeConstruction, ICT_tab_FridgeConstruction, ct2_tab_FridgeConstruction} from '../custom-tables/tab_FridgeConstruction'
import { ct_tab_FridgeMapping, ICT_tab_FridgeMapping, ct2_tab_FridgeMapping} from '../custom-tables/tab_FridgeMapping'
import { ct_tab_FrontConstruction, ICT_tab_FrontConstruction, ct2_tab_FrontConstruction} from '../custom-tables/tab_FrontConstruction'
import { ct_tab_FrontEdgeColorMapping, ICT_tab_FrontEdgeColorMapping, ct2_tab_FrontEdgeColorMapping} from '../custom-tables/tab_FrontEdgeColorMapping'
import { ct_tab_FrontPanelConstruction, ICT_tab_FrontPanelConstruction, ct2_tab_FrontPanelConstruction} from '../custom-tables/tab_FrontPanelConstruction'
import { ct_tab_FrontPartGrainDirectionSettings, ICT_tab_FrontPartGrainDirectionSettings, ct2_tab_FrontPartGrainDirectionSettings} from '../custom-tables/tab_FrontPartGrainDirectionSettings'
import { ct_tab_GrainDirectionSettings, ICT_tab_GrainDirectionSettings, ct2_tab_GrainDirectionSettings} from '../custom-tables/tab_GrainDirectionSettings'
import { ct_tab_GrainSettings, ICT_tab_GrainSettings, ct2_tab_GrainSettings} from '../custom-tables/tab_GrainSettings'
import { ct_tab_GraphicFileLibrary, ICT_tab_GraphicFileLibrary, ct2_tab_GraphicFileLibrary} from '../custom-tables/tab_GraphicFileLibrary'
import { ct_tab_GraphicLibrary, ICT_tab_GraphicLibrary, ct2_tab_GraphicLibrary} from '../custom-tables/tab_GraphicLibrary'
import { ct_tab_GraphicLibraryMapping, ICT_tab_GraphicLibraryMapping, ct2_tab_GraphicLibraryMapping} from '../custom-tables/tab_GraphicLibraryMapping'
import { ct_tab_HandleConstruction, ICT_tab_HandleConstruction, ct2_tab_HandleConstruction} from '../custom-tables/tab_HandleConstruction'
import { ct_tab_HandleLengthMapping, ICT_tab_HandleLengthMapping, ct2_tab_HandleLengthMapping} from '../custom-tables/tab_HandleLengthMapping'
import { ct_tab_HandleMapping, ICT_tab_HandleMapping, ct2_tab_HandleMapping} from '../custom-tables/tab_HandleMapping'
import { ct_tab_HandleSettings, ICT_tab_HandleSettings, ct2_tab_HandleSettings} from '../custom-tables/tab_HandleSettings'
import { ct_tab_HangerMapping, ICT_tab_HangerMapping, ct2_tab_HangerMapping} from '../custom-tables/tab_HangerMapping'
import { ct_tab_HangerSettings, ICT_tab_HangerSettings, ct2_tab_HangerSettings} from '../custom-tables/tab_HangerSettings'
import { ct_tab_HardwareDrillHorLibrary, ICT_tab_HardwareDrillHorLibrary, ct2_tab_HardwareDrillHorLibrary} from '../custom-tables/tab_HardwareDrillHorLibrary'
import { ct_tab_HardwareDrillVertLibrary, ICT_tab_HardwareDrillVertLibrary, ct2_tab_HardwareDrillVertLibrary} from '../custom-tables/tab_HardwareDrillVertLibrary'
import { ct_tab_HardwareLibrary, ICT_tab_HardwareLibrary, ct2_tab_HardwareLibrary} from '../custom-tables/tab_HardwareLibrary'
import { ct_tab_HardwareLibraryMapping, ICT_tab_HardwareLibraryMapping, ct2_tab_HardwareLibraryMapping} from '../custom-tables/tab_HardwareLibraryMapping'
import { ct_tab_HardwareMillingLibrary, ICT_tab_HardwareMillingLibrary, ct2_tab_HardwareMillingLibrary} from '../custom-tables/tab_HardwareMillingLibrary'
import { ct_tab_HardwareSettings, ICT_tab_HardwareSettings, ct2_tab_HardwareSettings} from '../custom-tables/tab_HardwareSettings'
import { ct_tab_HingeConstruction, ICT_tab_HingeConstruction, ct2_tab_HingeConstruction} from '../custom-tables/tab_HingeConstruction'
import { ct_tab_HingeDrillingDistance, ICT_tab_HingeDrillingDistance, ct2_tab_HingeDrillingDistance} from '../custom-tables/tab_HingeDrillingDistance'
import { ct_tab_HingeMapping, ICT_tab_HingeMapping, ct2_tab_HingeMapping} from '../custom-tables/tab_HingeMapping'
import { ct_tab_HingePosition, ICT_tab_HingePosition, ct2_tab_HingePosition} from '../custom-tables/tab_HingePosition'
import { ct_tab_HingeSettings, ICT_tab_HingeSettings, ct2_tab_HingeSettings} from '../custom-tables/tab_HingeSettings'
import { ct_tab_HobConstruction, ICT_tab_HobConstruction, ct2_tab_HobConstruction} from '../custom-tables/tab_HobConstruction'
import { ct_tab_HobMapping, ICT_tab_HobMapping, ct2_tab_HobMapping} from '../custom-tables/tab_HobMapping'
import { ct_tab_HoodMapping, ICT_tab_HoodMapping, ct2_tab_HoodMapping} from '../custom-tables/tab_HoodMapping'
import { ct_tab_MaterialMapping, ICT_tab_MaterialMapping, ct2_tab_MaterialMapping} from '../custom-tables/tab_MaterialMapping'
import { ct_tab_ObjectMapping, ICT_tab_ObjectMapping, ct2_tab_ObjectMapping} from '../custom-tables/tab_ObjectMapping'
import { ct_tab_OvenConstruction, ICT_tab_OvenConstruction, ct2_tab_OvenConstruction} from '../custom-tables/tab_OvenConstruction'
import { ct_tab_OvenMapping, ICT_tab_OvenMapping, ct2_tab_OvenMapping} from '../custom-tables/tab_OvenMapping'
import { ct_tab_PanelWoodFrameConstruction, ICT_tab_PanelWoodFrameConstruction, ct2_tab_PanelWoodFrameConstruction} from '../custom-tables/tab_PanelWoodFrameConstruction'
import { ct_tab_PartConnectionSettings, ICT_tab_PartConnectionSettings, ct2_tab_PartConnectionSettings} from '../custom-tables/tab_PartConnectionSettings'
import { ct_tab_PartOverdimensionSettings, ICT_tab_PartOverdimensionSettings, ct2_tab_PartOverdimensionSettings} from '../custom-tables/tab_PartOverdimensionSettings'
import { ct_tab_PartSettings, ICT_tab_PartSettings, ct2_tab_PartSettings} from '../custom-tables/tab_PartSettings'
import { ct_tab_PartsGraphicRotation, ICT_tab_PartsGraphicRotation, ct2_tab_PartsGraphicRotation} from '../custom-tables/tab_PartsGraphicRotation'
import { ct_tab_PlinthAreaConstruction, ICT_tab_PlinthAreaConstruction, ct2_tab_PlinthAreaConstruction} from '../custom-tables/tab_PlinthAreaConstruction'
import { ct_tab_PlinthAreaMapping, ICT_tab_PlinthAreaMapping, ct2_tab_PlinthAreaMapping} from '../custom-tables/tab_PlinthAreaMapping'
import { ct_tab_PlinthAreaSettings, ICT_tab_PlinthAreaSettings, ct2_tab_PlinthAreaSettings} from '../custom-tables/tab_PlinthAreaSettings'
import { ct_tab_ProcessingMapping, ICT_tab_ProcessingMapping, ct2_tab_ProcessingMapping} from '../custom-tables/tab_ProcessingMapping'
import { ct_tab_PullOutElementColorMapping, ICT_tab_PullOutElementColorMapping, ct2_tab_PullOutElementColorMapping} from '../custom-tables/tab_PullOutElementColorMapping'
import { ct_tab_PullOutHardwareInsertionSettings, ICT_tab_PullOutHardwareInsertionSettings, ct2_tab_PullOutHardwareInsertionSettings} from '../custom-tables/tab_PullOutHardwareInsertionSettings'
import { ct_tab_PullOutMapping, ICT_tab_PullOutMapping, ct2_tab_PullOutMapping} from '../custom-tables/tab_PullOutMapping'
import { ct_tab_PullOutSettings, ICT_tab_PullOutSettings, ct2_tab_PullOutSettings} from '../custom-tables/tab_PullOutSettings'
import { ct_tab_PushtoopenMapping, ICT_tab_PushtoopenMapping, ct2_tab_PushtoopenMapping} from '../custom-tables/tab_PushtoopenMapping'
import { ct_tab_PushtoopenSettings, ICT_tab_PushtoopenSettings, ct2_tab_PushtoopenSettings} from '../custom-tables/tab_PushtoopenSettings'
import { ct_tab_SawingAngleLibrary, ICT_tab_SawingAngleLibrary, ct2_tab_SawingAngleLibrary} from '../custom-tables/tab_SawingAngleLibrary'
import { ct_tab_SawingVertLibrary, ICT_tab_SawingVertLibrary, ct2_tab_SawingVertLibrary} from '../custom-tables/tab_SawingVertLibrary'
import { ct_tab_ShelfadjDrillSettings, ICT_tab_ShelfadjDrillSettings, ct2_tab_ShelfadjDrillSettings} from '../custom-tables/tab_ShelfadjDrillSettings'
import { ct_tab_ShelfadjQtyPosSettings, ICT_tab_ShelfadjQtyPosSettings, ct2_tab_ShelfadjQtyPosSettings} from '../custom-tables/tab_ShelfadjQtyPosSettings'
import { ct_tab_ShelfadjSettings, ICT_tab_ShelfadjSettings, ct2_tab_ShelfadjSettings} from '../custom-tables/tab_ShelfadjSettings'
import { ct_tab_SinkConstruction, ICT_tab_SinkConstruction, ct2_tab_SinkConstruction} from '../custom-tables/tab_SinkConstruction'
import { ct_tab_SinkMapping, ICT_tab_SinkMapping, ct2_tab_SinkMapping} from '../custom-tables/tab_SinkMapping'
import { ct_tab_SlopedCeilingSettings, ICT_tab_SlopedCeilingSettings, ct2_tab_SlopedCeilingSettings} from '../custom-tables/tab_SlopedCeilingSettings'
 
import { OD_Base, PartGroup, OpenGroup, Matrix4, Vector3, GenerationContour, Contour, GenerationMethod, RoomContour } from '../base'
import { IPartBase, PartBase, _toFloat, _toInt, _toString, _toBoolean, IModBaseProp, IDockingInfo, Dock, IInsertLevelInfo } from '../mod-base'
import { loadOrderData } from '../loader'
import { GlobalFunc } from '../global-func'
import { OD_M_mc_Storageunit01, dc_mc_Storageunit01 } from './mc_Storageunit01'
import { OD_M_mc_PlinthArea01, dc_mc_PlinthArea01 } from './mc_PlinthArea01'
import { OD_M_mf_Door, dc_mf_Door } from './mf_Door'
import { OD_M_mc_CornerunitStraight01, dc_mc_CornerunitStraight01 } from './mc_CornerunitStraight01'
import { OD_M_mf_RackArea, dc_mf_RackArea } from './mf_RackArea'
import { OD_M_mf_Drawer, dc_mf_Drawer } from './mf_Drawer'
import { OD_M_mf_CornerFillerFront, dc_mf_CornerFillerFront } from './mf_CornerFillerFront'
import { IModuleNonNull_mr_CornerunitStraight,IModParents_mr_CornerunitStraight_mr_StorageunitSingle,IModParents_mr_CornerunitStraight_mr_Filler01_mr_StorageunitSingle,IModParents_mr_CornerunitStraight,IModParents_mr_CornerFiller_mr_CornerunitStraight,IPartParentsNonNull_mr_CornerunitStraight_mr_StorageunitSingle,IPartParentsNonNull_mr_CornerunitStraight_mr_Filler01_mr_StorageunitSingle,IPartParentsNonNull_mr_CornerunitStraight,IPartParentsNonNull_mr_CornerFiller_mr_CornerunitStraight} from '../mod-interfaces'
import {IModVar_mod_BackwallFixedHeight,IModVarNonNull_mod_BackwallFixedHeight,IModVar_mod_BackwallPos,IModVarNonNull_mod_BackwallPos,IModVar_mod_BackwallThk,IModVarNonNull_mod_BackwallThk,IModVar_mod_CarcaseColor,IModVarNonNull_mod_CarcaseColor,IModVar_mod_CarcaseBackwallColor,IModVarNonNull_mod_CarcaseBackwallColor,IModVar_mod_CarcaseBackwallConstruction,IModVarNonNull_mod_CarcaseBackwallConstruction,IModVar_mod_CarcaseProgram,IModVarNonNull_mod_CarcaseProgram,IModVar_mod_CarcaseBackwallProgram,IModVarNonNull_mod_CarcaseBackwallProgram,IModVar_mod_CarcaseConnectionLeftBtm,IModVarNonNull_mod_CarcaseConnectionLeftBtm,IModVar_mod_CarcaseConnectionLeftTop,IModVarNonNull_mod_CarcaseConnectionLeftTop,IModVar_mod_CarcaseConnectionRightBtm,IModVarNonNull_mod_CarcaseConnectionRightBtm,IModVar_mod_CarcaseConnectionRightTop,IModVarNonNull_mod_CarcaseConnectionRightTop,IModVar_mod_CarcaseDistanceWall,IModVarNonNull_mod_CarcaseDistanceWall,IModVar_mod_CarcaseEdgeBackColor,IModVarNonNull_mod_CarcaseEdgeBackColor,IModVar_mod_CarcaseEdgeColor,IModVarNonNull_mod_CarcaseEdgeColor,IModVar_mod_CarcaseEdgeFrontColor,IModVarNonNull_mod_CarcaseEdgeFrontColor,IModVar_mod_CarcaseOutsideColor,IModVarNonNull_mod_CarcaseOutsideColor,IModVar_mod_CarcaseOutsideProgram,IModVarNonNull_mod_CarcaseOutsideProgram,IModVar_mod_CarcaseShelfbtmConstruction,IModVarNonNull_mod_CarcaseShelfbtmConstruction,IModVar_mod_CarcaseShelfbtmOversizeInsideWall,IModVarNonNull_mod_CarcaseShelfbtmOversizeInsideWall,IModVar_mod_CarcaseShelfbtmOversizeLeft,IModVarNonNull_mod_CarcaseShelfbtmOversizeLeft,IModVar_mod_CarcaseShelfbtmOversizeRight,IModVarNonNull_mod_CarcaseShelfbtmOversizeRight,IModVar_mod_CarcaseShelftopConstruction,IModVarNonNull_mod_CarcaseShelftopConstruction,IModVar_mod_CarcaseShelftopOversizeInsideWall,IModVarNonNull_mod_CarcaseShelftopOversizeInsideWall,IModVar_mod_CarcaseShelftopOversizeLeft,IModVarNonNull_mod_CarcaseShelftopOversizeLeft,IModVar_mod_CarcaseShelftopOversizeRight,IModVarNonNull_mod_CarcaseShelftopOversizeRight,IModVar_mod_CarcaseSidepanelleftOversizeBtm,IModVarNonNull_mod_CarcaseSidepanelleftOversizeBtm,IModVar_mod_CarcaseSidepanelleftOversizeInsideWall,IModVarNonNull_mod_CarcaseSidepanelleftOversizeInsideWall,IModVar_mod_CarcaseSidepanelleftOversizeTop,IModVarNonNull_mod_CarcaseSidepanelleftOversizeTop,IModVar_mod_CarcaseSidepanelrightOversizeBtm,IModVarNonNull_mod_CarcaseSidepanelrightOversizeBtm,IModVar_mod_CarcaseSidepanelrightOversizeInsideWall,IModVarNonNull_mod_CarcaseSidepanelrightOversizeInsideWall,IModVar_mod_CarcaseSidepanelrightOversizeTop,IModVarNonNull_mod_CarcaseSidepanelrightOversizeTop,IModVar_mod_CarcaseVisBack,IModVarNonNull_mod_CarcaseVisBack,IModVar_mod_CarcaseVisBtm,IModVarNonNull_mod_CarcaseVisBtm,IModVar_mod_CarcaseVisLeft,IModVarNonNull_mod_CarcaseVisLeft,IModVar_mod_CarcaseVisRight,IModVarNonNull_mod_CarcaseVisRight,IModVar_mod_CarcaseVisTop,IModVarNonNull_mod_CarcaseVisTop,IModVar_mod_Depth,IModVarNonNull_mod_Depth,IModVar_mod_FingergripType,IModVarNonNull_mod_FingergripType,IModVar_mod_FrontColor,IModVarNonNull_mod_FrontColor,IModVar_mod_FrontDesign,IModVarNonNull_mod_FrontDesign,IModVar_mod_FrontEdgeColor,IModVarNonNull_mod_FrontEdgeColor,IModVar_mod_FrontEdgeThk,IModVarNonNull_mod_FrontEdgeThk,IModVar_mod_FrontFrameColor,IModVarNonNull_mod_FrontFrameColor,IModVar_mod_FrontGapCarcase,IModVarNonNull_mod_FrontGapCarcase,IModVar_mod_FrontGapHor,IModVarNonNull_mod_FrontGapHor,IModVar_mod_FrontGapVert,IModVarNonNull_mod_FrontGapVert,IModVar_mod_FrontGlassColor,IModVarNonNull_mod_FrontGlassColor,IModVar_mod_FrontPosStart,IModVarNonNull_mod_FrontPosStart,IModVar_mod_FrontProgram,IModVarNonNull_mod_FrontProgram,IModVar_mod_HandleColor,IModVarNonNull_mod_HandleColor,IModVar_mod_HandleDesign,IModVarNonNull_mod_HandleDesign,IModVar_mod_HandleLength,IModVarNonNull_mod_HandleLength,IModVar_mod_HandleLine,IModVarNonNull_mod_HandleLine,IModVar_mod_HandlePosLogic,IModVarNonNull_mod_HandlePosLogic,IModVar_mod_HandlePosType,IModVarNonNull_mod_HandlePosType,IModVar_mod_HangerPosX,IModVarNonNull_mod_HangerPosX,IModVar_mod_HangerPosY,IModVarNonNull_mod_HangerPosY,IModVar_mod_HangerType,IModVarNonNull_mod_HangerType,IModVar_mod_HardwareColor,IModVarNonNull_mod_HardwareColor,IModVar_mod_Height,IModVarNonNull_mod_Height,IModVar_mod_HeightPosInsertion,IModVarNonNull_mod_HeightPosInsertion,IModVar_mod_LightPart,IModVarNonNull_mod_LightPart,IModVar_mod_LightPosX,IModVarNonNull_mod_LightPosX,IModVar_mod_LightPosX1,IModVarNonNull_mod_LightPosX1,IModVar_mod_LightPosX2,IModVarNonNull_mod_LightPosX2,IModVar_mod_LightPosX3,IModVarNonNull_mod_LightPosX3,IModVar_mod_LightPosX4,IModVarNonNull_mod_LightPosX4,IModVar_mod_LightPosX5,IModVarNonNull_mod_LightPosX5,IModVar_mod_LightPosY,IModVarNonNull_mod_LightPosY,IModVar_mod_LightSystem,IModVarNonNull_mod_LightSystem,IModVar_mod_Model,IModVarNonNull_mod_Model,IModVar_mod_OpeningType,IModVarNonNull_mod_OpeningType,IModVar_mod_PlinthAreaDesign,IModVarNonNull_mod_PlinthAreaDesign,IModVar_mod_PlinthAreaElementColor,IModVarNonNull_mod_PlinthAreaElementColor,IModVar_mod_PlinthAreaHeight,IModVarNonNull_mod_PlinthAreaHeight,IModVar_mod_PlinthAreaPosBackMatrix,IModVarNonNull_mod_PlinthAreaPosBackMatrix,IModVar_mod_PlinthAreaPosFrontMatrix,IModVarNonNull_mod_PlinthAreaPosFrontMatrix,IModVar_mod_PlinthAreaPosLeftMatrix,IModVarNonNull_mod_PlinthAreaPosLeftMatrix,IModVar_mod_PlinthAreaPosRightMatrix,IModVarNonNull_mod_PlinthAreaPosRightMatrix,IModVar_mod_PlinthAreaVisLeft,IModVarNonNull_mod_PlinthAreaVisLeft,IModVar_mod_PlinthAreaVisRight,IModVarNonNull_mod_PlinthAreaVisRight,IModVar_mod_RailhortopbackThk,IModVarNonNull_mod_RailhortopbackThk,IModVar_mod_RailhortopfrontThk,IModVarNonNull_mod_RailhortopfrontThk,IModVar_mod_RailverttopbackThk,IModVarNonNull_mod_RailverttopbackThk,IModVar_mod_RailverttopfrontThk,IModVarNonNull_mod_RailverttopfrontThk,IModVar_mod_ShelfadjThk,IModVarNonNull_mod_ShelfadjThk,IModVar_mod_ShelfbtmThk,IModVarNonNull_mod_ShelfbtmThk,IModVar_mod_ShelffixedThk,IModVarNonNull_mod_ShelffixedThk,IModVar_mod_Width,IModVarNonNull_mod_Width,IModVar_mod_TypeElement,IModVarNonNull_mod_TypeElement,IModVar_mod_SidepanelrightThk,IModVarNonNull_mod_SidepanelrightThk,IModVar_mod_SidepanelleftThk,IModVarNonNull_mod_SidepanelleftThk,IModVar_mod_ShelftopThk,IModVarNonNull_mod_ShelftopThk,IModVar_mod_CornerunitStraightConstruction,IModVarNonNull_mod_CornerunitStraightConstruction,IModVar_mod_PanelblindThk,IModVarNonNull_mod_PanelblindThk,IModVar_mod_CarcaseDirection,IModVarNonNull_mod_CarcaseDirection,IModVar_mod_ParentName,IModVarNonNull_mod_ParentName,IModVar_mod_ModuleName,IModVarNonNull_mod_ModuleName,IModVar_mod_CornerunitFrontWidth,IModVarNonNull_mod_CornerunitFrontWidth,IModVar_mod_FrontGapHorTop,IModVarNonNull_mod_FrontGapHorTop,IModVar_mod_PlinthAreaExtraItem,IModVarNonNull_mod_PlinthAreaExtraItem,IModVar_mod_InteriorEquipmentLogic,IModVarNonNull_mod_InteriorEquipmentLogic,IModVar_mod_ShelvesBackwallFittingConnection,IModVarNonNull_mod_ShelvesBackwallFittingConnection,IModVar_mod_CarcasePartConnectionBackHor,IModVarNonNull_mod_CarcasePartConnectionBackHor,IModVar_mod_CarcasePartConnectionBackVert,IModVarNonNull_mod_CarcasePartConnectionBackVert,IModVar_mod_CarcasePartConnectionBtmVert,IModVarNonNull_mod_CarcasePartConnectionBtmVert,IModVar_mod_CarcasePartConnectionLeftHor,IModVarNonNull_mod_CarcasePartConnectionLeftHor,IModVar_mod_CarcasePartConnectionRightHor,IModVarNonNull_mod_CarcasePartConnectionRightHor,IModVar_mod_CarcasePartConnectionTopVert,IModVarNonNull_mod_CarcasePartConnectionTopVert,IModVar_mod_FittingConnectionBtmVert,IModVarNonNull_mod_FittingConnectionBtmVert,IModVar_mod_FittingConnectionLeftBtm,IModVarNonNull_mod_FittingConnectionLeftBtm,IModVar_mod_FittingConnectionLeftHor,IModVarNonNull_mod_FittingConnectionLeftHor,IModVar_mod_FittingConnectionLeftTop,IModVarNonNull_mod_FittingConnectionLeftTop,IModVar_mod_FittingConnectionRightBtm,IModVarNonNull_mod_FittingConnectionRightBtm,IModVar_mod_FittingConnectionRightHor,IModVarNonNull_mod_FittingConnectionRightHor,IModVar_mod_FittingConnectionRightTop,IModVarNonNull_mod_FittingConnectionRightTop,IModVar_mod_FittingConnectionTopVert,IModVarNonNull_mod_FittingConnectionTopVert,IModVar_mod_HangerOffsetPosY,IModVarNonNull_mod_HangerOffsetPosY,IModVar_mod_HangerColor,IModVarNonNull_mod_HangerColor,IModVar_mod_VertDividerType,IModVarNonNull_mod_VertDividerType,IModVar_mod_SidepanelmiddleThk,IModVarNonNull_mod_SidepanelmiddleThk,IModVar_mod_SidepanelmiddleShortWidth,IModVarNonNull_mod_SidepanelmiddleShortWidth,IModVar_mod_CarcaseFrontConstruction,IModVarNonNull_mod_CarcaseFrontConstruction,IModVar_mod_CleatThk,IModVarNonNull_mod_CleatThk,IModVar_mod_CleatWidth,IModVarNonNull_mod_CleatWidth,IModVar_mod_CarcasePartInfo,IModVarNonNull_mod_CarcasePartInfo,IModVar_mod_PushtoopenLine,IModVarNonNull_mod_PushtoopenLine,IModVar_mod_PushtoopenType,IModVarNonNull_mod_PushtoopenType,IModVar_mod_PushtoopenColor,IModVarNonNull_mod_PushtoopenColor,IModVar_mod_PanelWoodFrameType,IModVarNonNull_mod_PanelWoodFrameType,IModVar_mod_PanelWoodFrameFillingType,IModVarNonNull_mod_PanelWoodFrameFillingType,IModVar_mod_FramePartsWidthHor,IModVarNonNull_mod_FramePartsWidthHor,IModVar_mod_FramePartsWidthVert,IModVarNonNull_mod_FramePartsWidthVert,IModVar_mod_CreateCountertop,IModVarNonNull_mod_CreateCountertop,IModVar_mod_CreatePaneltop,IModVarNonNull_mod_CreatePaneltop,IModVar_mod_CreateToekick,IModVarNonNull_mod_CreateToekick,IModVar_mod_CreateFingergrip,IModVarNonNull_mod_CreateFingergrip,IModVar_mod_PlinthAreaPositionInfo,IModVarNonNull_mod_PlinthAreaPositionInfo,IModVar_mod_DoorDirection,IModVarNonNull_mod_DoorDirection,IModVar_mod_SlopeAngle,IModVarNonNull_mod_SlopeAngle,IModVar_mod_SlopedCeilingDimensionLogic,IModVarNonNull_mod_SlopedCeilingDimensionLogic,IModVar_mod_SlopedCeilingConstruction,IModVarNonNull_mod_SlopedCeilingConstruction,IModVar_mod_BackHeight,IModVarNonNull_mod_BackHeight,IModVar_mod_TopDepth,IModVarNonNull_mod_TopDepth,IModVar_mod_FrameFillingWoodColor,IModVarNonNull_mod_FrameFillingWoodColor,IModVar_mod_SidepanelrightType,IModVarNonNull_mod_SidepanelrightType,IModVar_mod_SidepanelleftType,IModVarNonNull_mod_SidepanelleftType,IModVar_mod_GrainLogic,IModVarNonNull_mod_GrainLogic,IModVar_mod_ShelfadjColor,IModVarNonNull_mod_ShelfadjColor,IModVar_mod_FrameFillingColor,IModVarNonNull_mod_FrameFillingColor} from '../var-interfaces'
import { VariantValidation, IMatrix_mod_BackwallFixedHeight, IMatrix_mod_BackwallPos, IMatrix_mod_BackwallThk, IMatrix_mod_CarcaseColor, IMatrix_mod_CarcaseBackwallColor, IMatrix_mod_CarcaseBackwallConstruction, IMatrix_mod_CarcaseProgram, IMatrix_mod_CarcaseBackwallProgram, IMatrix_mod_CarcaseConnectionLeftBtm, IMatrix_mod_CarcaseConnectionLeftTop, IMatrix_mod_CarcaseConnectionRightBtm, IMatrix_mod_CarcaseConnectionRightTop, IMatrix_mod_CarcaseDistanceWall, IMatrix_mod_CarcaseEdgeBackColor, IMatrix_mod_CarcaseEdgeColor, IMatrix_mod_CarcaseEdgeFrontColor, IMatrix_mod_CarcaseOutsideColor, IMatrix_mod_CarcaseOutsideProgram, IMatrix_mod_CarcaseShelfbtmConstruction, IMatrix_mod_CarcaseShelfbtmOversizeInsideWall, IMatrix_mod_CarcaseShelfbtmOversizeLeft, IMatrix_mod_CarcaseShelfbtmOversizeRight, IMatrix_mod_CarcaseShelftopConstruction, IMatrix_mod_CarcaseShelftopOversizeInsideWall, IMatrix_mod_CarcaseShelftopOversizeLeft, IMatrix_mod_CarcaseShelftopOversizeRight, IMatrix_mod_CarcaseSidepanelleftOversizeBtm, IMatrix_mod_CarcaseSidepanelleftOversizeInsideWall, IMatrix_mod_CarcaseSidepanelleftOversizeTop, IMatrix_mod_CarcaseSidepanelrightOversizeBtm, IMatrix_mod_CarcaseSidepanelrightOversizeInsideWall, IMatrix_mod_CarcaseSidepanelrightOversizeTop, IMatrix_mod_CarcaseVisBack, IMatrix_mod_CarcaseVisBtm, IMatrix_mod_CarcaseVisLeft, IMatrix_mod_CarcaseVisRight, IMatrix_mod_CarcaseVisTop, IMatrix_mod_Depth, IMatrix_mod_FingergripType, IMatrix_mod_FrontColor, IMatrix_mod_FrontDesign, IMatrix_mod_FrontEdgeColor, IMatrix_mod_FrontEdgeThk, IMatrix_mod_FrontFrameColor, IMatrix_mod_FrontGapCarcase, IMatrix_mod_FrontGapHor, IMatrix_mod_FrontGapVert, IMatrix_mod_FrontGlassColor, IMatrix_mod_FrontPosStart, IMatrix_mod_FrontProgram, IMatrix_mod_HandleColor, IMatrix_mod_HandleDesign, IMatrix_mod_HandleLength, IMatrix_mod_HandleLine, IMatrix_mod_HandlePosLogic, IMatrix_mod_HandlePosType, IMatrix_mod_HangerPosX, IMatrix_mod_HangerPosY, IMatrix_mod_HangerType, IMatrix_mod_HardwareColor, IMatrix_mod_Height, IMatrix_mod_HeightPosInsertion, IMatrix_mod_LightPart, IMatrix_mod_LightPosX, IMatrix_mod_LightPosX1, IMatrix_mod_LightPosX2, IMatrix_mod_LightPosX3, IMatrix_mod_LightPosX4, IMatrix_mod_LightPosX5, IMatrix_mod_LightPosY, IMatrix_mod_LightSystem, IMatrix_mod_Model, IMatrix_mod_OpeningType, IMatrix_mod_PlinthAreaDesign, IMatrix_mod_PlinthAreaElementColor, IMatrix_mod_PlinthAreaHeight, IMatrix_mod_PlinthAreaPosBackMatrix, IMatrix_mod_PlinthAreaPosFrontMatrix, IMatrix_mod_PlinthAreaPosLeftMatrix, IMatrix_mod_PlinthAreaPosRightMatrix, IMatrix_mod_PlinthAreaVisLeft, IMatrix_mod_PlinthAreaVisRight, IMatrix_mod_RailhortopbackThk, IMatrix_mod_RailhortopfrontThk, IMatrix_mod_RailverttopbackThk, IMatrix_mod_RailverttopfrontThk, IMatrix_mod_ShelfadjThk, IMatrix_mod_ShelfbtmThk, IMatrix_mod_ShelffixedThk, IMatrix_mod_Width, IMatrix_mod_TypeElement, IMatrix_mod_SidepanelrightThk, IMatrix_mod_SidepanelleftThk, IMatrix_mod_ShelftopThk, IMatrix_mod_CornerunitStraightConstruction, IMatrix_mod_PanelblindThk, IMatrix_mod_CarcaseDirection, IMatrix_mod_ParentName, IMatrix_mod_ModuleName, IMatrix_mod_CornerunitFrontWidth, IMatrix_mod_FrontGapHorTop, IMatrix_mod_PlinthAreaExtraItem, IMatrix_mod_InteriorEquipmentLogic, IMatrix_mod_ShelvesBackwallFittingConnection, IMatrix_mod_CarcasePartConnectionBackHor, IMatrix_mod_CarcasePartConnectionBackVert, IMatrix_mod_CarcasePartConnectionBtmVert, IMatrix_mod_CarcasePartConnectionLeftHor, IMatrix_mod_CarcasePartConnectionRightHor, IMatrix_mod_CarcasePartConnectionTopVert, IMatrix_mod_FittingConnectionBtmVert, IMatrix_mod_FittingConnectionLeftBtm, IMatrix_mod_FittingConnectionLeftHor, IMatrix_mod_FittingConnectionLeftTop, IMatrix_mod_FittingConnectionRightBtm, IMatrix_mod_FittingConnectionRightHor, IMatrix_mod_FittingConnectionRightTop, IMatrix_mod_FittingConnectionTopVert, IMatrix_mod_HangerOffsetPosY, IMatrix_mod_HangerColor, IMatrix_mod_VertDividerType, IMatrix_mod_SidepanelmiddleThk, IMatrix_mod_SidepanelmiddleShortWidth, IMatrix_mod_CarcaseFrontConstruction, IMatrix_mod_CleatThk, IMatrix_mod_CleatWidth, IMatrix_mod_PushtoopenLine, IMatrix_mod_PushtoopenType, IMatrix_mod_PushtoopenColor, IMatrix_mod_PanelWoodFrameType, IMatrix_mod_PanelWoodFrameFillingType, IMatrix_mod_FramePartsWidthHor, IMatrix_mod_FramePartsWidthVert, IMatrix_mod_CreateCountertop, IMatrix_mod_CreatePaneltop, IMatrix_mod_CreateToekick, IMatrix_mod_CreateFingergrip, IMatrix_mod_DoorDirection, IMatrix_mod_SlopeAngle, IMatrix_mod_SlopedCeilingDimensionLogic, IMatrix_mod_SlopedCeilingConstruction, IMatrix_mod_BackHeight, IMatrix_mod_TopDepth, IMatrix_mod_FrameFillingWoodColor, IMatrix_mod_SidepanelrightType, IMatrix_mod_SidepanelleftType, IMatrix_mod_GrainLogic, IMatrix_mod_ShelfadjColor, IMatrix_mod_FrameFillingColor} from '../selections'
import { IGlobalVars, GlobalVars } from '../global-vars'
import { IGlobalVarsParent } from '../global-vars-parent'

import { mr_CornerunitStraight_createBuildPlan, mr_CornerunitStraight_afterDataCompletion, mr_CornerunitStraight_manufacturerDataCompletion } from '../../modules/mr_CornerunitStraight';

export interface cbp_mr_CornerunitStraight extends IModBaseProp
, IModVarNonNull_mod_BackwallFixedHeight, IModVarNonNull_mod_BackwallPos, IModVarNonNull_mod_BackwallThk, IModVarNonNull_mod_CarcaseColor, IModVarNonNull_mod_CarcaseBackwallColor, IModVarNonNull_mod_CarcaseBackwallConstruction, IModVarNonNull_mod_CarcaseProgram, IModVarNonNull_mod_CarcaseBackwallProgram, IModVarNonNull_mod_CarcaseConnectionLeftBtm, IModVarNonNull_mod_CarcaseConnectionLeftTop, IModVarNonNull_mod_CarcaseConnectionRightBtm, IModVarNonNull_mod_CarcaseConnectionRightTop, IModVarNonNull_mod_CarcaseDistanceWall, IModVarNonNull_mod_CarcaseEdgeBackColor, IModVarNonNull_mod_CarcaseEdgeColor, IModVarNonNull_mod_CarcaseEdgeFrontColor, IModVarNonNull_mod_CarcaseOutsideColor, IModVarNonNull_mod_CarcaseOutsideProgram, IModVarNonNull_mod_CarcaseShelfbtmConstruction, IModVarNonNull_mod_CarcaseShelfbtmOversizeInsideWall, IModVarNonNull_mod_CarcaseShelfbtmOversizeLeft, IModVarNonNull_mod_CarcaseShelfbtmOversizeRight, IModVarNonNull_mod_CarcaseShelftopConstruction, IModVarNonNull_mod_CarcaseShelftopOversizeInsideWall, IModVarNonNull_mod_CarcaseShelftopOversizeLeft, IModVarNonNull_mod_CarcaseShelftopOversizeRight, IModVarNonNull_mod_CarcaseSidepanelleftOversizeBtm, IModVarNonNull_mod_CarcaseSidepanelleftOversizeInsideWall, IModVarNonNull_mod_CarcaseSidepanelleftOversizeTop, IModVarNonNull_mod_CarcaseSidepanelrightOversizeBtm, IModVarNonNull_mod_CarcaseSidepanelrightOversizeInsideWall, IModVarNonNull_mod_CarcaseSidepanelrightOversizeTop, IModVarNonNull_mod_CarcaseVisBack, IModVarNonNull_mod_CarcaseVisBtm, IModVarNonNull_mod_CarcaseVisLeft, IModVarNonNull_mod_CarcaseVisRight, IModVarNonNull_mod_CarcaseVisTop, IModVarNonNull_mod_Depth, IModVarNonNull_mod_FingergripType, IModVarNonNull_mod_FrontColor, IModVarNonNull_mod_FrontDesign, IModVarNonNull_mod_FrontEdgeColor, IModVarNonNull_mod_FrontEdgeThk, IModVarNonNull_mod_FrontFrameColor, IModVarNonNull_mod_FrontGapCarcase, IModVarNonNull_mod_FrontGapHor, IModVarNonNull_mod_FrontGapVert, IModVarNonNull_mod_FrontGlassColor, IModVarNonNull_mod_FrontPosStart, IModVarNonNull_mod_FrontProgram, IModVarNonNull_mod_HandleColor, IModVarNonNull_mod_HandleDesign, IModVarNonNull_mod_HandleLength, IModVarNonNull_mod_HandleLine, IModVarNonNull_mod_HandlePosLogic, IModVarNonNull_mod_HandlePosType, IModVarNonNull_mod_HangerPosX, IModVarNonNull_mod_HangerPosY, IModVarNonNull_mod_HangerType, IModVarNonNull_mod_HardwareColor, IModVarNonNull_mod_Height, IModVarNonNull_mod_HeightPosInsertion, IModVarNonNull_mod_LightPart, IModVarNonNull_mod_LightPosX, IModVarNonNull_mod_LightPosX1, IModVarNonNull_mod_LightPosX2, IModVarNonNull_mod_LightPosX3, IModVarNonNull_mod_LightPosX4, IModVarNonNull_mod_LightPosX5, IModVarNonNull_mod_LightPosY, IModVarNonNull_mod_LightSystem, IModVarNonNull_mod_Model, IModVarNonNull_mod_OpeningType, IModVarNonNull_mod_PlinthAreaDesign, IModVarNonNull_mod_PlinthAreaElementColor, IModVarNonNull_mod_PlinthAreaHeight, IModVarNonNull_mod_PlinthAreaPosBackMatrix, IModVarNonNull_mod_PlinthAreaPosFrontMatrix, IModVarNonNull_mod_PlinthAreaPosLeftMatrix, IModVarNonNull_mod_PlinthAreaPosRightMatrix, IModVarNonNull_mod_PlinthAreaVisLeft, IModVarNonNull_mod_PlinthAreaVisRight, IModVarNonNull_mod_RailhortopbackThk, IModVarNonNull_mod_RailhortopfrontThk, IModVarNonNull_mod_RailverttopbackThk, IModVarNonNull_mod_RailverttopfrontThk, IModVarNonNull_mod_ShelfadjThk, IModVarNonNull_mod_ShelfbtmThk, IModVarNonNull_mod_ShelffixedThk, IModVarNonNull_mod_Width, IModVarNonNull_mod_TypeElement, IModVarNonNull_mod_SidepanelrightThk, IModVarNonNull_mod_SidepanelleftThk, IModVarNonNull_mod_ShelftopThk, IModVarNonNull_mod_CornerunitStraightConstruction, IModVarNonNull_mod_PanelblindThk, IModVarNonNull_mod_CarcaseDirection, IModVarNonNull_mod_ParentName, IModVarNonNull_mod_ModuleName, IModVarNonNull_mod_CornerunitFrontWidth, IModVarNonNull_mod_FrontGapHorTop, IModVarNonNull_mod_PlinthAreaExtraItem, IModVarNonNull_mod_InteriorEquipmentLogic, IModVarNonNull_mod_ShelvesBackwallFittingConnection, IModVarNonNull_mod_CarcasePartConnectionBackHor, IModVarNonNull_mod_CarcasePartConnectionBackVert, IModVarNonNull_mod_CarcasePartConnectionBtmVert, IModVarNonNull_mod_CarcasePartConnectionLeftHor, IModVarNonNull_mod_CarcasePartConnectionRightHor, IModVarNonNull_mod_CarcasePartConnectionTopVert, IModVarNonNull_mod_FittingConnectionBtmVert, IModVarNonNull_mod_FittingConnectionLeftBtm, IModVarNonNull_mod_FittingConnectionLeftHor, IModVarNonNull_mod_FittingConnectionLeftTop, IModVarNonNull_mod_FittingConnectionRightBtm, IModVarNonNull_mod_FittingConnectionRightHor, IModVarNonNull_mod_FittingConnectionRightTop, IModVarNonNull_mod_FittingConnectionTopVert, IModVarNonNull_mod_HangerOffsetPosY, IModVarNonNull_mod_HangerColor, IModVarNonNull_mod_VertDividerType, IModVarNonNull_mod_SidepanelmiddleThk, IModVarNonNull_mod_SidepanelmiddleShortWidth, IModVarNonNull_mod_CarcaseFrontConstruction, IModVarNonNull_mod_CleatThk, IModVarNonNull_mod_CleatWidth, IModVarNonNull_mod_CarcasePartInfo, IModVarNonNull_mod_PushtoopenLine, IModVarNonNull_mod_PushtoopenType, IModVarNonNull_mod_PushtoopenColor, IModVarNonNull_mod_PanelWoodFrameType, IModVarNonNull_mod_PanelWoodFrameFillingType, IModVarNonNull_mod_FramePartsWidthHor, IModVarNonNull_mod_FramePartsWidthVert, IModVarNonNull_mod_CreateCountertop, IModVarNonNull_mod_CreatePaneltop, IModVarNonNull_mod_CreateToekick, IModVarNonNull_mod_CreateFingergrip, IModVarNonNull_mod_PlinthAreaPositionInfo, IModVarNonNull_mod_DoorDirection, IModVarNonNull_mod_SlopeAngle, IModVarNonNull_mod_SlopedCeilingDimensionLogic, IModVarNonNull_mod_SlopedCeilingConstruction, IModVarNonNull_mod_BackHeight, IModVarNonNull_mod_TopDepth, IModVarNonNull_mod_FrameFillingWoodColor, IModVarNonNull_mod_SidepanelrightType, IModVarNonNull_mod_SidepanelleftType, IModVarNonNull_mod_GrainLogic, IModVarNonNull_mod_ShelfadjColor, IModVarNonNull_mod_FrameFillingColor {
  createPartGroup(groupName: string, part: IPartBase): PartGroup;
  assignPartGroup(groupName: string, part: IPartBase): void;
  createOpenGroup(groupName: string, part: IPartBase): OpenGroup;
  assignOpenGroup(groupName: string, part: IPartBase): void;
  setOrigin(x:number|Matrix4,y?:number,z?:number):void;
  getFullOrigin(): Vector3;
  addGenerationContour(generationMethod: GenerationMethod, height: number, contour: Contour): void;
  getRoomContours(): RoomContour[];
  get m(): OD_Base[];
}

export interface dc_mr_CornerunitStraight extends IModBaseProp
, IModVar_mod_BackwallFixedHeight, IModVar_mod_BackwallPos, IModVar_mod_BackwallThk, IModVar_mod_CarcaseColor, IModVar_mod_CarcaseBackwallColor, IModVar_mod_CarcaseBackwallConstruction, IModVar_mod_CarcaseProgram, IModVar_mod_CarcaseBackwallProgram, IModVar_mod_CarcaseConnectionLeftBtm, IModVar_mod_CarcaseConnectionLeftTop, IModVar_mod_CarcaseConnectionRightBtm, IModVar_mod_CarcaseConnectionRightTop, IModVar_mod_CarcaseDistanceWall, IModVar_mod_CarcaseEdgeBackColor, IModVar_mod_CarcaseEdgeColor, IModVar_mod_CarcaseEdgeFrontColor, IModVar_mod_CarcaseOutsideColor, IModVar_mod_CarcaseOutsideProgram, IModVar_mod_CarcaseShelfbtmConstruction, IModVar_mod_CarcaseShelfbtmOversizeInsideWall, IModVar_mod_CarcaseShelfbtmOversizeLeft, IModVar_mod_CarcaseShelfbtmOversizeRight, IModVar_mod_CarcaseShelftopConstruction, IModVar_mod_CarcaseShelftopOversizeInsideWall, IModVar_mod_CarcaseShelftopOversizeLeft, IModVar_mod_CarcaseShelftopOversizeRight, IModVar_mod_CarcaseSidepanelleftOversizeBtm, IModVar_mod_CarcaseSidepanelleftOversizeInsideWall, IModVar_mod_CarcaseSidepanelleftOversizeTop, IModVar_mod_CarcaseSidepanelrightOversizeBtm, IModVar_mod_CarcaseSidepanelrightOversizeInsideWall, IModVar_mod_CarcaseSidepanelrightOversizeTop, IModVar_mod_CarcaseVisBack, IModVar_mod_CarcaseVisBtm, IModVar_mod_CarcaseVisLeft, IModVar_mod_CarcaseVisRight, IModVar_mod_CarcaseVisTop, IModVar_mod_Depth, IModVar_mod_FingergripType, IModVar_mod_FrontColor, IModVar_mod_FrontDesign, IModVar_mod_FrontEdgeColor, IModVar_mod_FrontEdgeThk, IModVar_mod_FrontFrameColor, IModVar_mod_FrontGapCarcase, IModVar_mod_FrontGapHor, IModVar_mod_FrontGapVert, IModVar_mod_FrontGlassColor, IModVar_mod_FrontPosStart, IModVar_mod_FrontProgram, IModVar_mod_HandleColor, IModVar_mod_HandleDesign, IModVar_mod_HandleLength, IModVar_mod_HandleLine, IModVar_mod_HandlePosLogic, IModVar_mod_HandlePosType, IModVar_mod_HangerPosX, IModVar_mod_HangerPosY, IModVar_mod_HangerType, IModVar_mod_HardwareColor, IModVar_mod_Height, IModVar_mod_HeightPosInsertion, IModVar_mod_LightPart, IModVar_mod_LightPosX, IModVar_mod_LightPosX1, IModVar_mod_LightPosX2, IModVar_mod_LightPosX3, IModVar_mod_LightPosX4, IModVar_mod_LightPosX5, IModVar_mod_LightPosY, IModVar_mod_LightSystem, IModVar_mod_Model, IModVar_mod_OpeningType, IModVar_mod_PlinthAreaDesign, IModVar_mod_PlinthAreaElementColor, IModVar_mod_PlinthAreaHeight, IModVar_mod_PlinthAreaPosBackMatrix, IModVar_mod_PlinthAreaPosFrontMatrix, IModVar_mod_PlinthAreaPosLeftMatrix, IModVar_mod_PlinthAreaPosRightMatrix, IModVar_mod_PlinthAreaVisLeft, IModVar_mod_PlinthAreaVisRight, IModVar_mod_RailhortopbackThk, IModVar_mod_RailhortopfrontThk, IModVar_mod_RailverttopbackThk, IModVar_mod_RailverttopfrontThk, IModVar_mod_ShelfadjThk, IModVar_mod_ShelfbtmThk, IModVar_mod_ShelffixedThk, IModVar_mod_Width, IModVar_mod_TypeElement, IModVar_mod_SidepanelrightThk, IModVar_mod_SidepanelleftThk, IModVar_mod_ShelftopThk, IModVar_mod_CornerunitStraightConstruction, IModVar_mod_PanelblindThk, IModVar_mod_CarcaseDirection, IModVar_mod_ParentName, IModVar_mod_ModuleName, IModVar_mod_CornerunitFrontWidth, IModVar_mod_FrontGapHorTop, IModVar_mod_PlinthAreaExtraItem, IModVar_mod_InteriorEquipmentLogic, IModVar_mod_ShelvesBackwallFittingConnection, IModVar_mod_CarcasePartConnectionBackHor, IModVar_mod_CarcasePartConnectionBackVert, IModVar_mod_CarcasePartConnectionBtmVert, IModVar_mod_CarcasePartConnectionLeftHor, IModVar_mod_CarcasePartConnectionRightHor, IModVar_mod_CarcasePartConnectionTopVert, IModVar_mod_FittingConnectionBtmVert, IModVar_mod_FittingConnectionLeftBtm, IModVar_mod_FittingConnectionLeftHor, IModVar_mod_FittingConnectionLeftTop, IModVar_mod_FittingConnectionRightBtm, IModVar_mod_FittingConnectionRightHor, IModVar_mod_FittingConnectionRightTop, IModVar_mod_FittingConnectionTopVert, IModVar_mod_HangerOffsetPosY, IModVar_mod_HangerColor, IModVar_mod_VertDividerType, IModVar_mod_SidepanelmiddleThk, IModVar_mod_SidepanelmiddleShortWidth, IModVar_mod_CarcaseFrontConstruction, IModVar_mod_CleatThk, IModVar_mod_CleatWidth, IModVar_mod_CarcasePartInfo, IModVar_mod_PushtoopenLine, IModVar_mod_PushtoopenType, IModVar_mod_PushtoopenColor, IModVar_mod_PanelWoodFrameType, IModVar_mod_PanelWoodFrameFillingType, IModVar_mod_FramePartsWidthHor, IModVar_mod_FramePartsWidthVert, IModVar_mod_CreateCountertop, IModVar_mod_CreatePaneltop, IModVar_mod_CreateToekick, IModVar_mod_CreateFingergrip, IModVar_mod_PlinthAreaPositionInfo, IModVar_mod_DoorDirection, IModVar_mod_SlopeAngle, IModVar_mod_SlopedCeilingDimensionLogic, IModVar_mod_SlopedCeilingConstruction, IModVar_mod_BackHeight, IModVar_mod_TopDepth, IModVar_mod_FrameFillingWoodColor, IModVar_mod_SidepanelrightType, IModVar_mod_SidepanelleftType, IModVar_mod_GrainLogic, IModVar_mod_ShelfadjColor, IModVar_mod_FrameFillingColor {
  m:OD_Base[];
  setOrigin(x:number|Matrix4,y?:number,z?:number):void;
  seal():IModuleNonNull_mr_CornerunitStraight;
  addOD_M_mc_Storageunit01(index?: number): dc_mc_Storageunit01;
  addOD_M_mc_PlinthArea01(index?: number): dc_mc_PlinthArea01;
  addOD_M_mf_Door(index?: number): dc_mf_Door;
  addOD_M_mc_CornerunitStraight01(index?: number): dc_mc_CornerunitStraight01;
  addOD_M_mf_RackArea(index?: number): dc_mf_RackArea;
  addOD_M_mf_Drawer(index?: number): dc_mf_Drawer;
  addOD_M_mf_CornerFillerFront(index?: number): dc_mf_CornerFillerFront;
}

export interface adc_mr_CornerunitStraight extends IModBaseProp
, IModVarNonNull_mod_BackwallFixedHeight, IModVarNonNull_mod_BackwallPos, IModVarNonNull_mod_BackwallThk, IModVarNonNull_mod_CarcaseColor, IModVarNonNull_mod_CarcaseBackwallColor, IModVarNonNull_mod_CarcaseBackwallConstruction, IModVarNonNull_mod_CarcaseProgram, IModVarNonNull_mod_CarcaseBackwallProgram, IModVarNonNull_mod_CarcaseConnectionLeftBtm, IModVarNonNull_mod_CarcaseConnectionLeftTop, IModVarNonNull_mod_CarcaseConnectionRightBtm, IModVarNonNull_mod_CarcaseConnectionRightTop, IModVarNonNull_mod_CarcaseDistanceWall, IModVarNonNull_mod_CarcaseEdgeBackColor, IModVarNonNull_mod_CarcaseEdgeColor, IModVarNonNull_mod_CarcaseEdgeFrontColor, IModVarNonNull_mod_CarcaseOutsideColor, IModVarNonNull_mod_CarcaseOutsideProgram, IModVarNonNull_mod_CarcaseShelfbtmConstruction, IModVarNonNull_mod_CarcaseShelfbtmOversizeInsideWall, IModVarNonNull_mod_CarcaseShelfbtmOversizeLeft, IModVarNonNull_mod_CarcaseShelfbtmOversizeRight, IModVarNonNull_mod_CarcaseShelftopConstruction, IModVarNonNull_mod_CarcaseShelftopOversizeInsideWall, IModVarNonNull_mod_CarcaseShelftopOversizeLeft, IModVarNonNull_mod_CarcaseShelftopOversizeRight, IModVarNonNull_mod_CarcaseSidepanelleftOversizeBtm, IModVarNonNull_mod_CarcaseSidepanelleftOversizeInsideWall, IModVarNonNull_mod_CarcaseSidepanelleftOversizeTop, IModVarNonNull_mod_CarcaseSidepanelrightOversizeBtm, IModVarNonNull_mod_CarcaseSidepanelrightOversizeInsideWall, IModVarNonNull_mod_CarcaseSidepanelrightOversizeTop, IModVarNonNull_mod_CarcaseVisBack, IModVarNonNull_mod_CarcaseVisBtm, IModVarNonNull_mod_CarcaseVisLeft, IModVarNonNull_mod_CarcaseVisRight, IModVarNonNull_mod_CarcaseVisTop, IModVarNonNull_mod_Depth, IModVarNonNull_mod_FingergripType, IModVarNonNull_mod_FrontColor, IModVarNonNull_mod_FrontDesign, IModVarNonNull_mod_FrontEdgeColor, IModVarNonNull_mod_FrontEdgeThk, IModVarNonNull_mod_FrontFrameColor, IModVarNonNull_mod_FrontGapCarcase, IModVarNonNull_mod_FrontGapHor, IModVarNonNull_mod_FrontGapVert, IModVarNonNull_mod_FrontGlassColor, IModVarNonNull_mod_FrontPosStart, IModVarNonNull_mod_FrontProgram, IModVarNonNull_mod_HandleColor, IModVarNonNull_mod_HandleDesign, IModVarNonNull_mod_HandleLength, IModVarNonNull_mod_HandleLine, IModVarNonNull_mod_HandlePosLogic, IModVarNonNull_mod_HandlePosType, IModVarNonNull_mod_HangerPosX, IModVarNonNull_mod_HangerPosY, IModVarNonNull_mod_HangerType, IModVarNonNull_mod_HardwareColor, IModVarNonNull_mod_Height, IModVarNonNull_mod_HeightPosInsertion, IModVarNonNull_mod_LightPart, IModVarNonNull_mod_LightPosX, IModVarNonNull_mod_LightPosX1, IModVarNonNull_mod_LightPosX2, IModVarNonNull_mod_LightPosX3, IModVarNonNull_mod_LightPosX4, IModVarNonNull_mod_LightPosX5, IModVarNonNull_mod_LightPosY, IModVarNonNull_mod_LightSystem, IModVarNonNull_mod_Model, IModVarNonNull_mod_OpeningType, IModVarNonNull_mod_PlinthAreaDesign, IModVarNonNull_mod_PlinthAreaElementColor, IModVarNonNull_mod_PlinthAreaHeight, IModVarNonNull_mod_PlinthAreaPosBackMatrix, IModVarNonNull_mod_PlinthAreaPosFrontMatrix, IModVarNonNull_mod_PlinthAreaPosLeftMatrix, IModVarNonNull_mod_PlinthAreaPosRightMatrix, IModVarNonNull_mod_PlinthAreaVisLeft, IModVarNonNull_mod_PlinthAreaVisRight, IModVarNonNull_mod_RailhortopbackThk, IModVarNonNull_mod_RailhortopfrontThk, IModVarNonNull_mod_RailverttopbackThk, IModVarNonNull_mod_RailverttopfrontThk, IModVarNonNull_mod_ShelfadjThk, IModVarNonNull_mod_ShelfbtmThk, IModVarNonNull_mod_ShelffixedThk, IModVarNonNull_mod_Width, IModVarNonNull_mod_TypeElement, IModVarNonNull_mod_SidepanelrightThk, IModVarNonNull_mod_SidepanelleftThk, IModVarNonNull_mod_ShelftopThk, IModVarNonNull_mod_CornerunitStraightConstruction, IModVarNonNull_mod_PanelblindThk, IModVarNonNull_mod_CarcaseDirection, IModVarNonNull_mod_ParentName, IModVarNonNull_mod_ModuleName, IModVarNonNull_mod_CornerunitFrontWidth, IModVarNonNull_mod_FrontGapHorTop, IModVarNonNull_mod_PlinthAreaExtraItem, IModVarNonNull_mod_InteriorEquipmentLogic, IModVarNonNull_mod_ShelvesBackwallFittingConnection, IModVarNonNull_mod_CarcasePartConnectionBackHor, IModVarNonNull_mod_CarcasePartConnectionBackVert, IModVarNonNull_mod_CarcasePartConnectionBtmVert, IModVarNonNull_mod_CarcasePartConnectionLeftHor, IModVarNonNull_mod_CarcasePartConnectionRightHor, IModVarNonNull_mod_CarcasePartConnectionTopVert, IModVarNonNull_mod_FittingConnectionBtmVert, IModVarNonNull_mod_FittingConnectionLeftBtm, IModVarNonNull_mod_FittingConnectionLeftHor, IModVarNonNull_mod_FittingConnectionLeftTop, IModVarNonNull_mod_FittingConnectionRightBtm, IModVarNonNull_mod_FittingConnectionRightHor, IModVarNonNull_mod_FittingConnectionRightTop, IModVarNonNull_mod_FittingConnectionTopVert, IModVarNonNull_mod_HangerOffsetPosY, IModVarNonNull_mod_HangerColor, IModVarNonNull_mod_VertDividerType, IModVarNonNull_mod_SidepanelmiddleThk, IModVarNonNull_mod_SidepanelmiddleShortWidth, IModVarNonNull_mod_CarcaseFrontConstruction, IModVarNonNull_mod_CleatThk, IModVarNonNull_mod_CleatWidth, IModVarNonNull_mod_CarcasePartInfo, IModVarNonNull_mod_PushtoopenLine, IModVarNonNull_mod_PushtoopenType, IModVarNonNull_mod_PushtoopenColor, IModVarNonNull_mod_PanelWoodFrameType, IModVarNonNull_mod_PanelWoodFrameFillingType, IModVarNonNull_mod_FramePartsWidthHor, IModVarNonNull_mod_FramePartsWidthVert, IModVarNonNull_mod_CreateCountertop, IModVarNonNull_mod_CreatePaneltop, IModVarNonNull_mod_CreateToekick, IModVarNonNull_mod_CreateFingergrip, IModVarNonNull_mod_PlinthAreaPositionInfo, IModVarNonNull_mod_DoorDirection, IModVarNonNull_mod_SlopeAngle, IModVarNonNull_mod_SlopedCeilingDimensionLogic, IModVarNonNull_mod_SlopedCeilingConstruction, IModVarNonNull_mod_BackHeight, IModVarNonNull_mod_TopDepth, IModVarNonNull_mod_FrameFillingWoodColor, IModVarNonNull_mod_SidepanelrightType, IModVarNonNull_mod_SidepanelleftType, IModVarNonNull_mod_GrainLogic, IModVarNonNull_mod_ShelfadjColor, IModVarNonNull_mod_FrameFillingColor {
  get m(): OD_Base[];
  setOrigin(x:number|Matrix4,y?:number,z?:number):void;
  addOD_M_mc_Storageunit01(index?: number): dc_mc_Storageunit01;
  addOD_M_mc_PlinthArea01(index?: number): dc_mc_PlinthArea01;
  addOD_M_mf_Door(index?: number): dc_mf_Door;
  addOD_M_mc_CornerunitStraight01(index?: number): dc_mc_CornerunitStraight01;
  addOD_M_mf_RackArea(index?: number): dc_mf_RackArea;
  addOD_M_mf_Drawer(index?: number): dc_mf_Drawer;
  addOD_M_mf_CornerFillerFront(index?: number): dc_mf_CornerFillerFront;
get dockingInfo() : IDockingInfo[];
addDockingInfo(id: Dock, start: Vector3, end: Vector3): IDockingInfo;
get insertLevelInfo(): IInsertLevelInfo[];
get insertLevelFixed(): boolean;
set insertLevelFixed(value: boolean);
addInsertLevelHeight(height:number) : IInsertLevelInfo;
addInsertLevelHeight(height:number, isDefault: boolean|undefined) : IInsertLevelInfo;
  getRoomContours(): RoomContour[];
  get _posData(): Map<string, string|number>;
}

export class OD_M_mr_CornerunitStraight extends OD_Base  implements dc_mr_CornerunitStraight
,IModParents_mr_CornerunitStraight_mr_StorageunitSingle,IModParents_mr_CornerunitStraight_mr_Filler01_mr_StorageunitSingle,IModParents_mr_CornerunitStraight,IModParents_mr_CornerFiller_mr_CornerunitStraight
,IModVar_mod_BackwallFixedHeight,IModVar_mod_BackwallPos,IModVar_mod_BackwallThk,IModVar_mod_CarcaseColor,IModVar_mod_CarcaseBackwallColor,IModVar_mod_CarcaseBackwallConstruction,IModVar_mod_CarcaseProgram,IModVar_mod_CarcaseBackwallProgram,IModVar_mod_CarcaseConnectionLeftBtm,IModVar_mod_CarcaseConnectionLeftTop,IModVar_mod_CarcaseConnectionRightBtm,IModVar_mod_CarcaseConnectionRightTop,IModVar_mod_CarcaseDistanceWall,IModVar_mod_CarcaseEdgeBackColor,IModVar_mod_CarcaseEdgeColor,IModVar_mod_CarcaseEdgeFrontColor,IModVar_mod_CarcaseOutsideColor,IModVar_mod_CarcaseOutsideProgram,IModVar_mod_CarcaseShelfbtmConstruction,IModVar_mod_CarcaseShelfbtmOversizeInsideWall,IModVar_mod_CarcaseShelfbtmOversizeLeft,IModVar_mod_CarcaseShelfbtmOversizeRight,IModVar_mod_CarcaseShelftopConstruction,IModVar_mod_CarcaseShelftopOversizeInsideWall,IModVar_mod_CarcaseShelftopOversizeLeft,IModVar_mod_CarcaseShelftopOversizeRight,IModVar_mod_CarcaseSidepanelleftOversizeBtm,IModVar_mod_CarcaseSidepanelleftOversizeInsideWall,IModVar_mod_CarcaseSidepanelleftOversizeTop,IModVar_mod_CarcaseSidepanelrightOversizeBtm,IModVar_mod_CarcaseSidepanelrightOversizeInsideWall,IModVar_mod_CarcaseSidepanelrightOversizeTop,IModVar_mod_CarcaseVisBack,IModVar_mod_CarcaseVisBtm,IModVar_mod_CarcaseVisLeft,IModVar_mod_CarcaseVisRight,IModVar_mod_CarcaseVisTop,IModVar_mod_Depth,IModVar_mod_FingergripType,IModVar_mod_FrontColor,IModVar_mod_FrontDesign,IModVar_mod_FrontEdgeColor,IModVar_mod_FrontEdgeThk,IModVar_mod_FrontFrameColor,IModVar_mod_FrontGapCarcase,IModVar_mod_FrontGapHor,IModVar_mod_FrontGapVert,IModVar_mod_FrontGlassColor,IModVar_mod_FrontPosStart,IModVar_mod_FrontProgram,IModVar_mod_HandleColor,IModVar_mod_HandleDesign,IModVar_mod_HandleLength,IModVar_mod_HandleLine,IModVar_mod_HandlePosLogic,IModVar_mod_HandlePosType,IModVar_mod_HangerPosX,IModVar_mod_HangerPosY,IModVar_mod_HangerType,IModVar_mod_HardwareColor,IModVar_mod_Height,IModVar_mod_HeightPosInsertion,IModVar_mod_LightPart,IModVar_mod_LightPosX,IModVar_mod_LightPosX1,IModVar_mod_LightPosX2,IModVar_mod_LightPosX3,IModVar_mod_LightPosX4,IModVar_mod_LightPosX5,IModVar_mod_LightPosY,IModVar_mod_LightSystem,IModVar_mod_Model,IModVar_mod_OpeningType,IModVar_mod_PlinthAreaDesign,IModVar_mod_PlinthAreaElementColor,IModVar_mod_PlinthAreaHeight,IModVar_mod_PlinthAreaPosBackMatrix,IModVar_mod_PlinthAreaPosFrontMatrix,IModVar_mod_PlinthAreaPosLeftMatrix,IModVar_mod_PlinthAreaPosRightMatrix,IModVar_mod_PlinthAreaVisLeft,IModVar_mod_PlinthAreaVisRight,IModVar_mod_RailhortopbackThk,IModVar_mod_RailhortopfrontThk,IModVar_mod_RailverttopbackThk,IModVar_mod_RailverttopfrontThk,IModVar_mod_ShelfadjThk,IModVar_mod_ShelfbtmThk,IModVar_mod_ShelffixedThk,IModVar_mod_Width,IModVar_mod_TypeElement,IModVar_mod_SidepanelrightThk,IModVar_mod_SidepanelleftThk,IModVar_mod_ShelftopThk,IModVar_mod_CornerunitStraightConstruction,IModVar_mod_PanelblindThk,IModVar_mod_CarcaseDirection,IModVar_mod_ParentName,IModVar_mod_ModuleName,IModVar_mod_CornerunitFrontWidth,IModVar_mod_FrontGapHorTop,IModVar_mod_PlinthAreaExtraItem,IModVar_mod_InteriorEquipmentLogic,IModVar_mod_ShelvesBackwallFittingConnection,IModVar_mod_CarcasePartConnectionBackHor,IModVar_mod_CarcasePartConnectionBackVert,IModVar_mod_CarcasePartConnectionBtmVert,IModVar_mod_CarcasePartConnectionLeftHor,IModVar_mod_CarcasePartConnectionRightHor,IModVar_mod_CarcasePartConnectionTopVert,IModVar_mod_FittingConnectionBtmVert,IModVar_mod_FittingConnectionLeftBtm,IModVar_mod_FittingConnectionLeftHor,IModVar_mod_FittingConnectionLeftTop,IModVar_mod_FittingConnectionRightBtm,IModVar_mod_FittingConnectionRightHor,IModVar_mod_FittingConnectionRightTop,IModVar_mod_FittingConnectionTopVert,IModVar_mod_HangerOffsetPosY,IModVar_mod_HangerColor,IModVar_mod_VertDividerType,IModVar_mod_SidepanelmiddleThk,IModVar_mod_SidepanelmiddleShortWidth,IModVar_mod_CarcaseFrontConstruction,IModVar_mod_CleatThk,IModVar_mod_CleatWidth,IModVar_mod_CarcasePartInfo,IModVar_mod_PushtoopenLine,IModVar_mod_PushtoopenType,IModVar_mod_PushtoopenColor,IModVar_mod_PanelWoodFrameType,IModVar_mod_PanelWoodFrameFillingType,IModVar_mod_FramePartsWidthHor,IModVar_mod_FramePartsWidthVert,IModVar_mod_CreateCountertop,IModVar_mod_CreatePaneltop,IModVar_mod_CreateToekick,IModVar_mod_CreateFingergrip,IModVar_mod_PlinthAreaPositionInfo,IModVar_mod_DoorDirection,IModVar_mod_SlopeAngle,IModVar_mod_SlopedCeilingDimensionLogic,IModVar_mod_SlopedCeilingConstruction,IModVar_mod_BackHeight,IModVar_mod_TopDepth,IModVar_mod_FrameFillingWoodColor,IModVar_mod_SidepanelrightType,IModVar_mod_SidepanelleftType,IModVar_mod_GrainLogic,IModVar_mod_ShelfadjColor,IModVar_mod_FrameFillingColor
 {
  constructor(parent?: OD_Base, manufacturerMode?:boolean) {
    super('mr_CornerunitStraight', parent, parent !== undefined ? parent._manufacturerMode : manufacturerMode!);
    this._g = new GlobalVars();
    this._openGroups = new Map<string, OpenGroup>();
    this._partGroups = new Map<string, PartGroup>();
    this._selfNonNull = new OD_M_mr_CornerunitStraight_NonNull(this);
  }
  _selfNonNull: OD_M_mr_CornerunitStraight_NonNull;

  addGenerationContour(generationMethod: GenerationMethod, height: number, contour: Contour): void {
    this.generationContours.push({
      generationMethod: generationMethod,
      height: height,
      contour: contour,
      position: this._articlePos,
    });
  }

  override variants:string[] = ['mod_BackwallFixedHeight','mod_BackwallPos','mod_BackwallThk','mod_CarcaseColor','mod_CarcaseBackwallColor','mod_CarcaseBackwallConstruction','mod_CarcaseProgram','mod_CarcaseBackwallProgram','mod_CarcaseConnectionLeftBtm','mod_CarcaseConnectionLeftTop','mod_CarcaseConnectionRightBtm','mod_CarcaseConnectionRightTop','mod_CarcaseDistanceWall','mod_CarcaseEdgeBackColor','mod_CarcaseEdgeColor','mod_CarcaseEdgeFrontColor','mod_CarcaseOutsideColor','mod_CarcaseOutsideProgram','mod_CarcaseShelfbtmConstruction','mod_CarcaseShelfbtmOversizeInsideWall','mod_CarcaseShelfbtmOversizeLeft','mod_CarcaseShelfbtmOversizeRight','mod_CarcaseShelftopConstruction','mod_CarcaseShelftopOversizeInsideWall','mod_CarcaseShelftopOversizeLeft','mod_CarcaseShelftopOversizeRight','mod_CarcaseSidepanelleftOversizeBtm','mod_CarcaseSidepanelleftOversizeInsideWall','mod_CarcaseSidepanelleftOversizeTop','mod_CarcaseSidepanelrightOversizeBtm','mod_CarcaseSidepanelrightOversizeInsideWall','mod_CarcaseSidepanelrightOversizeTop','mod_CarcaseVisBack','mod_CarcaseVisBtm','mod_CarcaseVisLeft','mod_CarcaseVisRight','mod_CarcaseVisTop','mod_Depth','mod_FingergripType','mod_FrontColor','mod_FrontDesign','mod_FrontEdgeColor','mod_FrontEdgeThk','mod_FrontFrameColor','mod_FrontGapCarcase','mod_FrontGapHor','mod_FrontGapVert','mod_FrontGlassColor','mod_FrontPosStart','mod_FrontProgram','mod_HandleColor','mod_HandleDesign','mod_HandleLength','mod_HandleLine','mod_HandlePosLogic','mod_HandlePosType','mod_HangerPosX','mod_HangerPosY','mod_HangerType','mod_HardwareColor','mod_Height','mod_HeightPosInsertion','mod_LightPart','mod_LightPosX','mod_LightPosX1','mod_LightPosX2','mod_LightPosX3','mod_LightPosX4','mod_LightPosX5','mod_LightPosY','mod_LightSystem','mod_Model','mod_OpeningType','mod_PlinthAreaDesign','mod_PlinthAreaElementColor','mod_PlinthAreaHeight','mod_PlinthAreaPosBackMatrix','mod_PlinthAreaPosFrontMatrix','mod_PlinthAreaPosLeftMatrix','mod_PlinthAreaPosRightMatrix','mod_PlinthAreaVisLeft','mod_PlinthAreaVisRight','mod_RailhortopbackThk','mod_RailhortopfrontThk','mod_RailverttopbackThk','mod_RailverttopfrontThk','mod_ShelfadjThk','mod_ShelfbtmThk','mod_ShelffixedThk','mod_Width','mod_TypeElement','mod_SidepanelrightThk','mod_SidepanelleftThk','mod_ShelftopThk','mod_CornerunitStraightConstruction','mod_PanelblindThk','mod_CarcaseDirection','mod_ParentName','mod_ModuleName','mod_CornerunitFrontWidth','mod_FrontGapHorTop','mod_PlinthAreaExtraItem','mod_InteriorEquipmentLogic','mod_ShelvesBackwallFittingConnection','mod_CarcasePartConnectionBackHor','mod_CarcasePartConnectionBackVert','mod_CarcasePartConnectionBtmVert','mod_CarcasePartConnectionLeftHor','mod_CarcasePartConnectionRightHor','mod_CarcasePartConnectionTopVert','mod_FittingConnectionBtmVert','mod_FittingConnectionLeftBtm','mod_FittingConnectionLeftHor','mod_FittingConnectionLeftTop','mod_FittingConnectionRightBtm','mod_FittingConnectionRightHor','mod_FittingConnectionRightTop','mod_FittingConnectionTopVert','mod_HangerOffsetPosY','mod_HangerColor','mod_VertDividerType','mod_SidepanelmiddleThk','mod_SidepanelmiddleShortWidth','mod_CarcaseFrontConstruction','mod_CleatThk','mod_CleatWidth','mod_CarcasePartInfo','mod_PushtoopenLine','mod_PushtoopenType','mod_PushtoopenColor','mod_PanelWoodFrameType','mod_PanelWoodFrameFillingType','mod_FramePartsWidthHor','mod_FramePartsWidthVert','mod_CreateCountertop','mod_CreatePaneltop','mod_CreateToekick','mod_CreateFingergrip','mod_PlinthAreaPositionInfo','mod_DoorDirection','mod_SlopeAngle','mod_SlopedCeilingDimensionLogic','mod_SlopedCeilingConstruction','mod_BackHeight','mod_TopDepth','mod_FrameFillingWoodColor','mod_SidepanelrightType','mod_SidepanelleftType','mod_GrainLogic','mod_ShelfadjColor','mod_FrameFillingColor',];
  #mod_BackwallFixedHeight?: number;
  get mod_BackwallFixedHeight(): number | undefined { return this.#mod_BackwallFixedHeight}
  set mod_BackwallFixedHeight(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_BackwallFixedHeight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_BackwallFixedHeight === value) return;
    this.#mod_BackwallFixedHeight = value;
  }

  mod_BackwallFixedHeight_matrix?: IMatrix_mod_BackwallFixedHeight;
  #mod_BackwallPos?: number;
  get mod_BackwallPos(): number | undefined { return this.#mod_BackwallPos}
  set mod_BackwallPos(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_BackwallPos' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_BackwallPos === value) return;
    this.#mod_BackwallPos = value;
  }

  mod_BackwallPos_matrix?: IMatrix_mod_BackwallPos;
  #mod_BackwallThk?: number;
  get mod_BackwallThk(): number | undefined { return this.#mod_BackwallThk}
  set mod_BackwallThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_BackwallThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_BackwallThk === value) return;
    this.#mod_BackwallThk = value;
  }

  mod_BackwallThk_matrix?: IMatrix_mod_BackwallThk;
  #mod_CarcaseColor?: string;
  get mod_CarcaseColor(): string | undefined { return this.#mod_CarcaseColor}
  set mod_CarcaseColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseColor === value) return;
    this.#mod_CarcaseColor = value;
  }

  mod_CarcaseColor_matrix?: IMatrix_mod_CarcaseColor;
  #mod_CarcaseBackwallColor?: string;
  get mod_CarcaseBackwallColor(): string | undefined { return this.#mod_CarcaseBackwallColor}
  set mod_CarcaseBackwallColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseBackwallColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseBackwallColor === value) return;
    this.#mod_CarcaseBackwallColor = value;
  }

  mod_CarcaseBackwallColor_matrix?: IMatrix_mod_CarcaseBackwallColor;
  #mod_CarcaseBackwallConstruction?: string;
  get mod_CarcaseBackwallConstruction(): string | undefined { return this.#mod_CarcaseBackwallConstruction}
  set mod_CarcaseBackwallConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseBackwallConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseBackwallConstruction === value) return;
    this.#mod_CarcaseBackwallConstruction = value;
  }

  mod_CarcaseBackwallConstruction_matrix?: IMatrix_mod_CarcaseBackwallConstruction;
  #mod_CarcaseProgram?: string;
  get mod_CarcaseProgram(): string | undefined { return this.#mod_CarcaseProgram}
  set mod_CarcaseProgram(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseProgram' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseProgram === value) return;
    this.#mod_CarcaseProgram = value;
  }

  mod_CarcaseProgram_matrix?: IMatrix_mod_CarcaseProgram;
  #mod_CarcaseBackwallProgram?: string;
  get mod_CarcaseBackwallProgram(): string | undefined { return this.#mod_CarcaseBackwallProgram}
  set mod_CarcaseBackwallProgram(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseBackwallProgram' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseBackwallProgram === value) return;
    this.#mod_CarcaseBackwallProgram = value;
  }

  mod_CarcaseBackwallProgram_matrix?: IMatrix_mod_CarcaseBackwallProgram;
  #mod_CarcaseConnectionLeftBtm?: string;
  get mod_CarcaseConnectionLeftBtm(): string | undefined { return this.#mod_CarcaseConnectionLeftBtm}
  set mod_CarcaseConnectionLeftBtm(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseConnectionLeftBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseConnectionLeftBtm === value) return;
    this.#mod_CarcaseConnectionLeftBtm = value;
  }

  mod_CarcaseConnectionLeftBtm_matrix?: IMatrix_mod_CarcaseConnectionLeftBtm;
  #mod_CarcaseConnectionLeftTop?: string;
  get mod_CarcaseConnectionLeftTop(): string | undefined { return this.#mod_CarcaseConnectionLeftTop}
  set mod_CarcaseConnectionLeftTop(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseConnectionLeftTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseConnectionLeftTop === value) return;
    this.#mod_CarcaseConnectionLeftTop = value;
  }

  mod_CarcaseConnectionLeftTop_matrix?: IMatrix_mod_CarcaseConnectionLeftTop;
  #mod_CarcaseConnectionRightBtm?: string;
  get mod_CarcaseConnectionRightBtm(): string | undefined { return this.#mod_CarcaseConnectionRightBtm}
  set mod_CarcaseConnectionRightBtm(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseConnectionRightBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseConnectionRightBtm === value) return;
    this.#mod_CarcaseConnectionRightBtm = value;
  }

  mod_CarcaseConnectionRightBtm_matrix?: IMatrix_mod_CarcaseConnectionRightBtm;
  #mod_CarcaseConnectionRightTop?: string;
  get mod_CarcaseConnectionRightTop(): string | undefined { return this.#mod_CarcaseConnectionRightTop}
  set mod_CarcaseConnectionRightTop(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseConnectionRightTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseConnectionRightTop === value) return;
    this.#mod_CarcaseConnectionRightTop = value;
  }

  mod_CarcaseConnectionRightTop_matrix?: IMatrix_mod_CarcaseConnectionRightTop;
  #mod_CarcaseDistanceWall?: number;
  get mod_CarcaseDistanceWall(): number | undefined { return this.#mod_CarcaseDistanceWall}
  set mod_CarcaseDistanceWall(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseDistanceWall' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseDistanceWall === value) return;
    this.#mod_CarcaseDistanceWall = value;
  }

  mod_CarcaseDistanceWall_matrix?: IMatrix_mod_CarcaseDistanceWall;
  #mod_CarcaseEdgeBackColor?: string;
  get mod_CarcaseEdgeBackColor(): string | undefined { return this.#mod_CarcaseEdgeBackColor}
  set mod_CarcaseEdgeBackColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseEdgeBackColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseEdgeBackColor === value) return;
    this.#mod_CarcaseEdgeBackColor = value;
  }

  mod_CarcaseEdgeBackColor_matrix?: IMatrix_mod_CarcaseEdgeBackColor;
  #mod_CarcaseEdgeColor?: string;
  get mod_CarcaseEdgeColor(): string | undefined { return this.#mod_CarcaseEdgeColor}
  set mod_CarcaseEdgeColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseEdgeColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseEdgeColor === value) return;
    this.#mod_CarcaseEdgeColor = value;
  }

  mod_CarcaseEdgeColor_matrix?: IMatrix_mod_CarcaseEdgeColor;
  #mod_CarcaseEdgeFrontColor?: string;
  get mod_CarcaseEdgeFrontColor(): string | undefined { return this.#mod_CarcaseEdgeFrontColor}
  set mod_CarcaseEdgeFrontColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseEdgeFrontColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseEdgeFrontColor === value) return;
    this.#mod_CarcaseEdgeFrontColor = value;
  }

  mod_CarcaseEdgeFrontColor_matrix?: IMatrix_mod_CarcaseEdgeFrontColor;
  #mod_CarcaseOutsideColor?: string;
  get mod_CarcaseOutsideColor(): string | undefined { return this.#mod_CarcaseOutsideColor}
  set mod_CarcaseOutsideColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseOutsideColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseOutsideColor === value) return;
    this.#mod_CarcaseOutsideColor = value;
  }

  mod_CarcaseOutsideColor_matrix?: IMatrix_mod_CarcaseOutsideColor;
  #mod_CarcaseOutsideProgram?: string;
  get mod_CarcaseOutsideProgram(): string | undefined { return this.#mod_CarcaseOutsideProgram}
  set mod_CarcaseOutsideProgram(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseOutsideProgram' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseOutsideProgram === value) return;
    this.#mod_CarcaseOutsideProgram = value;
  }

  mod_CarcaseOutsideProgram_matrix?: IMatrix_mod_CarcaseOutsideProgram;
  #mod_CarcaseShelfbtmConstruction?: string;
  get mod_CarcaseShelfbtmConstruction(): string | undefined { return this.#mod_CarcaseShelfbtmConstruction}
  set mod_CarcaseShelfbtmConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelfbtmConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelfbtmConstruction === value) return;
    this.#mod_CarcaseShelfbtmConstruction = value;
  }

  mod_CarcaseShelfbtmConstruction_matrix?: IMatrix_mod_CarcaseShelfbtmConstruction;
  #mod_CarcaseShelfbtmOversizeInsideWall?: number;
  get mod_CarcaseShelfbtmOversizeInsideWall(): number | undefined { return this.#mod_CarcaseShelfbtmOversizeInsideWall}
  set mod_CarcaseShelfbtmOversizeInsideWall(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelfbtmOversizeInsideWall' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelfbtmOversizeInsideWall === value) return;
    this.#mod_CarcaseShelfbtmOversizeInsideWall = value;
  }

  mod_CarcaseShelfbtmOversizeInsideWall_matrix?: IMatrix_mod_CarcaseShelfbtmOversizeInsideWall;
  #mod_CarcaseShelfbtmOversizeLeft?: number;
  get mod_CarcaseShelfbtmOversizeLeft(): number | undefined { return this.#mod_CarcaseShelfbtmOversizeLeft}
  set mod_CarcaseShelfbtmOversizeLeft(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelfbtmOversizeLeft' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelfbtmOversizeLeft === value) return;
    this.#mod_CarcaseShelfbtmOversizeLeft = value;
  }

  mod_CarcaseShelfbtmOversizeLeft_matrix?: IMatrix_mod_CarcaseShelfbtmOversizeLeft;
  #mod_CarcaseShelfbtmOversizeRight?: number;
  get mod_CarcaseShelfbtmOversizeRight(): number | undefined { return this.#mod_CarcaseShelfbtmOversizeRight}
  set mod_CarcaseShelfbtmOversizeRight(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelfbtmOversizeRight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelfbtmOversizeRight === value) return;
    this.#mod_CarcaseShelfbtmOversizeRight = value;
  }

  mod_CarcaseShelfbtmOversizeRight_matrix?: IMatrix_mod_CarcaseShelfbtmOversizeRight;
  #mod_CarcaseShelftopConstruction?: string;
  get mod_CarcaseShelftopConstruction(): string | undefined { return this.#mod_CarcaseShelftopConstruction}
  set mod_CarcaseShelftopConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelftopConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelftopConstruction === value) return;
    this.#mod_CarcaseShelftopConstruction = value;
  }

  mod_CarcaseShelftopConstruction_matrix?: IMatrix_mod_CarcaseShelftopConstruction;
  #mod_CarcaseShelftopOversizeInsideWall?: number;
  get mod_CarcaseShelftopOversizeInsideWall(): number | undefined { return this.#mod_CarcaseShelftopOversizeInsideWall}
  set mod_CarcaseShelftopOversizeInsideWall(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelftopOversizeInsideWall' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelftopOversizeInsideWall === value) return;
    this.#mod_CarcaseShelftopOversizeInsideWall = value;
  }

  mod_CarcaseShelftopOversizeInsideWall_matrix?: IMatrix_mod_CarcaseShelftopOversizeInsideWall;
  #mod_CarcaseShelftopOversizeLeft?: number;
  get mod_CarcaseShelftopOversizeLeft(): number | undefined { return this.#mod_CarcaseShelftopOversizeLeft}
  set mod_CarcaseShelftopOversizeLeft(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelftopOversizeLeft' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelftopOversizeLeft === value) return;
    this.#mod_CarcaseShelftopOversizeLeft = value;
  }

  mod_CarcaseShelftopOversizeLeft_matrix?: IMatrix_mod_CarcaseShelftopOversizeLeft;
  #mod_CarcaseShelftopOversizeRight?: number;
  get mod_CarcaseShelftopOversizeRight(): number | undefined { return this.#mod_CarcaseShelftopOversizeRight}
  set mod_CarcaseShelftopOversizeRight(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseShelftopOversizeRight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseShelftopOversizeRight === value) return;
    this.#mod_CarcaseShelftopOversizeRight = value;
  }

  mod_CarcaseShelftopOversizeRight_matrix?: IMatrix_mod_CarcaseShelftopOversizeRight;
  #mod_CarcaseSidepanelleftOversizeBtm?: number;
  get mod_CarcaseSidepanelleftOversizeBtm(): number | undefined { return this.#mod_CarcaseSidepanelleftOversizeBtm}
  set mod_CarcaseSidepanelleftOversizeBtm(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelleftOversizeBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelleftOversizeBtm === value) return;
    this.#mod_CarcaseSidepanelleftOversizeBtm = value;
  }

  mod_CarcaseSidepanelleftOversizeBtm_matrix?: IMatrix_mod_CarcaseSidepanelleftOversizeBtm;
  #mod_CarcaseSidepanelleftOversizeInsideWall?: number;
  get mod_CarcaseSidepanelleftOversizeInsideWall(): number | undefined { return this.#mod_CarcaseSidepanelleftOversizeInsideWall}
  set mod_CarcaseSidepanelleftOversizeInsideWall(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelleftOversizeInsideWall' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelleftOversizeInsideWall === value) return;
    this.#mod_CarcaseSidepanelleftOversizeInsideWall = value;
  }

  mod_CarcaseSidepanelleftOversizeInsideWall_matrix?: IMatrix_mod_CarcaseSidepanelleftOversizeInsideWall;
  #mod_CarcaseSidepanelleftOversizeTop?: number;
  get mod_CarcaseSidepanelleftOversizeTop(): number | undefined { return this.#mod_CarcaseSidepanelleftOversizeTop}
  set mod_CarcaseSidepanelleftOversizeTop(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelleftOversizeTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelleftOversizeTop === value) return;
    this.#mod_CarcaseSidepanelleftOversizeTop = value;
  }

  mod_CarcaseSidepanelleftOversizeTop_matrix?: IMatrix_mod_CarcaseSidepanelleftOversizeTop;
  #mod_CarcaseSidepanelrightOversizeBtm?: number;
  get mod_CarcaseSidepanelrightOversizeBtm(): number | undefined { return this.#mod_CarcaseSidepanelrightOversizeBtm}
  set mod_CarcaseSidepanelrightOversizeBtm(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelrightOversizeBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelrightOversizeBtm === value) return;
    this.#mod_CarcaseSidepanelrightOversizeBtm = value;
  }

  mod_CarcaseSidepanelrightOversizeBtm_matrix?: IMatrix_mod_CarcaseSidepanelrightOversizeBtm;
  #mod_CarcaseSidepanelrightOversizeInsideWall?: number;
  get mod_CarcaseSidepanelrightOversizeInsideWall(): number | undefined { return this.#mod_CarcaseSidepanelrightOversizeInsideWall}
  set mod_CarcaseSidepanelrightOversizeInsideWall(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelrightOversizeInsideWall' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelrightOversizeInsideWall === value) return;
    this.#mod_CarcaseSidepanelrightOversizeInsideWall = value;
  }

  mod_CarcaseSidepanelrightOversizeInsideWall_matrix?: IMatrix_mod_CarcaseSidepanelrightOversizeInsideWall;
  #mod_CarcaseSidepanelrightOversizeTop?: number;
  get mod_CarcaseSidepanelrightOversizeTop(): number | undefined { return this.#mod_CarcaseSidepanelrightOversizeTop}
  set mod_CarcaseSidepanelrightOversizeTop(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseSidepanelrightOversizeTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseSidepanelrightOversizeTop === value) return;
    this.#mod_CarcaseSidepanelrightOversizeTop = value;
  }

  mod_CarcaseSidepanelrightOversizeTop_matrix?: IMatrix_mod_CarcaseSidepanelrightOversizeTop;
  #mod_CarcaseVisBack?: boolean;
  get mod_CarcaseVisBack(): boolean | undefined { return this.#mod_CarcaseVisBack}
  set mod_CarcaseVisBack(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseVisBack' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseVisBack === value) return;
    this.#mod_CarcaseVisBack = value;
  }

  mod_CarcaseVisBack_matrix?: IMatrix_mod_CarcaseVisBack;
  #mod_CarcaseVisBtm?: boolean;
  get mod_CarcaseVisBtm(): boolean | undefined { return this.#mod_CarcaseVisBtm}
  set mod_CarcaseVisBtm(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseVisBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseVisBtm === value) return;
    this.#mod_CarcaseVisBtm = value;
  }

  mod_CarcaseVisBtm_matrix?: IMatrix_mod_CarcaseVisBtm;
  #mod_CarcaseVisLeft?: boolean;
  get mod_CarcaseVisLeft(): boolean | undefined { return this.#mod_CarcaseVisLeft}
  set mod_CarcaseVisLeft(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseVisLeft' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseVisLeft === value) return;
    this.#mod_CarcaseVisLeft = value;
  }

  mod_CarcaseVisLeft_matrix?: IMatrix_mod_CarcaseVisLeft;
  #mod_CarcaseVisRight?: boolean;
  get mod_CarcaseVisRight(): boolean | undefined { return this.#mod_CarcaseVisRight}
  set mod_CarcaseVisRight(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseVisRight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseVisRight === value) return;
    this.#mod_CarcaseVisRight = value;
  }

  mod_CarcaseVisRight_matrix?: IMatrix_mod_CarcaseVisRight;
  #mod_CarcaseVisTop?: boolean;
  get mod_CarcaseVisTop(): boolean | undefined { return this.#mod_CarcaseVisTop}
  set mod_CarcaseVisTop(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseVisTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseVisTop === value) return;
    this.#mod_CarcaseVisTop = value;
  }

  mod_CarcaseVisTop_matrix?: IMatrix_mod_CarcaseVisTop;
  #mod_Depth?: number;
  get mod_Depth(): number | undefined { return this.#mod_Depth}
  set mod_Depth(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_Depth' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_Depth === value) return;
    this.#mod_Depth = value;
  }

  mod_Depth_matrix?: IMatrix_mod_Depth;
  #mod_FingergripType?: string;
  get mod_FingergripType(): string | undefined { return this.#mod_FingergripType}
  set mod_FingergripType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FingergripType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FingergripType === value) return;
    this.#mod_FingergripType = value;
  }

  mod_FingergripType_matrix?: IMatrix_mod_FingergripType;
  #mod_FrontColor?: string;
  get mod_FrontColor(): string | undefined { return this.#mod_FrontColor}
  set mod_FrontColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontColor === value) return;
    this.#mod_FrontColor = value;
  }

  mod_FrontColor_matrix?: IMatrix_mod_FrontColor;
  #mod_FrontDesign?: string;
  get mod_FrontDesign(): string | undefined { return this.#mod_FrontDesign}
  set mod_FrontDesign(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontDesign' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontDesign === value) return;
    this.#mod_FrontDesign = value;
  }

  mod_FrontDesign_matrix?: IMatrix_mod_FrontDesign;
  #mod_FrontEdgeColor?: string;
  get mod_FrontEdgeColor(): string | undefined { return this.#mod_FrontEdgeColor}
  set mod_FrontEdgeColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontEdgeColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontEdgeColor === value) return;
    this.#mod_FrontEdgeColor = value;
  }

  mod_FrontEdgeColor_matrix?: IMatrix_mod_FrontEdgeColor;
  #mod_FrontEdgeThk?: string;
  get mod_FrontEdgeThk(): string | undefined { return this.#mod_FrontEdgeThk}
  set mod_FrontEdgeThk(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontEdgeThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontEdgeThk === value) return;
    this.#mod_FrontEdgeThk = value;
  }

  mod_FrontEdgeThk_matrix?: IMatrix_mod_FrontEdgeThk;
  #mod_FrontFrameColor?: string;
  get mod_FrontFrameColor(): string | undefined { return this.#mod_FrontFrameColor}
  set mod_FrontFrameColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontFrameColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontFrameColor === value) return;
    this.#mod_FrontFrameColor = value;
  }

  mod_FrontFrameColor_matrix?: IMatrix_mod_FrontFrameColor;
  #mod_FrontGapCarcase?: number;
  get mod_FrontGapCarcase(): number | undefined { return this.#mod_FrontGapCarcase}
  set mod_FrontGapCarcase(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontGapCarcase' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontGapCarcase === value) return;
    this.#mod_FrontGapCarcase = value;
  }

  mod_FrontGapCarcase_matrix?: IMatrix_mod_FrontGapCarcase;
  #mod_FrontGapHor?: number;
  get mod_FrontGapHor(): number | undefined { return this.#mod_FrontGapHor}
  set mod_FrontGapHor(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontGapHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontGapHor === value) return;
    this.#mod_FrontGapHor = value;
  }

  mod_FrontGapHor_matrix?: IMatrix_mod_FrontGapHor;
  #mod_FrontGapVert?: number;
  get mod_FrontGapVert(): number | undefined { return this.#mod_FrontGapVert}
  set mod_FrontGapVert(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontGapVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontGapVert === value) return;
    this.#mod_FrontGapVert = value;
  }

  mod_FrontGapVert_matrix?: IMatrix_mod_FrontGapVert;
  #mod_FrontGlassColor?: string;
  get mod_FrontGlassColor(): string | undefined { return this.#mod_FrontGlassColor}
  set mod_FrontGlassColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontGlassColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontGlassColor === value) return;
    this.#mod_FrontGlassColor = value;
  }

  mod_FrontGlassColor_matrix?: IMatrix_mod_FrontGlassColor;
  #mod_FrontPosStart?: number;
  get mod_FrontPosStart(): number | undefined { return this.#mod_FrontPosStart}
  set mod_FrontPosStart(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontPosStart' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontPosStart === value) return;
    this.#mod_FrontPosStart = value;
  }

  mod_FrontPosStart_matrix?: IMatrix_mod_FrontPosStart;
  #mod_FrontProgram?: string;
  get mod_FrontProgram(): string | undefined { return this.#mod_FrontProgram}
  set mod_FrontProgram(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontProgram' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontProgram === value) return;
    this.#mod_FrontProgram = value;
  }

  mod_FrontProgram_matrix?: IMatrix_mod_FrontProgram;
  #mod_HandleColor?: string;
  get mod_HandleColor(): string | undefined { return this.#mod_HandleColor}
  set mod_HandleColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandleColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandleColor === value) return;
    this.#mod_HandleColor = value;
  }

  mod_HandleColor_matrix?: IMatrix_mod_HandleColor;
  #mod_HandleDesign?: string;
  get mod_HandleDesign(): string | undefined { return this.#mod_HandleDesign}
  set mod_HandleDesign(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandleDesign' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandleDesign === value) return;
    this.#mod_HandleDesign = value;
  }

  mod_HandleDesign_matrix?: IMatrix_mod_HandleDesign;
  #mod_HandleLength?: number;
  get mod_HandleLength(): number | undefined { return this.#mod_HandleLength}
  set mod_HandleLength(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandleLength' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandleLength === value) return;
    this.#mod_HandleLength = value;
  }

  mod_HandleLength_matrix?: IMatrix_mod_HandleLength;
  #mod_HandleLine?: number;
  get mod_HandleLine(): number | undefined { return this.#mod_HandleLine}
  set mod_HandleLine(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandleLine' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandleLine === value) return;
    this.#mod_HandleLine = value;
  }

  mod_HandleLine_matrix?: IMatrix_mod_HandleLine;
  #mod_HandlePosLogic?: string;
  get mod_HandlePosLogic(): string | undefined { return this.#mod_HandlePosLogic}
  set mod_HandlePosLogic(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandlePosLogic' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandlePosLogic === value) return;
    this.#mod_HandlePosLogic = value;
  }

  mod_HandlePosLogic_matrix?: IMatrix_mod_HandlePosLogic;
  #mod_HandlePosType?: string;
  get mod_HandlePosType(): string | undefined { return this.#mod_HandlePosType}
  set mod_HandlePosType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HandlePosType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HandlePosType === value) return;
    this.#mod_HandlePosType = value;
  }

  mod_HandlePosType_matrix?: IMatrix_mod_HandlePosType;
  #mod_HangerPosX?: string;
  get mod_HangerPosX(): string | undefined { return this.#mod_HangerPosX}
  set mod_HangerPosX(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HangerPosX' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HangerPosX === value) return;
    this.#mod_HangerPosX = value;
  }

  mod_HangerPosX_matrix?: IMatrix_mod_HangerPosX;
  #mod_HangerPosY?: string;
  get mod_HangerPosY(): string | undefined { return this.#mod_HangerPosY}
  set mod_HangerPosY(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HangerPosY' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HangerPosY === value) return;
    this.#mod_HangerPosY = value;
  }

  mod_HangerPosY_matrix?: IMatrix_mod_HangerPosY;
  #mod_HangerType?: string;
  get mod_HangerType(): string | undefined { return this.#mod_HangerType}
  set mod_HangerType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HangerType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HangerType === value) return;
    this.#mod_HangerType = value;
  }

  mod_HangerType_matrix?: IMatrix_mod_HangerType;
  #mod_HardwareColor?: string;
  get mod_HardwareColor(): string | undefined { return this.#mod_HardwareColor}
  set mod_HardwareColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HardwareColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HardwareColor === value) return;
    this.#mod_HardwareColor = value;
  }

  mod_HardwareColor_matrix?: IMatrix_mod_HardwareColor;
  #mod_Height?: number;
  get mod_Height(): number | undefined { return this.#mod_Height}
  set mod_Height(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_Height' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_Height === value) return;
    this.#mod_Height = value;
  }

  mod_Height_matrix?: IMatrix_mod_Height;
  #mod_HeightPosInsertion?: number;
  get mod_HeightPosInsertion(): number | undefined { return this.#mod_HeightPosInsertion}
  set mod_HeightPosInsertion(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HeightPosInsertion' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HeightPosInsertion === value) return;
    this.#mod_HeightPosInsertion = value;
  }

  mod_HeightPosInsertion_matrix?: IMatrix_mod_HeightPosInsertion;
  #mod_LightPart?: string;
  get mod_LightPart(): string | undefined { return this.#mod_LightPart}
  set mod_LightPart(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPart' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPart === value) return;
    this.#mod_LightPart = value;
  }

  mod_LightPart_matrix?: IMatrix_mod_LightPart;
  #mod_LightPosX?: string;
  get mod_LightPosX(): string | undefined { return this.#mod_LightPosX}
  set mod_LightPosX(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX === value) return;
    this.#mod_LightPosX = value;
  }

  mod_LightPosX_matrix?: IMatrix_mod_LightPosX;
  #mod_LightPosX1?: number;
  get mod_LightPosX1(): number | undefined { return this.#mod_LightPosX1}
  set mod_LightPosX1(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX1' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX1 === value) return;
    this.#mod_LightPosX1 = value;
  }

  mod_LightPosX1_matrix?: IMatrix_mod_LightPosX1;
  #mod_LightPosX2?: number;
  get mod_LightPosX2(): number | undefined { return this.#mod_LightPosX2}
  set mod_LightPosX2(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX2' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX2 === value) return;
    this.#mod_LightPosX2 = value;
  }

  mod_LightPosX2_matrix?: IMatrix_mod_LightPosX2;
  #mod_LightPosX3?: number;
  get mod_LightPosX3(): number | undefined { return this.#mod_LightPosX3}
  set mod_LightPosX3(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX3' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX3 === value) return;
    this.#mod_LightPosX3 = value;
  }

  mod_LightPosX3_matrix?: IMatrix_mod_LightPosX3;
  #mod_LightPosX4?: number;
  get mod_LightPosX4(): number | undefined { return this.#mod_LightPosX4}
  set mod_LightPosX4(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX4' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX4 === value) return;
    this.#mod_LightPosX4 = value;
  }

  mod_LightPosX4_matrix?: IMatrix_mod_LightPosX4;
  #mod_LightPosX5?: number;
  get mod_LightPosX5(): number | undefined { return this.#mod_LightPosX5}
  set mod_LightPosX5(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosX5' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosX5 === value) return;
    this.#mod_LightPosX5 = value;
  }

  mod_LightPosX5_matrix?: IMatrix_mod_LightPosX5;
  #mod_LightPosY?: number;
  get mod_LightPosY(): number | undefined { return this.#mod_LightPosY}
  set mod_LightPosY(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightPosY' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightPosY === value) return;
    this.#mod_LightPosY = value;
  }

  mod_LightPosY_matrix?: IMatrix_mod_LightPosY;
  #mod_LightSystem?: string;
  get mod_LightSystem(): string | undefined { return this.#mod_LightSystem}
  set mod_LightSystem(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_LightSystem' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_LightSystem === value) return;
    this.#mod_LightSystem = value;
  }

  mod_LightSystem_matrix?: IMatrix_mod_LightSystem;
  #mod_Model?: string;
  get mod_Model(): string | undefined { return this.#mod_Model}
  set mod_Model(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_Model' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_Model === value) return;
    this.#mod_Model = value;
  }

  mod_Model_matrix?: IMatrix_mod_Model;
  #mod_OpeningType?: string;
  get mod_OpeningType(): string | undefined { return this.#mod_OpeningType}
  set mod_OpeningType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_OpeningType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_OpeningType === value) return;
    this.#mod_OpeningType = value;
  }

  mod_OpeningType_matrix?: IMatrix_mod_OpeningType;
  #mod_PlinthAreaDesign?: string;
  get mod_PlinthAreaDesign(): string | undefined { return this.#mod_PlinthAreaDesign}
  set mod_PlinthAreaDesign(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaDesign' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaDesign === value) return;
    this.#mod_PlinthAreaDesign = value;
  }

  mod_PlinthAreaDesign_matrix?: IMatrix_mod_PlinthAreaDesign;
  #mod_PlinthAreaElementColor?: string;
  get mod_PlinthAreaElementColor(): string | undefined { return this.#mod_PlinthAreaElementColor}
  set mod_PlinthAreaElementColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaElementColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaElementColor === value) return;
    this.#mod_PlinthAreaElementColor = value;
  }

  mod_PlinthAreaElementColor_matrix?: IMatrix_mod_PlinthAreaElementColor;
  #mod_PlinthAreaHeight?: number;
  get mod_PlinthAreaHeight(): number | undefined { return this.#mod_PlinthAreaHeight}
  set mod_PlinthAreaHeight(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaHeight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaHeight === value) return;
    this.#mod_PlinthAreaHeight = value;
  }

  mod_PlinthAreaHeight_matrix?: IMatrix_mod_PlinthAreaHeight;
  #mod_PlinthAreaPosBackMatrix?: string;
  get mod_PlinthAreaPosBackMatrix(): string | undefined { return this.#mod_PlinthAreaPosBackMatrix}
  set mod_PlinthAreaPosBackMatrix(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaPosBackMatrix' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaPosBackMatrix === value) return;
    this.#mod_PlinthAreaPosBackMatrix = value;
  }

  mod_PlinthAreaPosBackMatrix_matrix?: IMatrix_mod_PlinthAreaPosBackMatrix;
  #mod_PlinthAreaPosFrontMatrix?: string;
  get mod_PlinthAreaPosFrontMatrix(): string | undefined { return this.#mod_PlinthAreaPosFrontMatrix}
  set mod_PlinthAreaPosFrontMatrix(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaPosFrontMatrix' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaPosFrontMatrix === value) return;
    this.#mod_PlinthAreaPosFrontMatrix = value;
  }

  mod_PlinthAreaPosFrontMatrix_matrix?: IMatrix_mod_PlinthAreaPosFrontMatrix;
  #mod_PlinthAreaPosLeftMatrix?: string;
  get mod_PlinthAreaPosLeftMatrix(): string | undefined { return this.#mod_PlinthAreaPosLeftMatrix}
  set mod_PlinthAreaPosLeftMatrix(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaPosLeftMatrix' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaPosLeftMatrix === value) return;
    this.#mod_PlinthAreaPosLeftMatrix = value;
  }

  mod_PlinthAreaPosLeftMatrix_matrix?: IMatrix_mod_PlinthAreaPosLeftMatrix;
  #mod_PlinthAreaPosRightMatrix?: string;
  get mod_PlinthAreaPosRightMatrix(): string | undefined { return this.#mod_PlinthAreaPosRightMatrix}
  set mod_PlinthAreaPosRightMatrix(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaPosRightMatrix' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaPosRightMatrix === value) return;
    this.#mod_PlinthAreaPosRightMatrix = value;
  }

  mod_PlinthAreaPosRightMatrix_matrix?: IMatrix_mod_PlinthAreaPosRightMatrix;
  #mod_PlinthAreaVisLeft?: boolean;
  get mod_PlinthAreaVisLeft(): boolean | undefined { return this.#mod_PlinthAreaVisLeft}
  set mod_PlinthAreaVisLeft(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaVisLeft' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaVisLeft === value) return;
    this.#mod_PlinthAreaVisLeft = value;
  }

  mod_PlinthAreaVisLeft_matrix?: IMatrix_mod_PlinthAreaVisLeft;
  #mod_PlinthAreaVisRight?: boolean;
  get mod_PlinthAreaVisRight(): boolean | undefined { return this.#mod_PlinthAreaVisRight}
  set mod_PlinthAreaVisRight(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaVisRight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaVisRight === value) return;
    this.#mod_PlinthAreaVisRight = value;
  }

  mod_PlinthAreaVisRight_matrix?: IMatrix_mod_PlinthAreaVisRight;
  #mod_RailhortopbackThk?: number;
  get mod_RailhortopbackThk(): number | undefined { return this.#mod_RailhortopbackThk}
  set mod_RailhortopbackThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_RailhortopbackThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_RailhortopbackThk === value) return;
    this.#mod_RailhortopbackThk = value;
  }

  mod_RailhortopbackThk_matrix?: IMatrix_mod_RailhortopbackThk;
  #mod_RailhortopfrontThk?: number;
  get mod_RailhortopfrontThk(): number | undefined { return this.#mod_RailhortopfrontThk}
  set mod_RailhortopfrontThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_RailhortopfrontThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_RailhortopfrontThk === value) return;
    this.#mod_RailhortopfrontThk = value;
  }

  mod_RailhortopfrontThk_matrix?: IMatrix_mod_RailhortopfrontThk;
  #mod_RailverttopbackThk?: number;
  get mod_RailverttopbackThk(): number | undefined { return this.#mod_RailverttopbackThk}
  set mod_RailverttopbackThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_RailverttopbackThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_RailverttopbackThk === value) return;
    this.#mod_RailverttopbackThk = value;
  }

  mod_RailverttopbackThk_matrix?: IMatrix_mod_RailverttopbackThk;
  #mod_RailverttopfrontThk?: number;
  get mod_RailverttopfrontThk(): number | undefined { return this.#mod_RailverttopfrontThk}
  set mod_RailverttopfrontThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_RailverttopfrontThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_RailverttopfrontThk === value) return;
    this.#mod_RailverttopfrontThk = value;
  }

  mod_RailverttopfrontThk_matrix?: IMatrix_mod_RailverttopfrontThk;
  #mod_ShelfadjThk?: number;
  get mod_ShelfadjThk(): number | undefined { return this.#mod_ShelfadjThk}
  set mod_ShelfadjThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelfadjThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelfadjThk === value) return;
    this.#mod_ShelfadjThk = value;
  }

  mod_ShelfadjThk_matrix?: IMatrix_mod_ShelfadjThk;
  #mod_ShelfbtmThk?: number;
  get mod_ShelfbtmThk(): number | undefined { return this.#mod_ShelfbtmThk}
  set mod_ShelfbtmThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelfbtmThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelfbtmThk === value) return;
    this.#mod_ShelfbtmThk = value;
  }

  mod_ShelfbtmThk_matrix?: IMatrix_mod_ShelfbtmThk;
  #mod_ShelffixedThk?: number;
  get mod_ShelffixedThk(): number | undefined { return this.#mod_ShelffixedThk}
  set mod_ShelffixedThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelffixedThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelffixedThk === value) return;
    this.#mod_ShelffixedThk = value;
  }

  mod_ShelffixedThk_matrix?: IMatrix_mod_ShelffixedThk;
  #mod_Width?: number;
  get mod_Width(): number | undefined { return this.#mod_Width}
  set mod_Width(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_Width' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_Width === value) return;
    this.#mod_Width = value;
  }

  mod_Width_matrix?: IMatrix_mod_Width;
  #mod_TypeElement?: string;
  get mod_TypeElement(): string | undefined { return this.#mod_TypeElement}
  set mod_TypeElement(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_TypeElement' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_TypeElement === value) return;
    this.#mod_TypeElement = value;
  }

  mod_TypeElement_matrix?: IMatrix_mod_TypeElement;
  #mod_SidepanelrightThk?: number;
  get mod_SidepanelrightThk(): number | undefined { return this.#mod_SidepanelrightThk}
  set mod_SidepanelrightThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelrightThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelrightThk === value) return;
    this.#mod_SidepanelrightThk = value;
  }

  mod_SidepanelrightThk_matrix?: IMatrix_mod_SidepanelrightThk;
  #mod_SidepanelleftThk?: number;
  get mod_SidepanelleftThk(): number | undefined { return this.#mod_SidepanelleftThk}
  set mod_SidepanelleftThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelleftThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelleftThk === value) return;
    this.#mod_SidepanelleftThk = value;
  }

  mod_SidepanelleftThk_matrix?: IMatrix_mod_SidepanelleftThk;
  #mod_ShelftopThk?: number;
  get mod_ShelftopThk(): number | undefined { return this.#mod_ShelftopThk}
  set mod_ShelftopThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelftopThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelftopThk === value) return;
    this.#mod_ShelftopThk = value;
  }

  mod_ShelftopThk_matrix?: IMatrix_mod_ShelftopThk;
  #mod_CornerunitStraightConstruction?: string;
  get mod_CornerunitStraightConstruction(): string | undefined { return this.#mod_CornerunitStraightConstruction}
  set mod_CornerunitStraightConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CornerunitStraightConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CornerunitStraightConstruction === value) return;
    this.#mod_CornerunitStraightConstruction = value;
  }

  mod_CornerunitStraightConstruction_matrix?: IMatrix_mod_CornerunitStraightConstruction;
  #mod_PanelblindThk?: number;
  get mod_PanelblindThk(): number | undefined { return this.#mod_PanelblindThk}
  set mod_PanelblindThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PanelblindThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PanelblindThk === value) return;
    this.#mod_PanelblindThk = value;
  }

  mod_PanelblindThk_matrix?: IMatrix_mod_PanelblindThk;
  #mod_CarcaseDirection?: string;
  get mod_CarcaseDirection(): string | undefined { return this.#mod_CarcaseDirection}
  set mod_CarcaseDirection(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseDirection' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseDirection === value) return;
    this.#mod_CarcaseDirection = value;
  }

  mod_CarcaseDirection_matrix?: IMatrix_mod_CarcaseDirection;
  #mod_ParentName?: string;
  get mod_ParentName(): string | undefined { return this.#mod_ParentName}
  set mod_ParentName(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ParentName' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ParentName === value) return;
    this.#mod_ParentName = value;
  }

  mod_ParentName_matrix?: IMatrix_mod_ParentName;
  #mod_ModuleName?: string;
  get mod_ModuleName(): string | undefined { return this.#mod_ModuleName}
  set mod_ModuleName(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ModuleName' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ModuleName === value) return;
    this.#mod_ModuleName = value;
  }

  mod_ModuleName_matrix?: IMatrix_mod_ModuleName;
  #mod_CornerunitFrontWidth?: number;
  get mod_CornerunitFrontWidth(): number | undefined { return this.#mod_CornerunitFrontWidth}
  set mod_CornerunitFrontWidth(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CornerunitFrontWidth' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CornerunitFrontWidth === value) return;
    this.#mod_CornerunitFrontWidth = value;
  }

  mod_CornerunitFrontWidth_matrix?: IMatrix_mod_CornerunitFrontWidth;
  #mod_FrontGapHorTop?: number;
  get mod_FrontGapHorTop(): number | undefined { return this.#mod_FrontGapHorTop}
  set mod_FrontGapHorTop(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrontGapHorTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrontGapHorTop === value) return;
    this.#mod_FrontGapHorTop = value;
  }

  mod_FrontGapHorTop_matrix?: IMatrix_mod_FrontGapHorTop;
  #mod_PlinthAreaExtraItem?: string;
  get mod_PlinthAreaExtraItem(): string | undefined { return this.#mod_PlinthAreaExtraItem}
  set mod_PlinthAreaExtraItem(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PlinthAreaExtraItem' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PlinthAreaExtraItem === value) return;
    this.#mod_PlinthAreaExtraItem = value;
  }

  mod_PlinthAreaExtraItem_matrix?: IMatrix_mod_PlinthAreaExtraItem;
  #mod_InteriorEquipmentLogic?: string;
  get mod_InteriorEquipmentLogic(): string | undefined { return this.#mod_InteriorEquipmentLogic}
  set mod_InteriorEquipmentLogic(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_InteriorEquipmentLogic' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_InteriorEquipmentLogic === value) return;
    this.#mod_InteriorEquipmentLogic = value;
  }

  mod_InteriorEquipmentLogic_matrix?: IMatrix_mod_InteriorEquipmentLogic;
  #mod_ShelvesBackwallFittingConnection?: string;
  get mod_ShelvesBackwallFittingConnection(): string | undefined { return this.#mod_ShelvesBackwallFittingConnection}
  set mod_ShelvesBackwallFittingConnection(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelvesBackwallFittingConnection' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelvesBackwallFittingConnection === value) return;
    this.#mod_ShelvesBackwallFittingConnection = value;
  }

  mod_ShelvesBackwallFittingConnection_matrix?: IMatrix_mod_ShelvesBackwallFittingConnection;
  #mod_CarcasePartConnectionBackHor?: string;
  get mod_CarcasePartConnectionBackHor(): string | undefined { return this.#mod_CarcasePartConnectionBackHor}
  set mod_CarcasePartConnectionBackHor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionBackHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionBackHor === value) return;
    this.#mod_CarcasePartConnectionBackHor = value;
  }

  mod_CarcasePartConnectionBackHor_matrix?: IMatrix_mod_CarcasePartConnectionBackHor;
  #mod_CarcasePartConnectionBackVert?: string;
  get mod_CarcasePartConnectionBackVert(): string | undefined { return this.#mod_CarcasePartConnectionBackVert}
  set mod_CarcasePartConnectionBackVert(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionBackVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionBackVert === value) return;
    this.#mod_CarcasePartConnectionBackVert = value;
  }

  mod_CarcasePartConnectionBackVert_matrix?: IMatrix_mod_CarcasePartConnectionBackVert;
  #mod_CarcasePartConnectionBtmVert?: string;
  get mod_CarcasePartConnectionBtmVert(): string | undefined { return this.#mod_CarcasePartConnectionBtmVert}
  set mod_CarcasePartConnectionBtmVert(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionBtmVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionBtmVert === value) return;
    this.#mod_CarcasePartConnectionBtmVert = value;
  }

  mod_CarcasePartConnectionBtmVert_matrix?: IMatrix_mod_CarcasePartConnectionBtmVert;
  #mod_CarcasePartConnectionLeftHor?: string;
  get mod_CarcasePartConnectionLeftHor(): string | undefined { return this.#mod_CarcasePartConnectionLeftHor}
  set mod_CarcasePartConnectionLeftHor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionLeftHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionLeftHor === value) return;
    this.#mod_CarcasePartConnectionLeftHor = value;
  }

  mod_CarcasePartConnectionLeftHor_matrix?: IMatrix_mod_CarcasePartConnectionLeftHor;
  #mod_CarcasePartConnectionRightHor?: string;
  get mod_CarcasePartConnectionRightHor(): string | undefined { return this.#mod_CarcasePartConnectionRightHor}
  set mod_CarcasePartConnectionRightHor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionRightHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionRightHor === value) return;
    this.#mod_CarcasePartConnectionRightHor = value;
  }

  mod_CarcasePartConnectionRightHor_matrix?: IMatrix_mod_CarcasePartConnectionRightHor;
  #mod_CarcasePartConnectionTopVert?: string;
  get mod_CarcasePartConnectionTopVert(): string | undefined { return this.#mod_CarcasePartConnectionTopVert}
  set mod_CarcasePartConnectionTopVert(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcasePartConnectionTopVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcasePartConnectionTopVert === value) return;
    this.#mod_CarcasePartConnectionTopVert = value;
  }

  mod_CarcasePartConnectionTopVert_matrix?: IMatrix_mod_CarcasePartConnectionTopVert;
  #mod_FittingConnectionBtmVert?: string;
  get mod_FittingConnectionBtmVert(): string | undefined { return this.#mod_FittingConnectionBtmVert}
  set mod_FittingConnectionBtmVert(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionBtmVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionBtmVert === value) return;
    this.#mod_FittingConnectionBtmVert = value;
  }

  mod_FittingConnectionBtmVert_matrix?: IMatrix_mod_FittingConnectionBtmVert;
  #mod_FittingConnectionLeftBtm?: string;
  get mod_FittingConnectionLeftBtm(): string | undefined { return this.#mod_FittingConnectionLeftBtm}
  set mod_FittingConnectionLeftBtm(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionLeftBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionLeftBtm === value) return;
    this.#mod_FittingConnectionLeftBtm = value;
  }

  mod_FittingConnectionLeftBtm_matrix?: IMatrix_mod_FittingConnectionLeftBtm;
  #mod_FittingConnectionLeftHor?: string;
  get mod_FittingConnectionLeftHor(): string | undefined { return this.#mod_FittingConnectionLeftHor}
  set mod_FittingConnectionLeftHor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionLeftHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionLeftHor === value) return;
    this.#mod_FittingConnectionLeftHor = value;
  }

  mod_FittingConnectionLeftHor_matrix?: IMatrix_mod_FittingConnectionLeftHor;
  #mod_FittingConnectionLeftTop?: string;
  get mod_FittingConnectionLeftTop(): string | undefined { return this.#mod_FittingConnectionLeftTop}
  set mod_FittingConnectionLeftTop(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionLeftTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionLeftTop === value) return;
    this.#mod_FittingConnectionLeftTop = value;
  }

  mod_FittingConnectionLeftTop_matrix?: IMatrix_mod_FittingConnectionLeftTop;
  #mod_FittingConnectionRightBtm?: string;
  get mod_FittingConnectionRightBtm(): string | undefined { return this.#mod_FittingConnectionRightBtm}
  set mod_FittingConnectionRightBtm(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionRightBtm' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionRightBtm === value) return;
    this.#mod_FittingConnectionRightBtm = value;
  }

  mod_FittingConnectionRightBtm_matrix?: IMatrix_mod_FittingConnectionRightBtm;
  #mod_FittingConnectionRightHor?: string;
  get mod_FittingConnectionRightHor(): string | undefined { return this.#mod_FittingConnectionRightHor}
  set mod_FittingConnectionRightHor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionRightHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionRightHor === value) return;
    this.#mod_FittingConnectionRightHor = value;
  }

  mod_FittingConnectionRightHor_matrix?: IMatrix_mod_FittingConnectionRightHor;
  #mod_FittingConnectionRightTop?: string;
  get mod_FittingConnectionRightTop(): string | undefined { return this.#mod_FittingConnectionRightTop}
  set mod_FittingConnectionRightTop(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionRightTop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionRightTop === value) return;
    this.#mod_FittingConnectionRightTop = value;
  }

  mod_FittingConnectionRightTop_matrix?: IMatrix_mod_FittingConnectionRightTop;
  #mod_FittingConnectionTopVert?: string;
  get mod_FittingConnectionTopVert(): string | undefined { return this.#mod_FittingConnectionTopVert}
  set mod_FittingConnectionTopVert(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FittingConnectionTopVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FittingConnectionTopVert === value) return;
    this.#mod_FittingConnectionTopVert = value;
  }

  mod_FittingConnectionTopVert_matrix?: IMatrix_mod_FittingConnectionTopVert;
  #mod_HangerOffsetPosY?: number;
  get mod_HangerOffsetPosY(): number | undefined { return this.#mod_HangerOffsetPosY}
  set mod_HangerOffsetPosY(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HangerOffsetPosY' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HangerOffsetPosY === value) return;
    this.#mod_HangerOffsetPosY = value;
  }

  mod_HangerOffsetPosY_matrix?: IMatrix_mod_HangerOffsetPosY;
  #mod_HangerColor?: string;
  get mod_HangerColor(): string | undefined { return this.#mod_HangerColor}
  set mod_HangerColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_HangerColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_HangerColor === value) return;
    this.#mod_HangerColor = value;
  }

  mod_HangerColor_matrix?: IMatrix_mod_HangerColor;
  #mod_VertDividerType?: string;
  get mod_VertDividerType(): string | undefined { return this.#mod_VertDividerType}
  set mod_VertDividerType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_VertDividerType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_VertDividerType === value) return;
    this.#mod_VertDividerType = value;
  }

  mod_VertDividerType_matrix?: IMatrix_mod_VertDividerType;
  #mod_SidepanelmiddleThk?: number;
  get mod_SidepanelmiddleThk(): number | undefined { return this.#mod_SidepanelmiddleThk}
  set mod_SidepanelmiddleThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelmiddleThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelmiddleThk === value) return;
    this.#mod_SidepanelmiddleThk = value;
  }

  mod_SidepanelmiddleThk_matrix?: IMatrix_mod_SidepanelmiddleThk;
  #mod_SidepanelmiddleShortWidth?: number;
  get mod_SidepanelmiddleShortWidth(): number | undefined { return this.#mod_SidepanelmiddleShortWidth}
  set mod_SidepanelmiddleShortWidth(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelmiddleShortWidth' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelmiddleShortWidth === value) return;
    this.#mod_SidepanelmiddleShortWidth = value;
  }

  mod_SidepanelmiddleShortWidth_matrix?: IMatrix_mod_SidepanelmiddleShortWidth;
  #mod_CarcaseFrontConstruction?: string;
  get mod_CarcaseFrontConstruction(): string | undefined { return this.#mod_CarcaseFrontConstruction}
  set mod_CarcaseFrontConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CarcaseFrontConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CarcaseFrontConstruction === value) return;
    this.#mod_CarcaseFrontConstruction = value;
  }

  mod_CarcaseFrontConstruction_matrix?: IMatrix_mod_CarcaseFrontConstruction;
  #mod_CleatThk?: number;
  get mod_CleatThk(): number | undefined { return this.#mod_CleatThk}
  set mod_CleatThk(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CleatThk' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CleatThk === value) return;
    this.#mod_CleatThk = value;
  }

  mod_CleatThk_matrix?: IMatrix_mod_CleatThk;
  #mod_CleatWidth?: number;
  get mod_CleatWidth(): number | undefined { return this.#mod_CleatWidth}
  set mod_CleatWidth(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CleatWidth' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CleatWidth === value) return;
    this.#mod_CleatWidth = value;
  }

  mod_CleatWidth_matrix?: IMatrix_mod_CleatWidth;
  #mod_CarcasePartInfo: string[] = [];
  get mod_CarcasePartInfo(): string[] { return this.#mod_CarcasePartInfo;}
  #mod_PushtoopenLine?: number;
  get mod_PushtoopenLine(): number | undefined { return this.#mod_PushtoopenLine}
  set mod_PushtoopenLine(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PushtoopenLine' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PushtoopenLine === value) return;
    this.#mod_PushtoopenLine = value;
  }

  mod_PushtoopenLine_matrix?: IMatrix_mod_PushtoopenLine;
  #mod_PushtoopenType?: string;
  get mod_PushtoopenType(): string | undefined { return this.#mod_PushtoopenType}
  set mod_PushtoopenType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PushtoopenType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PushtoopenType === value) return;
    this.#mod_PushtoopenType = value;
  }

  mod_PushtoopenType_matrix?: IMatrix_mod_PushtoopenType;
  #mod_PushtoopenColor?: string;
  get mod_PushtoopenColor(): string | undefined { return this.#mod_PushtoopenColor}
  set mod_PushtoopenColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PushtoopenColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PushtoopenColor === value) return;
    this.#mod_PushtoopenColor = value;
  }

  mod_PushtoopenColor_matrix?: IMatrix_mod_PushtoopenColor;
  #mod_PanelWoodFrameType?: string;
  get mod_PanelWoodFrameType(): string | undefined { return this.#mod_PanelWoodFrameType}
  set mod_PanelWoodFrameType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PanelWoodFrameType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PanelWoodFrameType === value) return;
    this.#mod_PanelWoodFrameType = value;
  }

  mod_PanelWoodFrameType_matrix?: IMatrix_mod_PanelWoodFrameType;
  #mod_PanelWoodFrameFillingType?: string;
  get mod_PanelWoodFrameFillingType(): string | undefined { return this.#mod_PanelWoodFrameFillingType}
  set mod_PanelWoodFrameFillingType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_PanelWoodFrameFillingType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_PanelWoodFrameFillingType === value) return;
    this.#mod_PanelWoodFrameFillingType = value;
  }

  mod_PanelWoodFrameFillingType_matrix?: IMatrix_mod_PanelWoodFrameFillingType;
  #mod_FramePartsWidthHor?: number;
  get mod_FramePartsWidthHor(): number | undefined { return this.#mod_FramePartsWidthHor}
  set mod_FramePartsWidthHor(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FramePartsWidthHor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FramePartsWidthHor === value) return;
    this.#mod_FramePartsWidthHor = value;
  }

  mod_FramePartsWidthHor_matrix?: IMatrix_mod_FramePartsWidthHor;
  #mod_FramePartsWidthVert?: number;
  get mod_FramePartsWidthVert(): number | undefined { return this.#mod_FramePartsWidthVert}
  set mod_FramePartsWidthVert(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FramePartsWidthVert' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FramePartsWidthVert === value) return;
    this.#mod_FramePartsWidthVert = value;
  }

  mod_FramePartsWidthVert_matrix?: IMatrix_mod_FramePartsWidthVert;
  #mod_CreateCountertop?: boolean;
  get mod_CreateCountertop(): boolean | undefined { return this.#mod_CreateCountertop}
  set mod_CreateCountertop(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CreateCountertop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CreateCountertop === value) return;
    this.#mod_CreateCountertop = value;
  }

  mod_CreateCountertop_matrix?: IMatrix_mod_CreateCountertop;
  #mod_CreatePaneltop?: boolean;
  get mod_CreatePaneltop(): boolean | undefined { return this.#mod_CreatePaneltop}
  set mod_CreatePaneltop(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CreatePaneltop' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CreatePaneltop === value) return;
    this.#mod_CreatePaneltop = value;
  }

  mod_CreatePaneltop_matrix?: IMatrix_mod_CreatePaneltop;
  #mod_CreateToekick?: boolean;
  get mod_CreateToekick(): boolean | undefined { return this.#mod_CreateToekick}
  set mod_CreateToekick(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CreateToekick' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CreateToekick === value) return;
    this.#mod_CreateToekick = value;
  }

  mod_CreateToekick_matrix?: IMatrix_mod_CreateToekick;
  #mod_CreateFingergrip?: boolean;
  get mod_CreateFingergrip(): boolean | undefined { return this.#mod_CreateFingergrip}
  set mod_CreateFingergrip(value: boolean | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_CreateFingergrip' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_CreateFingergrip === value) return;
    this.#mod_CreateFingergrip = value;
  }

  mod_CreateFingergrip_matrix?: IMatrix_mod_CreateFingergrip;
  #mod_PlinthAreaPositionInfo: string[] = [];
  get mod_PlinthAreaPositionInfo(): string[] { return this.#mod_PlinthAreaPositionInfo;}
  #mod_DoorDirection?: string;
  get mod_DoorDirection(): string | undefined { return this.#mod_DoorDirection}
  set mod_DoorDirection(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_DoorDirection' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_DoorDirection === value) return;
    this.#mod_DoorDirection = value;
  }

  mod_DoorDirection_matrix?: IMatrix_mod_DoorDirection;
  #mod_SlopeAngle?: number;
  get mod_SlopeAngle(): number | undefined { return this.#mod_SlopeAngle}
  set mod_SlopeAngle(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SlopeAngle' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SlopeAngle === value) return;
    this.#mod_SlopeAngle = value;
  }

  mod_SlopeAngle_matrix?: IMatrix_mod_SlopeAngle;
  #mod_SlopedCeilingDimensionLogic?: string;
  get mod_SlopedCeilingDimensionLogic(): string | undefined { return this.#mod_SlopedCeilingDimensionLogic}
  set mod_SlopedCeilingDimensionLogic(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SlopedCeilingDimensionLogic' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SlopedCeilingDimensionLogic === value) return;
    this.#mod_SlopedCeilingDimensionLogic = value;
  }

  mod_SlopedCeilingDimensionLogic_matrix?: IMatrix_mod_SlopedCeilingDimensionLogic;
  #mod_SlopedCeilingConstruction?: string;
  get mod_SlopedCeilingConstruction(): string | undefined { return this.#mod_SlopedCeilingConstruction}
  set mod_SlopedCeilingConstruction(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SlopedCeilingConstruction' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SlopedCeilingConstruction === value) return;
    this.#mod_SlopedCeilingConstruction = value;
  }

  mod_SlopedCeilingConstruction_matrix?: IMatrix_mod_SlopedCeilingConstruction;
  #mod_BackHeight?: number;
  get mod_BackHeight(): number | undefined { return this.#mod_BackHeight}
  set mod_BackHeight(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_BackHeight' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_BackHeight === value) return;
    this.#mod_BackHeight = value;
  }

  mod_BackHeight_matrix?: IMatrix_mod_BackHeight;
  #mod_TopDepth?: number;
  get mod_TopDepth(): number | undefined { return this.#mod_TopDepth}
  set mod_TopDepth(value: number | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_TopDepth' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_TopDepth === value) return;
    this.#mod_TopDepth = value;
  }

  mod_TopDepth_matrix?: IMatrix_mod_TopDepth;
  #mod_FrameFillingWoodColor?: string;
  get mod_FrameFillingWoodColor(): string | undefined { return this.#mod_FrameFillingWoodColor}
  set mod_FrameFillingWoodColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrameFillingWoodColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrameFillingWoodColor === value) return;
    this.#mod_FrameFillingWoodColor = value;
  }

  mod_FrameFillingWoodColor_matrix?: IMatrix_mod_FrameFillingWoodColor;
  #mod_SidepanelrightType?: string;
  get mod_SidepanelrightType(): string | undefined { return this.#mod_SidepanelrightType}
  set mod_SidepanelrightType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelrightType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelrightType === value) return;
    this.#mod_SidepanelrightType = value;
  }

  mod_SidepanelrightType_matrix?: IMatrix_mod_SidepanelrightType;
  #mod_SidepanelleftType?: string;
  get mod_SidepanelleftType(): string | undefined { return this.#mod_SidepanelleftType}
  set mod_SidepanelleftType(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_SidepanelleftType' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_SidepanelleftType === value) return;
    this.#mod_SidepanelleftType = value;
  }

  mod_SidepanelleftType_matrix?: IMatrix_mod_SidepanelleftType;
  #mod_GrainLogic?: string;
  get mod_GrainLogic(): string | undefined { return this.#mod_GrainLogic}
  set mod_GrainLogic(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_GrainLogic' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_GrainLogic === value) return;
    this.#mod_GrainLogic = value;
  }

  mod_GrainLogic_matrix?: IMatrix_mod_GrainLogic;
  #mod_ShelfadjColor?: string;
  get mod_ShelfadjColor(): string | undefined { return this.#mod_ShelfadjColor}
  set mod_ShelfadjColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_ShelfadjColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_ShelfadjColor === value) return;
    this.#mod_ShelfadjColor = value;
  }

  mod_ShelfadjColor_matrix?: IMatrix_mod_ShelfadjColor;
  #mod_FrameFillingColor?: string;
  get mod_FrameFillingColor(): string | undefined { return this.#mod_FrameFillingColor}
  set mod_FrameFillingColor(value: string | undefined) {
    if(this._adcFinished){
      logError("The property 'mod_FrameFillingColor' must not be changed after the module was completed with 'afterDataCompletion'");
      return;
    }
    if(this.#mod_FrameFillingColor === value) return;
    this.#mod_FrameFillingColor = value;
  }

  mod_FrameFillingColor_matrix?: IMatrix_mod_FrameFillingColor;
  override getAttributes() : Map<string,any> { 
    let res = new Map<string,any>();
  res.set('mod_BackwallFixedHeight', this.mod_BackwallFixedHeight);
  res.set('mod_BackwallPos', this.mod_BackwallPos);
  res.set('mod_BackwallThk', this.mod_BackwallThk);
  res.set('mod_CarcaseColor', this.mod_CarcaseColor);
  res.set('mod_CarcaseBackwallColor', this.mod_CarcaseBackwallColor);
  res.set('mod_CarcaseBackwallConstruction', this.mod_CarcaseBackwallConstruction);
  res.set('mod_CarcaseProgram', this.mod_CarcaseProgram);
  res.set('mod_CarcaseBackwallProgram', this.mod_CarcaseBackwallProgram);
  res.set('mod_CarcaseConnectionLeftBtm', this.mod_CarcaseConnectionLeftBtm);
  res.set('mod_CarcaseConnectionLeftTop', this.mod_CarcaseConnectionLeftTop);
  res.set('mod_CarcaseConnectionRightBtm', this.mod_CarcaseConnectionRightBtm);
  res.set('mod_CarcaseConnectionRightTop', this.mod_CarcaseConnectionRightTop);
  res.set('mod_CarcaseDistanceWall', this.mod_CarcaseDistanceWall);
  res.set('mod_CarcaseEdgeBackColor', this.mod_CarcaseEdgeBackColor);
  res.set('mod_CarcaseEdgeColor', this.mod_CarcaseEdgeColor);
  res.set('mod_CarcaseEdgeFrontColor', this.mod_CarcaseEdgeFrontColor);
  res.set('mod_CarcaseOutsideColor', this.mod_CarcaseOutsideColor);
  res.set('mod_CarcaseOutsideProgram', this.mod_CarcaseOutsideProgram);
  res.set('mod_CarcaseShelfbtmConstruction', this.mod_CarcaseShelfbtmConstruction);
  res.set('mod_CarcaseShelfbtmOversizeInsideWall', this.mod_CarcaseShelfbtmOversizeInsideWall);
  res.set('mod_CarcaseShelfbtmOversizeLeft', this.mod_CarcaseShelfbtmOversizeLeft);
  res.set('mod_CarcaseShelfbtmOversizeRight', this.mod_CarcaseShelfbtmOversizeRight);
  res.set('mod_CarcaseShelftopConstruction', this.mod_CarcaseShelftopConstruction);
  res.set('mod_CarcaseShelftopOversizeInsideWall', this.mod_CarcaseShelftopOversizeInsideWall);
  res.set('mod_CarcaseShelftopOversizeLeft', this.mod_CarcaseShelftopOversizeLeft);
  res.set('mod_CarcaseShelftopOversizeRight', this.mod_CarcaseShelftopOversizeRight);
  res.set('mod_CarcaseSidepanelleftOversizeBtm', this.mod_CarcaseSidepanelleftOversizeBtm);
  res.set('mod_CarcaseSidepanelleftOversizeInsideWall', this.mod_CarcaseSidepanelleftOversizeInsideWall);
  res.set('mod_CarcaseSidepanelleftOversizeTop', this.mod_CarcaseSidepanelleftOversizeTop);
  res.set('mod_CarcaseSidepanelrightOversizeBtm', this.mod_CarcaseSidepanelrightOversizeBtm);
  res.set('mod_CarcaseSidepanelrightOversizeInsideWall', this.mod_CarcaseSidepanelrightOversizeInsideWall);
  res.set('mod_CarcaseSidepanelrightOversizeTop', this.mod_CarcaseSidepanelrightOversizeTop);
  res.set('mod_CarcaseVisBack', this.mod_CarcaseVisBack);
  res.set('mod_CarcaseVisBtm', this.mod_CarcaseVisBtm);
  res.set('mod_CarcaseVisLeft', this.mod_CarcaseVisLeft);
  res.set('mod_CarcaseVisRight', this.mod_CarcaseVisRight);
  res.set('mod_CarcaseVisTop', this.mod_CarcaseVisTop);
  res.set('mod_Depth', this.mod_Depth);
  res.set('mod_FingergripType', this.mod_FingergripType);
  res.set('mod_FrontColor', this.mod_FrontColor);
  res.set('mod_FrontDesign', this.mod_FrontDesign);
  res.set('mod_FrontEdgeColor', this.mod_FrontEdgeColor);
  res.set('mod_FrontEdgeThk', this.mod_FrontEdgeThk);
  res.set('mod_FrontFrameColor', this.mod_FrontFrameColor);
  res.set('mod_FrontGapCarcase', this.mod_FrontGapCarcase);
  res.set('mod_FrontGapHor', this.mod_FrontGapHor);
  res.set('mod_FrontGapVert', this.mod_FrontGapVert);
  res.set('mod_FrontGlassColor', this.mod_FrontGlassColor);
  res.set('mod_FrontPosStart', this.mod_FrontPosStart);
  res.set('mod_FrontProgram', this.mod_FrontProgram);
  res.set('mod_HandleColor', this.mod_HandleColor);
  res.set('mod_HandleDesign', this.mod_HandleDesign);
  res.set('mod_HandleLength', this.mod_HandleLength);
  res.set('mod_HandleLine', this.mod_HandleLine);
  res.set('mod_HandlePosLogic', this.mod_HandlePosLogic);
  res.set('mod_HandlePosType', this.mod_HandlePosType);
  res.set('mod_HangerPosX', this.mod_HangerPosX);
  res.set('mod_HangerPosY', this.mod_HangerPosY);
  res.set('mod_HangerType', this.mod_HangerType);
  res.set('mod_HardwareColor', this.mod_HardwareColor);
  res.set('mod_Height', this.mod_Height);
  res.set('mod_HeightPosInsertion', this.mod_HeightPosInsertion);
  res.set('mod_LightPart', this.mod_LightPart);
  res.set('mod_LightPosX', this.mod_LightPosX);
  res.set('mod_LightPosX1', this.mod_LightPosX1);
  res.set('mod_LightPosX2', this.mod_LightPosX2);
  res.set('mod_LightPosX3', this.mod_LightPosX3);
  res.set('mod_LightPosX4', this.mod_LightPosX4);
  res.set('mod_LightPosX5', this.mod_LightPosX5);
  res.set('mod_LightPosY', this.mod_LightPosY);
  res.set('mod_LightSystem', this.mod_LightSystem);
  res.set('mod_Model', this.mod_Model);
  res.set('mod_OpeningType', this.mod_OpeningType);
  res.set('mod_PlinthAreaDesign', this.mod_PlinthAreaDesign);
  res.set('mod_PlinthAreaElementColor', this.mod_PlinthAreaElementColor);
  res.set('mod_PlinthAreaHeight', this.mod_PlinthAreaHeight);
  res.set('mod_PlinthAreaPosBackMatrix', this.mod_PlinthAreaPosBackMatrix);
  res.set('mod_PlinthAreaPosFrontMatrix', this.mod_PlinthAreaPosFrontMatrix);
  res.set('mod_PlinthAreaPosLeftMatrix', this.mod_PlinthAreaPosLeftMatrix);
  res.set('mod_PlinthAreaPosRightMatrix', this.mod_PlinthAreaPosRightMatrix);
  res.set('mod_PlinthAreaVisLeft', this.mod_PlinthAreaVisLeft);
  res.set('mod_PlinthAreaVisRight', this.mod_PlinthAreaVisRight);
  res.set('mod_RailhortopbackThk', this.mod_RailhortopbackThk);
  res.set('mod_RailhortopfrontThk', this.mod_RailhortopfrontThk);
  res.set('mod_RailverttopbackThk', this.mod_RailverttopbackThk);
  res.set('mod_RailverttopfrontThk', this.mod_RailverttopfrontThk);
  res.set('mod_ShelfadjThk', this.mod_ShelfadjThk);
  res.set('mod_ShelfbtmThk', this.mod_ShelfbtmThk);
  res.set('mod_ShelffixedThk', this.mod_ShelffixedThk);
  res.set('mod_Width', this.mod_Width);
  res.set('mod_TypeElement', this.mod_TypeElement);
  res.set('mod_SidepanelrightThk', this.mod_SidepanelrightThk);
  res.set('mod_SidepanelleftThk', this.mod_SidepanelleftThk);
  res.set('mod_ShelftopThk', this.mod_ShelftopThk);
  res.set('mod_CornerunitStraightConstruction', this.mod_CornerunitStraightConstruction);
  res.set('mod_PanelblindThk', this.mod_PanelblindThk);
  res.set('mod_CarcaseDirection', this.mod_CarcaseDirection);
  res.set('mod_ParentName', this.mod_ParentName);
  res.set('mod_ModuleName', this.mod_ModuleName);
  res.set('mod_CornerunitFrontWidth', this.mod_CornerunitFrontWidth);
  res.set('mod_FrontGapHorTop', this.mod_FrontGapHorTop);
  res.set('mod_PlinthAreaExtraItem', this.mod_PlinthAreaExtraItem);
  res.set('mod_InteriorEquipmentLogic', this.mod_InteriorEquipmentLogic);
  res.set('mod_ShelvesBackwallFittingConnection', this.mod_ShelvesBackwallFittingConnection);
  res.set('mod_CarcasePartConnectionBackHor', this.mod_CarcasePartConnectionBackHor);
  res.set('mod_CarcasePartConnectionBackVert', this.mod_CarcasePartConnectionBackVert);
  res.set('mod_CarcasePartConnectionBtmVert', this.mod_CarcasePartConnectionBtmVert);
  res.set('mod_CarcasePartConnectionLeftHor', this.mod_CarcasePartConnectionLeftHor);
  res.set('mod_CarcasePartConnectionRightHor', this.mod_CarcasePartConnectionRightHor);
  res.set('mod_CarcasePartConnectionTopVert', this.mod_CarcasePartConnectionTopVert);
  res.set('mod_FittingConnectionBtmVert', this.mod_FittingConnectionBtmVert);
  res.set('mod_FittingConnectionLeftBtm', this.mod_FittingConnectionLeftBtm);
  res.set('mod_FittingConnectionLeftHor', this.mod_FittingConnectionLeftHor);
  res.set('mod_FittingConnectionLeftTop', this.mod_FittingConnectionLeftTop);
  res.set('mod_FittingConnectionRightBtm', this.mod_FittingConnectionRightBtm);
  res.set('mod_FittingConnectionRightHor', this.mod_FittingConnectionRightHor);
  res.set('mod_FittingConnectionRightTop', this.mod_FittingConnectionRightTop);
  res.set('mod_FittingConnectionTopVert', this.mod_FittingConnectionTopVert);
  res.set('mod_HangerOffsetPosY', this.mod_HangerOffsetPosY);
  res.set('mod_HangerColor', this.mod_HangerColor);
  res.set('mod_VertDividerType', this.mod_VertDividerType);
  res.set('mod_SidepanelmiddleThk', this.mod_SidepanelmiddleThk);
  res.set('mod_SidepanelmiddleShortWidth', this.mod_SidepanelmiddleShortWidth);
  res.set('mod_CarcaseFrontConstruction', this.mod_CarcaseFrontConstruction);
  res.set('mod_CleatThk', this.mod_CleatThk);
  res.set('mod_CleatWidth', this.mod_CleatWidth);
  res.set('mod_CarcasePartInfo', JSON.stringify(this.mod_CarcasePartInfo));
  res.set('mod_PushtoopenLine', this.mod_PushtoopenLine);
  res.set('mod_PushtoopenType', this.mod_PushtoopenType);
  res.set('mod_PushtoopenColor', this.mod_PushtoopenColor);
  res.set('mod_PanelWoodFrameType', this.mod_PanelWoodFrameType);
  res.set('mod_PanelWoodFrameFillingType', this.mod_PanelWoodFrameFillingType);
  res.set('mod_FramePartsWidthHor', this.mod_FramePartsWidthHor);
  res.set('mod_FramePartsWidthVert', this.mod_FramePartsWidthVert);
  res.set('mod_CreateCountertop', this.mod_CreateCountertop);
  res.set('mod_CreatePaneltop', this.mod_CreatePaneltop);
  res.set('mod_CreateToekick', this.mod_CreateToekick);
  res.set('mod_CreateFingergrip', this.mod_CreateFingergrip);
  res.set('mod_PlinthAreaPositionInfo', JSON.stringify(this.mod_PlinthAreaPositionInfo));
  res.set('mod_DoorDirection', this.mod_DoorDirection);
  res.set('mod_SlopeAngle', this.mod_SlopeAngle);
  res.set('mod_SlopedCeilingDimensionLogic', this.mod_SlopedCeilingDimensionLogic);
  res.set('mod_SlopedCeilingConstruction', this.mod_SlopedCeilingConstruction);
  res.set('mod_BackHeight', this.mod_BackHeight);
  res.set('mod_TopDepth', this.mod_TopDepth);
  res.set('mod_FrameFillingWoodColor', this.mod_FrameFillingWoodColor);
  res.set('mod_SidepanelrightType', this.mod_SidepanelrightType);
  res.set('mod_SidepanelleftType', this.mod_SidepanelleftType);
  res.set('mod_GrainLogic', this.mod_GrainLogic);
  res.set('mod_ShelfadjColor', this.mod_ShelfadjColor);
  res.set('mod_FrameFillingColor', this.mod_FrameFillingColor);
    return res;
  }
  override getCheckAttributes(): Map<string, number | string | boolean | undefined> | undefined {
   const res = new Map<string, number | string | boolean | undefined>();
   res.set('mod_CarcaseColor:GrainGroupId', this.mod_CarcaseColor_matrix?.GrainGroupId);
   res.set('mod_CarcaseColor', this.mod_CarcaseColor);
   res.set('mod_CarcaseBackwallColor:GrainGroupId', this.mod_CarcaseBackwallColor_matrix?.GrainGroupId);
   res.set('mod_CarcaseBackwallColor', this.mod_CarcaseBackwallColor);
   res.set('mod_CarcaseProgram:GrainGroupId', this.mod_CarcaseProgram_matrix?.GrainGroupId);
   res.set('mod_CarcaseProgram', this.mod_CarcaseProgram);
   res.set('mod_CarcaseBackwallProgram:GrainGroupId', this.mod_CarcaseBackwallProgram_matrix?.GrainGroupId);
   res.set('mod_CarcaseBackwallProgram', this.mod_CarcaseBackwallProgram);
   res.set('mod_FrontColor', this.mod_FrontColor);
   res.set('mod_FrontProgram', this.mod_FrontProgram);
   res.set('mod_HandleColor', this.mod_HandleColor);
   res.set('mod_HandleDesign', this.mod_HandleDesign);
   res.set('mod_HardwareColor', this.mod_HardwareColor);
   res.set('mod_PlinthAreaDesign', this.mod_PlinthAreaDesign);
   res.set('mod_PlinthAreaHeight', this.mod_PlinthAreaHeight);
   res.set('mod_ShelfadjThk', this.mod_ShelfadjThk);
   res.set('mod_TypeElement', this.mod_TypeElement);
   res.set('mod_ShelfadjColor', this.mod_ShelfadjColor);
   return res;
  }
  override loadJson(json:any, withSubModules:boolean = true, manufacturerMode:boolean) {
    internal_enterLoadJson(this.modId, this._id);

    if (json['articlePos']) {
      let val:number|string|undefined;
      val = json['articlePos']['x'];
      if (val !== undefined) {
        if (typeof val === 'string') { val = parseFloat(val); }
        if (Number.isNaN(val)) {
          logError('Article position X is invalid!');
        } else {
          this._articlePos.x = val;
        }
      }

      val = json['articlePos']['y'];
      if (val !== undefined) {
        if (typeof val === 'string') { val = parseFloat(val); }
        if (Number.isNaN(val)) {
          logError('Article position Y is invalid!');
        } else {
          this._articlePos.y = val;
        }
      }

      val = json['articlePos']['z'];
      if (val !== undefined) {
        if (typeof val === 'string') { val = parseFloat(val); }
        if (Number.isNaN(val)) {
          logError('Article position Z is invalid!');
        } else {
          this._articlePos.z = val;
        }
      }

      val = json['articlePos']['rotationY'];
      if (val !== undefined) {
        if (typeof val === 'string') {
          val = parseFloat(val);
        }
        if (Number.isNaN(val)) {
          logError('Article rotation Y is invalid!');
        } else {
          this._articlePos.rotationY = val;
        }
      }

    }
    // only take over the attributes we know...
    { internal_enterValidateVariant(this.modId, this._id, 'mod_BackwallFixedHeight');
    const val = _toFloat(json['attributes']['mod_BackwallFixedHeight'], 'mod_BackwallFixedHeight');
    internal_leaveValidateVariant();
    this.mod_BackwallFixedHeight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_BackwallPos');
    const val = _toFloat(json['attributes']['mod_BackwallPos'], 'mod_BackwallPos');
    internal_leaveValidateVariant();
    this.mod_BackwallPos = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_BackwallThk');
    const val = _toFloat(json['attributes']['mod_BackwallThk'], 'mod_BackwallThk');
    internal_leaveValidateVariant();
    this.mod_BackwallThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseColor');
    const val = _toString(json['attributes']['mod_CarcaseColor'], 'mod_CarcaseColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseBackwallColor');
    const val = _toString(json['attributes']['mod_CarcaseBackwallColor'], 'mod_CarcaseBackwallColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseBackwallColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseBackwallConstruction');
    const val = _toString(json['attributes']['mod_CarcaseBackwallConstruction'], 'mod_CarcaseBackwallConstruction');
    internal_leaveValidateVariant();
    this.mod_CarcaseBackwallConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseProgram');
    const val = _toString(json['attributes']['mod_CarcaseProgram'], 'mod_CarcaseProgram');
    internal_leaveValidateVariant();
    this.mod_CarcaseProgram = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseBackwallProgram');
    const val = _toString(json['attributes']['mod_CarcaseBackwallProgram'], 'mod_CarcaseBackwallProgram');
    internal_leaveValidateVariant();
    this.mod_CarcaseBackwallProgram = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseConnectionLeftBtm');
    const val = _toString(json['attributes']['mod_CarcaseConnectionLeftBtm'], 'mod_CarcaseConnectionLeftBtm');
    internal_leaveValidateVariant();
    this.mod_CarcaseConnectionLeftBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseConnectionLeftTop');
    const val = _toString(json['attributes']['mod_CarcaseConnectionLeftTop'], 'mod_CarcaseConnectionLeftTop');
    internal_leaveValidateVariant();
    this.mod_CarcaseConnectionLeftTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseConnectionRightBtm');
    const val = _toString(json['attributes']['mod_CarcaseConnectionRightBtm'], 'mod_CarcaseConnectionRightBtm');
    internal_leaveValidateVariant();
    this.mod_CarcaseConnectionRightBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseConnectionRightTop');
    const val = _toString(json['attributes']['mod_CarcaseConnectionRightTop'], 'mod_CarcaseConnectionRightTop');
    internal_leaveValidateVariant();
    this.mod_CarcaseConnectionRightTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseDistanceWall');
    const val = _toFloat(json['attributes']['mod_CarcaseDistanceWall'], 'mod_CarcaseDistanceWall');
    internal_leaveValidateVariant();
    this.mod_CarcaseDistanceWall = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseEdgeBackColor');
    const val = _toString(json['attributes']['mod_CarcaseEdgeBackColor'], 'mod_CarcaseEdgeBackColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseEdgeBackColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseEdgeColor');
    const val = _toString(json['attributes']['mod_CarcaseEdgeColor'], 'mod_CarcaseEdgeColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseEdgeColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseEdgeFrontColor');
    const val = _toString(json['attributes']['mod_CarcaseEdgeFrontColor'], 'mod_CarcaseEdgeFrontColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseEdgeFrontColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseOutsideColor');
    const val = _toString(json['attributes']['mod_CarcaseOutsideColor'], 'mod_CarcaseOutsideColor');
    internal_leaveValidateVariant();
    this.mod_CarcaseOutsideColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseOutsideProgram');
    const val = _toString(json['attributes']['mod_CarcaseOutsideProgram'], 'mod_CarcaseOutsideProgram');
    internal_leaveValidateVariant();
    this.mod_CarcaseOutsideProgram = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelfbtmConstruction');
    const val = _toString(json['attributes']['mod_CarcaseShelfbtmConstruction'], 'mod_CarcaseShelfbtmConstruction');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelfbtmConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelfbtmOversizeInsideWall');
    const val = _toFloat(json['attributes']['mod_CarcaseShelfbtmOversizeInsideWall'], 'mod_CarcaseShelfbtmOversizeInsideWall');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelfbtmOversizeInsideWall = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelfbtmOversizeLeft');
    const val = _toFloat(json['attributes']['mod_CarcaseShelfbtmOversizeLeft'], 'mod_CarcaseShelfbtmOversizeLeft');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelfbtmOversizeLeft = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelfbtmOversizeRight');
    const val = _toFloat(json['attributes']['mod_CarcaseShelfbtmOversizeRight'], 'mod_CarcaseShelfbtmOversizeRight');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelfbtmOversizeRight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelftopConstruction');
    const val = _toString(json['attributes']['mod_CarcaseShelftopConstruction'], 'mod_CarcaseShelftopConstruction');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelftopConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelftopOversizeInsideWall');
    const val = _toFloat(json['attributes']['mod_CarcaseShelftopOversizeInsideWall'], 'mod_CarcaseShelftopOversizeInsideWall');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelftopOversizeInsideWall = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelftopOversizeLeft');
    const val = _toFloat(json['attributes']['mod_CarcaseShelftopOversizeLeft'], 'mod_CarcaseShelftopOversizeLeft');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelftopOversizeLeft = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseShelftopOversizeRight');
    const val = _toFloat(json['attributes']['mod_CarcaseShelftopOversizeRight'], 'mod_CarcaseShelftopOversizeRight');
    internal_leaveValidateVariant();
    this.mod_CarcaseShelftopOversizeRight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelleftOversizeBtm');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelleftOversizeBtm'], 'mod_CarcaseSidepanelleftOversizeBtm');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelleftOversizeBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelleftOversizeInsideWall');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelleftOversizeInsideWall'], 'mod_CarcaseSidepanelleftOversizeInsideWall');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelleftOversizeInsideWall = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelleftOversizeTop');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelleftOversizeTop'], 'mod_CarcaseSidepanelleftOversizeTop');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelleftOversizeTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelrightOversizeBtm');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelrightOversizeBtm'], 'mod_CarcaseSidepanelrightOversizeBtm');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelrightOversizeBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelrightOversizeInsideWall');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelrightOversizeInsideWall'], 'mod_CarcaseSidepanelrightOversizeInsideWall');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelrightOversizeInsideWall = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseSidepanelrightOversizeTop');
    const val = _toFloat(json['attributes']['mod_CarcaseSidepanelrightOversizeTop'], 'mod_CarcaseSidepanelrightOversizeTop');
    internal_leaveValidateVariant();
    this.mod_CarcaseSidepanelrightOversizeTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseVisBack');
    const val = _toBoolean(json['attributes']['mod_CarcaseVisBack'], 'mod_CarcaseVisBack');
    internal_leaveValidateVariant();
    this.mod_CarcaseVisBack = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseVisBtm');
    const val = _toBoolean(json['attributes']['mod_CarcaseVisBtm'], 'mod_CarcaseVisBtm');
    internal_leaveValidateVariant();
    this.mod_CarcaseVisBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseVisLeft');
    const val = _toBoolean(json['attributes']['mod_CarcaseVisLeft'], 'mod_CarcaseVisLeft');
    internal_leaveValidateVariant();
    this.mod_CarcaseVisLeft = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseVisRight');
    const val = _toBoolean(json['attributes']['mod_CarcaseVisRight'], 'mod_CarcaseVisRight');
    internal_leaveValidateVariant();
    this.mod_CarcaseVisRight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseVisTop');
    const val = _toBoolean(json['attributes']['mod_CarcaseVisTop'], 'mod_CarcaseVisTop');
    internal_leaveValidateVariant();
    this.mod_CarcaseVisTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_Depth');
    const val = _toFloat(json['attributes']['mod_Depth'], 'mod_Depth');
    internal_leaveValidateVariant();
    this.mod_Depth = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FingergripType');
    const val = _toString(json['attributes']['mod_FingergripType'], 'mod_FingergripType');
    internal_leaveValidateVariant();
    this.mod_FingergripType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontColor');
    const val = _toString(json['attributes']['mod_FrontColor'], 'mod_FrontColor');
    internal_leaveValidateVariant();
    this.mod_FrontColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontDesign');
    const val = _toString(json['attributes']['mod_FrontDesign'], 'mod_FrontDesign');
    internal_leaveValidateVariant();
    this.mod_FrontDesign = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontEdgeColor');
    const val = _toString(json['attributes']['mod_FrontEdgeColor'], 'mod_FrontEdgeColor');
    internal_leaveValidateVariant();
    this.mod_FrontEdgeColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontEdgeThk');
    const val = _toString(json['attributes']['mod_FrontEdgeThk'], 'mod_FrontEdgeThk');
    internal_leaveValidateVariant();
    this.mod_FrontEdgeThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontFrameColor');
    const val = _toString(json['attributes']['mod_FrontFrameColor'], 'mod_FrontFrameColor');
    internal_leaveValidateVariant();
    this.mod_FrontFrameColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontGapCarcase');
    const val = _toFloat(json['attributes']['mod_FrontGapCarcase'], 'mod_FrontGapCarcase');
    internal_leaveValidateVariant();
    this.mod_FrontGapCarcase = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontGapHor');
    const val = _toFloat(json['attributes']['mod_FrontGapHor'], 'mod_FrontGapHor');
    internal_leaveValidateVariant();
    this.mod_FrontGapHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontGapVert');
    const val = _toFloat(json['attributes']['mod_FrontGapVert'], 'mod_FrontGapVert');
    internal_leaveValidateVariant();
    this.mod_FrontGapVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontGlassColor');
    const val = _toString(json['attributes']['mod_FrontGlassColor'], 'mod_FrontGlassColor');
    internal_leaveValidateVariant();
    this.mod_FrontGlassColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontPosStart');
    const val = _toFloat(json['attributes']['mod_FrontPosStart'], 'mod_FrontPosStart');
    internal_leaveValidateVariant();
    this.mod_FrontPosStart = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontProgram');
    const val = _toString(json['attributes']['mod_FrontProgram'], 'mod_FrontProgram');
    internal_leaveValidateVariant();
    this.mod_FrontProgram = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandleColor');
    const val = _toString(json['attributes']['mod_HandleColor'], 'mod_HandleColor');
    internal_leaveValidateVariant();
    this.mod_HandleColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandleDesign');
    const val = _toString(json['attributes']['mod_HandleDesign'], 'mod_HandleDesign');
    internal_leaveValidateVariant();
    this.mod_HandleDesign = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandleLength');
    const val = _toFloat(json['attributes']['mod_HandleLength'], 'mod_HandleLength');
    internal_leaveValidateVariant();
    this.mod_HandleLength = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandleLine');
    const val = _toFloat(json['attributes']['mod_HandleLine'], 'mod_HandleLine');
    internal_leaveValidateVariant();
    this.mod_HandleLine = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandlePosLogic');
    const val = _toString(json['attributes']['mod_HandlePosLogic'], 'mod_HandlePosLogic');
    internal_leaveValidateVariant();
    this.mod_HandlePosLogic = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HandlePosType');
    const val = _toString(json['attributes']['mod_HandlePosType'], 'mod_HandlePosType');
    internal_leaveValidateVariant();
    this.mod_HandlePosType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HangerPosX');
    const val = _toString(json['attributes']['mod_HangerPosX'], 'mod_HangerPosX');
    internal_leaveValidateVariant();
    this.mod_HangerPosX = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HangerPosY');
    const val = _toString(json['attributes']['mod_HangerPosY'], 'mod_HangerPosY');
    internal_leaveValidateVariant();
    this.mod_HangerPosY = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HangerType');
    const val = _toString(json['attributes']['mod_HangerType'], 'mod_HangerType');
    internal_leaveValidateVariant();
    this.mod_HangerType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HardwareColor');
    const val = _toString(json['attributes']['mod_HardwareColor'], 'mod_HardwareColor');
    internal_leaveValidateVariant();
    this.mod_HardwareColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_Height');
    const val = _toFloat(json['attributes']['mod_Height'], 'mod_Height');
    internal_leaveValidateVariant();
    this.mod_Height = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HeightPosInsertion');
    const val = _toFloat(json['attributes']['mod_HeightPosInsertion'], 'mod_HeightPosInsertion');
    internal_leaveValidateVariant();
    this.mod_HeightPosInsertion = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPart');
    const val = _toString(json['attributes']['mod_LightPart'], 'mod_LightPart');
    internal_leaveValidateVariant();
    this.mod_LightPart = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX');
    const val = _toString(json['attributes']['mod_LightPosX'], 'mod_LightPosX');
    internal_leaveValidateVariant();
    this.mod_LightPosX = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX1');
    const val = _toFloat(json['attributes']['mod_LightPosX1'], 'mod_LightPosX1');
    internal_leaveValidateVariant();
    this.mod_LightPosX1 = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX2');
    const val = _toFloat(json['attributes']['mod_LightPosX2'], 'mod_LightPosX2');
    internal_leaveValidateVariant();
    this.mod_LightPosX2 = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX3');
    const val = _toFloat(json['attributes']['mod_LightPosX3'], 'mod_LightPosX3');
    internal_leaveValidateVariant();
    this.mod_LightPosX3 = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX4');
    const val = _toFloat(json['attributes']['mod_LightPosX4'], 'mod_LightPosX4');
    internal_leaveValidateVariant();
    this.mod_LightPosX4 = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosX5');
    const val = _toFloat(json['attributes']['mod_LightPosX5'], 'mod_LightPosX5');
    internal_leaveValidateVariant();
    this.mod_LightPosX5 = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightPosY');
    const val = _toFloat(json['attributes']['mod_LightPosY'], 'mod_LightPosY');
    internal_leaveValidateVariant();
    this.mod_LightPosY = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_LightSystem');
    const val = _toString(json['attributes']['mod_LightSystem'], 'mod_LightSystem');
    internal_leaveValidateVariant();
    this.mod_LightSystem = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_Model');
    const val = _toString(json['attributes']['mod_Model'], 'mod_Model');
    internal_leaveValidateVariant();
    this.mod_Model = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_OpeningType');
    const val = _toString(json['attributes']['mod_OpeningType'], 'mod_OpeningType');
    internal_leaveValidateVariant();
    this.mod_OpeningType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaDesign');
    const val = _toString(json['attributes']['mod_PlinthAreaDesign'], 'mod_PlinthAreaDesign');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaDesign = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaElementColor');
    const val = _toString(json['attributes']['mod_PlinthAreaElementColor'], 'mod_PlinthAreaElementColor');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaElementColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaHeight');
    const val = _toFloat(json['attributes']['mod_PlinthAreaHeight'], 'mod_PlinthAreaHeight');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaHeight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaPosBackMatrix');
    const val = _toString(json['attributes']['mod_PlinthAreaPosBackMatrix'], 'mod_PlinthAreaPosBackMatrix');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaPosBackMatrix = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaPosFrontMatrix');
    const val = _toString(json['attributes']['mod_PlinthAreaPosFrontMatrix'], 'mod_PlinthAreaPosFrontMatrix');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaPosFrontMatrix = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaPosLeftMatrix');
    const val = _toString(json['attributes']['mod_PlinthAreaPosLeftMatrix'], 'mod_PlinthAreaPosLeftMatrix');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaPosLeftMatrix = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaPosRightMatrix');
    const val = _toString(json['attributes']['mod_PlinthAreaPosRightMatrix'], 'mod_PlinthAreaPosRightMatrix');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaPosRightMatrix = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaVisLeft');
    const val = _toBoolean(json['attributes']['mod_PlinthAreaVisLeft'], 'mod_PlinthAreaVisLeft');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaVisLeft = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaVisRight');
    const val = _toBoolean(json['attributes']['mod_PlinthAreaVisRight'], 'mod_PlinthAreaVisRight');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaVisRight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_RailhortopbackThk');
    const val = _toFloat(json['attributes']['mod_RailhortopbackThk'], 'mod_RailhortopbackThk');
    internal_leaveValidateVariant();
    this.mod_RailhortopbackThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_RailhortopfrontThk');
    const val = _toFloat(json['attributes']['mod_RailhortopfrontThk'], 'mod_RailhortopfrontThk');
    internal_leaveValidateVariant();
    this.mod_RailhortopfrontThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_RailverttopbackThk');
    const val = _toFloat(json['attributes']['mod_RailverttopbackThk'], 'mod_RailverttopbackThk');
    internal_leaveValidateVariant();
    this.mod_RailverttopbackThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_RailverttopfrontThk');
    const val = _toFloat(json['attributes']['mod_RailverttopfrontThk'], 'mod_RailverttopfrontThk');
    internal_leaveValidateVariant();
    this.mod_RailverttopfrontThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelfadjThk');
    const val = _toFloat(json['attributes']['mod_ShelfadjThk'], 'mod_ShelfadjThk');
    internal_leaveValidateVariant();
    this.mod_ShelfadjThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelfbtmThk');
    const val = _toFloat(json['attributes']['mod_ShelfbtmThk'], 'mod_ShelfbtmThk');
    internal_leaveValidateVariant();
    this.mod_ShelfbtmThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelffixedThk');
    const val = _toFloat(json['attributes']['mod_ShelffixedThk'], 'mod_ShelffixedThk');
    internal_leaveValidateVariant();
    this.mod_ShelffixedThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_Width');
    const val = _toFloat(json['attributes']['mod_Width'], 'mod_Width');
    internal_leaveValidateVariant();
    this.mod_Width = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_TypeElement');
    const val = _toString(json['attributes']['mod_TypeElement'], 'mod_TypeElement');
    internal_leaveValidateVariant();
    this.mod_TypeElement = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelrightThk');
    const val = _toFloat(json['attributes']['mod_SidepanelrightThk'], 'mod_SidepanelrightThk');
    internal_leaveValidateVariant();
    this.mod_SidepanelrightThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelleftThk');
    const val = _toFloat(json['attributes']['mod_SidepanelleftThk'], 'mod_SidepanelleftThk');
    internal_leaveValidateVariant();
    this.mod_SidepanelleftThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelftopThk');
    const val = _toFloat(json['attributes']['mod_ShelftopThk'], 'mod_ShelftopThk');
    internal_leaveValidateVariant();
    this.mod_ShelftopThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CornerunitStraightConstruction');
    const val = _toString(json['attributes']['mod_CornerunitStraightConstruction'], 'mod_CornerunitStraightConstruction');
    internal_leaveValidateVariant();
    this.mod_CornerunitStraightConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PanelblindThk');
    const val = _toFloat(json['attributes']['mod_PanelblindThk'], 'mod_PanelblindThk');
    internal_leaveValidateVariant();
    this.mod_PanelblindThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseDirection');
    const val = _toString(json['attributes']['mod_CarcaseDirection'], 'mod_CarcaseDirection');
    internal_leaveValidateVariant();
    this.mod_CarcaseDirection = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ParentName');
    const val = _toString(json['attributes']['mod_ParentName'], 'mod_ParentName');
    internal_leaveValidateVariant();
    this.mod_ParentName = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ModuleName');
    const val = _toString(json['attributes']['mod_ModuleName'], 'mod_ModuleName');
    internal_leaveValidateVariant();
    this.mod_ModuleName = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CornerunitFrontWidth');
    const val = _toFloat(json['attributes']['mod_CornerunitFrontWidth'], 'mod_CornerunitFrontWidth');
    internal_leaveValidateVariant();
    this.mod_CornerunitFrontWidth = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrontGapHorTop');
    const val = _toFloat(json['attributes']['mod_FrontGapHorTop'], 'mod_FrontGapHorTop');
    internal_leaveValidateVariant();
    this.mod_FrontGapHorTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PlinthAreaExtraItem');
    const val = _toString(json['attributes']['mod_PlinthAreaExtraItem'], 'mod_PlinthAreaExtraItem');
    internal_leaveValidateVariant();
    this.mod_PlinthAreaExtraItem = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_InteriorEquipmentLogic');
    const val = _toString(json['attributes']['mod_InteriorEquipmentLogic'], 'mod_InteriorEquipmentLogic');
    internal_leaveValidateVariant();
    this.mod_InteriorEquipmentLogic = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelvesBackwallFittingConnection');
    const val = _toString(json['attributes']['mod_ShelvesBackwallFittingConnection'], 'mod_ShelvesBackwallFittingConnection');
    internal_leaveValidateVariant();
    this.mod_ShelvesBackwallFittingConnection = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionBackHor');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionBackHor'], 'mod_CarcasePartConnectionBackHor');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionBackHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionBackVert');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionBackVert'], 'mod_CarcasePartConnectionBackVert');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionBackVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionBtmVert');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionBtmVert'], 'mod_CarcasePartConnectionBtmVert');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionBtmVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionLeftHor');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionLeftHor'], 'mod_CarcasePartConnectionLeftHor');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionLeftHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionRightHor');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionRightHor'], 'mod_CarcasePartConnectionRightHor');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionRightHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcasePartConnectionTopVert');
    const val = _toString(json['attributes']['mod_CarcasePartConnectionTopVert'], 'mod_CarcasePartConnectionTopVert');
    internal_leaveValidateVariant();
    this.mod_CarcasePartConnectionTopVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionBtmVert');
    const val = _toString(json['attributes']['mod_FittingConnectionBtmVert'], 'mod_FittingConnectionBtmVert');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionBtmVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionLeftBtm');
    const val = _toString(json['attributes']['mod_FittingConnectionLeftBtm'], 'mod_FittingConnectionLeftBtm');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionLeftBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionLeftHor');
    const val = _toString(json['attributes']['mod_FittingConnectionLeftHor'], 'mod_FittingConnectionLeftHor');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionLeftHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionLeftTop');
    const val = _toString(json['attributes']['mod_FittingConnectionLeftTop'], 'mod_FittingConnectionLeftTop');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionLeftTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionRightBtm');
    const val = _toString(json['attributes']['mod_FittingConnectionRightBtm'], 'mod_FittingConnectionRightBtm');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionRightBtm = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionRightHor');
    const val = _toString(json['attributes']['mod_FittingConnectionRightHor'], 'mod_FittingConnectionRightHor');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionRightHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionRightTop');
    const val = _toString(json['attributes']['mod_FittingConnectionRightTop'], 'mod_FittingConnectionRightTop');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionRightTop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FittingConnectionTopVert');
    const val = _toString(json['attributes']['mod_FittingConnectionTopVert'], 'mod_FittingConnectionTopVert');
    internal_leaveValidateVariant();
    this.mod_FittingConnectionTopVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HangerOffsetPosY');
    const val = _toFloat(json['attributes']['mod_HangerOffsetPosY'], 'mod_HangerOffsetPosY');
    internal_leaveValidateVariant();
    this.mod_HangerOffsetPosY = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_HangerColor');
    const val = _toString(json['attributes']['mod_HangerColor'], 'mod_HangerColor');
    internal_leaveValidateVariant();
    this.mod_HangerColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_VertDividerType');
    const val = _toString(json['attributes']['mod_VertDividerType'], 'mod_VertDividerType');
    internal_leaveValidateVariant();
    this.mod_VertDividerType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelmiddleThk');
    const val = _toFloat(json['attributes']['mod_SidepanelmiddleThk'], 'mod_SidepanelmiddleThk');
    internal_leaveValidateVariant();
    this.mod_SidepanelmiddleThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelmiddleShortWidth');
    const val = _toFloat(json['attributes']['mod_SidepanelmiddleShortWidth'], 'mod_SidepanelmiddleShortWidth');
    internal_leaveValidateVariant();
    this.mod_SidepanelmiddleShortWidth = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CarcaseFrontConstruction');
    const val = _toString(json['attributes']['mod_CarcaseFrontConstruction'], 'mod_CarcaseFrontConstruction');
    internal_leaveValidateVariant();
    this.mod_CarcaseFrontConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CleatThk');
    const val = _toFloat(json['attributes']['mod_CleatThk'], 'mod_CleatThk');
    internal_leaveValidateVariant();
    this.mod_CleatThk = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CleatWidth');
    const val = _toFloat(json['attributes']['mod_CleatWidth'], 'mod_CleatWidth');
    internal_leaveValidateVariant();
    this.mod_CleatWidth = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PushtoopenLine');
    const val = _toFloat(json['attributes']['mod_PushtoopenLine'], 'mod_PushtoopenLine');
    internal_leaveValidateVariant();
    this.mod_PushtoopenLine = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PushtoopenType');
    const val = _toString(json['attributes']['mod_PushtoopenType'], 'mod_PushtoopenType');
    internal_leaveValidateVariant();
    this.mod_PushtoopenType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PushtoopenColor');
    const val = _toString(json['attributes']['mod_PushtoopenColor'], 'mod_PushtoopenColor');
    internal_leaveValidateVariant();
    this.mod_PushtoopenColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PanelWoodFrameType');
    const val = _toString(json['attributes']['mod_PanelWoodFrameType'], 'mod_PanelWoodFrameType');
    internal_leaveValidateVariant();
    this.mod_PanelWoodFrameType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_PanelWoodFrameFillingType');
    const val = _toString(json['attributes']['mod_PanelWoodFrameFillingType'], 'mod_PanelWoodFrameFillingType');
    internal_leaveValidateVariant();
    this.mod_PanelWoodFrameFillingType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FramePartsWidthHor');
    const val = _toFloat(json['attributes']['mod_FramePartsWidthHor'], 'mod_FramePartsWidthHor');
    internal_leaveValidateVariant();
    this.mod_FramePartsWidthHor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FramePartsWidthVert');
    const val = _toFloat(json['attributes']['mod_FramePartsWidthVert'], 'mod_FramePartsWidthVert');
    internal_leaveValidateVariant();
    this.mod_FramePartsWidthVert = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CreateCountertop');
    const val = _toBoolean(json['attributes']['mod_CreateCountertop'], 'mod_CreateCountertop');
    internal_leaveValidateVariant();
    this.mod_CreateCountertop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CreatePaneltop');
    const val = _toBoolean(json['attributes']['mod_CreatePaneltop'], 'mod_CreatePaneltop');
    internal_leaveValidateVariant();
    this.mod_CreatePaneltop = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CreateToekick');
    const val = _toBoolean(json['attributes']['mod_CreateToekick'], 'mod_CreateToekick');
    internal_leaveValidateVariant();
    this.mod_CreateToekick = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_CreateFingergrip');
    const val = _toBoolean(json['attributes']['mod_CreateFingergrip'], 'mod_CreateFingergrip');
    internal_leaveValidateVariant();
    this.mod_CreateFingergrip = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_DoorDirection');
    const val = _toString(json['attributes']['mod_DoorDirection'], 'mod_DoorDirection');
    internal_leaveValidateVariant();
    this.mod_DoorDirection = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SlopeAngle');
    const val = _toFloat(json['attributes']['mod_SlopeAngle'], 'mod_SlopeAngle');
    internal_leaveValidateVariant();
    this.mod_SlopeAngle = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SlopedCeilingDimensionLogic');
    const val = _toString(json['attributes']['mod_SlopedCeilingDimensionLogic'], 'mod_SlopedCeilingDimensionLogic');
    internal_leaveValidateVariant();
    this.mod_SlopedCeilingDimensionLogic = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SlopedCeilingConstruction');
    const val = _toString(json['attributes']['mod_SlopedCeilingConstruction'], 'mod_SlopedCeilingConstruction');
    internal_leaveValidateVariant();
    this.mod_SlopedCeilingConstruction = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_BackHeight');
    const val = _toFloat(json['attributes']['mod_BackHeight'], 'mod_BackHeight');
    internal_leaveValidateVariant();
    this.mod_BackHeight = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_TopDepth');
    const val = _toFloat(json['attributes']['mod_TopDepth'], 'mod_TopDepth');
    internal_leaveValidateVariant();
    this.mod_TopDepth = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrameFillingWoodColor');
    const val = _toString(json['attributes']['mod_FrameFillingWoodColor'], 'mod_FrameFillingWoodColor');
    internal_leaveValidateVariant();
    this.mod_FrameFillingWoodColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelrightType');
    const val = _toString(json['attributes']['mod_SidepanelrightType'], 'mod_SidepanelrightType');
    internal_leaveValidateVariant();
    this.mod_SidepanelrightType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_SidepanelleftType');
    const val = _toString(json['attributes']['mod_SidepanelleftType'], 'mod_SidepanelleftType');
    internal_leaveValidateVariant();
    this.mod_SidepanelleftType = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_GrainLogic');
    const val = _toString(json['attributes']['mod_GrainLogic'], 'mod_GrainLogic');
    internal_leaveValidateVariant();
    this.mod_GrainLogic = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_ShelfadjColor');
    const val = _toString(json['attributes']['mod_ShelfadjColor'], 'mod_ShelfadjColor');
    internal_leaveValidateVariant();
    this.mod_ShelfadjColor = val; }
    { internal_enterValidateVariant(this.modId, this._id, 'mod_FrameFillingColor');
    const val = _toString(json['attributes']['mod_FrameFillingColor'], 'mod_FrameFillingColor');
    internal_leaveValidateVariant();
    this.mod_FrameFillingColor = val; }
    if (withSubModules && json['modules']) {
      json['modules'].forEach((subMod:any) => {this.m.push(loadOrderData(subMod, this, manufacturerMode))});
    }
    internal_leaveLoadJson();
  }
  override checkPosRelevantRequiredAttributes():void {
    if (this.#mod_BackwallFixedHeight !== undefined) {
      this.#mod_BackwallFixedHeight = undefined;
      logWarning('The attribute "mod_BackwallFixedHeight" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_BackwallThk !== undefined) {
      this.#mod_BackwallThk = undefined;
      logWarning('The attribute "mod_BackwallThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_CarcaseVisBack !== undefined) {
      this.#mod_CarcaseVisBack = undefined;
      logWarning('The attribute "mod_CarcaseVisBack" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_CarcaseVisBtm !== undefined) {
      this.#mod_CarcaseVisBtm = undefined;
      logWarning('The attribute "mod_CarcaseVisBtm" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_CarcaseVisTop !== undefined) {
      this.#mod_CarcaseVisTop = undefined;
      logWarning('The attribute "mod_CarcaseVisTop" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_Depth === undefined) {
      logWarning('The required attribute "mod_Depth" was not set in the order data');
    }
    if (this.#mod_Height === undefined) {
      logWarning('The required attribute "mod_Height" was not set in the order data');
    }
    if (this.#mod_RailhortopbackThk !== undefined) {
      this.#mod_RailhortopbackThk = undefined;
      logWarning('The attribute "mod_RailhortopbackThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_RailhortopfrontThk !== undefined) {
      this.#mod_RailhortopfrontThk = undefined;
      logWarning('The attribute "mod_RailhortopfrontThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_RailverttopbackThk !== undefined) {
      this.#mod_RailverttopbackThk = undefined;
      logWarning('The attribute "mod_RailverttopbackThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_RailverttopfrontThk !== undefined) {
      this.#mod_RailverttopfrontThk = undefined;
      logWarning('The attribute "mod_RailverttopfrontThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_ShelfbtmThk !== undefined) {
      this.#mod_ShelfbtmThk = undefined;
      logWarning('The attribute "mod_ShelfbtmThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_ShelffixedThk !== undefined) {
      this.#mod_ShelffixedThk = undefined;
      logWarning('The attribute "mod_ShelffixedThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_Width === undefined) {
      logWarning('The required attribute "mod_Width" was not set in the order data');
    }
    if (this.#mod_SidepanelrightThk !== undefined) {
      this.#mod_SidepanelrightThk = undefined;
      logWarning('The attribute "mod_SidepanelrightThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_SidepanelleftThk !== undefined) {
      this.#mod_SidepanelleftThk = undefined;
      logWarning('The attribute "mod_SidepanelleftThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_PanelblindThk !== undefined) {
      this.#mod_PanelblindThk = undefined;
      logWarning('The attribute "mod_PanelblindThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_ParentName !== undefined) {
      this.#mod_ParentName = undefined;
      logWarning('The attribute "mod_ParentName" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_ModuleName !== undefined) {
      this.#mod_ModuleName = undefined;
      logWarning('The attribute "mod_ModuleName" was set in the order data but is marked as "fixed" - the value is ignored');
    }
    if (this.#mod_SidepanelmiddleThk !== undefined) {
      this.#mod_SidepanelmiddleThk = undefined;
      logWarning('The attribute "mod_SidepanelmiddleThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_SidepanelmiddleShortWidth !== undefined) {
      this.#mod_SidepanelmiddleShortWidth = undefined;
      logWarning('The attribute "mod_SidepanelmiddleShortWidth" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_CleatThk !== undefined) {
      this.#mod_CleatThk = undefined;
      logWarning('The attribute "mod_CleatThk" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
    if (this.#mod_CleatWidth !== undefined) {
      this.#mod_CleatWidth = undefined;
      logWarning('The attribute "mod_CleatWidth" was set in the order data but is not marked as "pos relevant" - the value is ignored');
    }
  }
  #dataCompletionAssignDerivedData() {
    internal_enterDataCompletionAssignDerivedData(this.modId, this._id);
    internal_leaveDataCompletionAssignDerivedData();
  }

  #dataCompletionSetDefaults() {
    this.#dataCompletionSetDefaultValues();
    this.#dataCompletionSetDefaultScripts();
  }
  #dataCompletionSetDefaultValues() {
    internal_enterDataCompletionSetDefault(this.modId, this._id);
    if (this.mod_CarcaseColor === undefined) {
      this.mod_CarcaseColor = "178";
    }
    if (this.mod_CarcaseProgram === undefined) {
      this.mod_CarcaseProgram = "Classic";
    }
    if (this.mod_CarcaseDistanceWall === undefined) {
      this.mod_CarcaseDistanceWall = 0;
    }
    if (this.mod_CarcaseOutsideColor === undefined) {
      this.mod_CarcaseOutsideColor = "240";
    }
    if (this.mod_CarcaseShelftopOversizeLeft === undefined) {
      this.mod_CarcaseShelftopOversizeLeft = 0;
    }
    if (this.mod_CarcaseShelftopOversizeRight === undefined) {
      this.mod_CarcaseShelftopOversizeRight = 0;
    }
    if (this.mod_CarcaseSidepanelleftOversizeBtm === undefined) {
      this.mod_CarcaseSidepanelleftOversizeBtm = 0;
    }
    if (this.mod_CarcaseSidepanelleftOversizeTop === undefined) {
      this.mod_CarcaseSidepanelleftOversizeTop = 0;
    }
    if (this.mod_CarcaseSidepanelrightOversizeBtm === undefined) {
      this.mod_CarcaseSidepanelrightOversizeBtm = 0;
    }
    if (this.mod_CarcaseSidepanelrightOversizeTop === undefined) {
      this.mod_CarcaseSidepanelrightOversizeTop = 0;
    }
    if (this.mod_CarcaseVisBack === undefined) {
      this.mod_CarcaseVisBack = false;
    }
    if (this.mod_CarcaseVisBtm === undefined) {
      this.mod_CarcaseVisBtm = false;
    }
    if (this.mod_CarcaseVisLeft === undefined) {
      this.mod_CarcaseVisLeft = false;
    }
    if (this.mod_CarcaseVisRight === undefined) {
      this.mod_CarcaseVisRight = false;
    }
    if (this.mod_CarcaseVisTop === undefined) {
      this.mod_CarcaseVisTop = false;
    }
    if (this.mod_FingergripType === undefined) {
      this.mod_FingergripType = "None";
    }
    if (this.mod_FrontColor === undefined) {
      this.mod_FrontColor = "240";
    }
    if (this.mod_FrontEdgeColor === undefined) {
      this.mod_FrontEdgeColor = "Automatic";
    }
    if (this.mod_FrontEdgeThk === undefined) {
      this.mod_FrontEdgeThk = "0";
    }
    if (this.mod_FrontFrameColor === undefined) {
      this.mod_FrontFrameColor = "DemoStainlessSteel";
    }
    if (this.mod_FrontGlassColor === undefined) {
      this.mod_FrontGlassColor = "FloatGlass";
    }
    if (this.mod_FrontProgram === undefined) {
      this.mod_FrontProgram = "Classic";
    }
    if (this.mod_HandleDesign === undefined) {
      this.mod_HandleDesign = "20";
    }
    if (this.mod_HangerPosX === undefined) {
      this.mod_HangerPosX = "Left_Right";
    }
    if (this.mod_HangerPosY === undefined) {
      this.mod_HangerPosY = "Automatic";
    }
    if (this.mod_HeightPosInsertion === undefined) {
      this.mod_HeightPosInsertion = 0;
    }
    if (this.mod_LightPart === undefined) {
      this.mod_LightPart = "BottomShelf";
    }
    if (this.mod_LightPosX === undefined) {
      this.mod_LightPosX = "Central";
    }
    if (this.mod_LightPosX1 === undefined) {
      this.mod_LightPosX1 = 0;
    }
    if (this.mod_LightPosX2 === undefined) {
      this.mod_LightPosX2 = 0;
    }
    if (this.mod_LightPosX3 === undefined) {
      this.mod_LightPosX3 = 0;
    }
    if (this.mod_LightPosX4 === undefined) {
      this.mod_LightPosX4 = 0;
    }
    if (this.mod_LightPosX5 === undefined) {
      this.mod_LightPosX5 = 0;
    }
    if (this.mod_LightPosY === undefined) {
      this.mod_LightPosY = 100;
    }
    if (this.mod_LightSystem === undefined) {
      this.mod_LightSystem = "NoLight";
    }
    if (this.mod_Model === undefined) {
      this.mod_Model = "Classic";
    }
    if (this.mod_PlinthAreaElementColor === undefined) {
      this.mod_PlinthAreaElementColor = "Black";
    }
    if (this.mod_PlinthAreaVisLeft === undefined) {
      this.mod_PlinthAreaVisLeft = false;
    }
    if (this.mod_PlinthAreaVisRight === undefined) {
      this.mod_PlinthAreaVisRight = false;
    }
    if (this.mod_TypeElement === undefined) {
      this.mod_TypeElement = "CornerUnitStraight";
    }
    if (this.mod_CarcaseDirection === undefined) {
      this.mod_CarcaseDirection = "Left";
    }
    if (this.mod_ParentName === undefined) {
      this.mod_ParentName = "mr_CornerunitStraight";
    }
    if (this.mod_ModuleName === undefined) {
      this.mod_ModuleName = "mr_CornerunitStraight";
    }
    if (this.mod_CornerunitFrontWidth === undefined) {
      this.mod_CornerunitFrontWidth = 300;
    }
    if (this.mod_InteriorEquipmentLogic === undefined) {
      this.mod_InteriorEquipmentLogic = "Automatic";
    }
    if (this.mod_HangerOffsetPosY === undefined) {
      this.mod_HangerOffsetPosY = 0;
    }
    if (this.mod_HangerColor === undefined) {
      this.mod_HangerColor = "DemoStainlessSteel";
    }
    if (this.mod_CarcaseFrontConstruction === undefined) {
      this.mod_CarcaseFrontConstruction = "FrontOverlayLBRT";
    }
    if (this.mod_CleatThk === undefined) {
      this.mod_CleatThk = 19;
    }
    if (this.mod_CleatWidth === undefined) {
      this.mod_CleatWidth = 150;
    }
    if (this.mod_PushtoopenType === undefined) {
      this.mod_PushtoopenType = "Automatic";
    }
    if (this.mod_CreateCountertop === undefined) {
      this.mod_CreateCountertop = false;
    }
    if (this.mod_CreatePaneltop === undefined) {
      this.mod_CreatePaneltop = false;
    }
    if (this.mod_CreateToekick === undefined) {
      this.mod_CreateToekick = false;
    }
    if (this.mod_CreateFingergrip === undefined) {
      this.mod_CreateFingergrip = false;
    }
    if (this.mod_SlopeAngle === undefined) {
      this.mod_SlopeAngle = 0;
    }
    if (this.mod_BackHeight === undefined) {
      this.mod_BackHeight = 600;
    }
    if (this.mod_FrameFillingWoodColor === undefined) {
      this.mod_FrameFillingWoodColor = "LikeFrameColor";
    }
    if (this.mod_SidepanelrightType === undefined) {
      this.mod_SidepanelrightType = "OutSp";
    }
    if (this.mod_SidepanelleftType === undefined) {
      this.mod_SidepanelleftType = "OutSp";
    }
    if (this.mod_FrameFillingColor === undefined) {
      this.mod_FrameFillingColor = "LikeFrameColor";
    }
    internal_leaveDataCompletionSetDefault();
  }
  #dataCompletionSetDefaultScripts() {
    internal_enterDataCompletionSetDefault(this.modId, this._id);
    try {
    if (this.mod_BackwallFixedHeight === undefined) {
      this.mod_BackwallFixedHeight = this.g.basic_BackwallFixedHeight;
    }
    if (this.mod_BackwallPos === undefined) {
      this.mod_BackwallPos = this.g.basic_BackwallPos;
    }
    if (this.mod_BackwallThk === undefined) {
      this.mod_BackwallThk = this.g.basic_BackwallThk;
    }
    if (this.mod_CarcaseBackwallColor === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseBackwallColor_SETDEFAULT
      this.mod_CarcaseBackwallColor = this.mod_CarcaseColor;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseBackwallConstruction === undefined) {
      this.mod_CarcaseBackwallConstruction = this.g.basic_CarcaseBackwallConstruction;
    }
    if (this.mod_CarcaseBackwallProgram === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseBackwallProgram_SETDEFAULT
      this.mod_CarcaseBackwallProgram = this.mod_CarcaseProgram;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseConnectionLeftBtm === undefined) {
      this.mod_CarcaseConnectionLeftBtm = this.g.basic_CarcaseConnectionLeftBtm;
    }
    if (this.mod_CarcaseConnectionLeftTop === undefined) {
      this.mod_CarcaseConnectionLeftTop = this.g.basic_CarcaseConnectionLeftTop;
    }
    if (this.mod_CarcaseConnectionRightBtm === undefined) {
      this.mod_CarcaseConnectionRightBtm = this.g.basic_CarcaseConnectionRightBtm;
    }
    if (this.mod_CarcaseConnectionRightTop === undefined) {
      this.mod_CarcaseConnectionRightTop = this.g.basic_CarcaseConnectionRightTop;
    }
    if (this.mod_CarcaseEdgeBackColor === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseEdgeBackColor_SETDEFAULT
      this.mod_CarcaseEdgeBackColor = this.mod_CarcaseColor;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseEdgeColor === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseEdgeColor_SETDEFAULT
      this.mod_CarcaseEdgeColor = this.mod_CarcaseColor;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseEdgeFrontColor === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseEdgeFrontColor_SETDEFAULT
      this.mod_CarcaseEdgeFrontColor = this.mod_CarcaseColor;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseOutsideProgram === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_CarcaseOutsideProgram_SETDEFAULT
      this.mod_CarcaseOutsideProgram = this.mod_CarcaseProgram;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    if (this.mod_CarcaseShelfbtmConstruction === undefined) {
      this.mod_CarcaseShelfbtmConstruction = this.g.basic_CarcaseShelfbtmConstruction;
    }
    if (this.mod_CarcaseShelfbtmOversizeInsideWall === undefined) {
      this.mod_CarcaseShelfbtmOversizeInsideWall = this.g.basic_CarcaseOversizeInsideWall;
    }
    if (this.mod_CarcaseShelfbtmOversizeLeft === undefined) {
      this.mod_CarcaseShelfbtmOversizeLeft = this.g.basic_ShelfbtmOffsetSide;
    }
    if (this.mod_CarcaseShelfbtmOversizeRight === undefined) {
      this.mod_CarcaseShelfbtmOversizeRight = this.g.basic_ShelfbtmOffsetSide;
    }
    if (this.mod_CarcaseShelftopConstruction === undefined) {
      this.mod_CarcaseShelftopConstruction = this.g.basic_CarcaseShelftopConstruction;
    }
    if (this.mod_CarcaseShelftopOversizeInsideWall === undefined) {
      this.mod_CarcaseShelftopOversizeInsideWall = this.g.basic_CarcaseOversizeInsideWall;
    }
    if (this.mod_CarcaseSidepanelleftOversizeInsideWall === undefined) {
      this.mod_CarcaseSidepanelleftOversizeInsideWall = this.g.basic_CarcaseOversizeInsideWall;
    }
    if (this.mod_CarcaseSidepanelrightOversizeInsideWall === undefined) {
      this.mod_CarcaseSidepanelrightOversizeInsideWall = this.g.basic_CarcaseOversizeInsideWall;
    }
    if (this.mod_FrontDesign === undefined) {
      this.mod_FrontDesign = this.g.basic_FrontDesign;
    }
    if (this.mod_FrontGapCarcase === undefined) {
      this.mod_FrontGapCarcase = this.g.basic_FrontGapCarcase;
    }
    if (this.mod_FrontGapHor === undefined) {
      this.mod_FrontGapHor = this.g.basic_FrontGapHor;
    }
    if (this.mod_FrontGapVert === undefined) {
      this.mod_FrontGapVert = this.g.basic_FrontGapVert;
    }
    if (this.mod_FrontPosStart === undefined) {
      this.mod_FrontPosStart = this.g.basic_FrontPosStart;
    }
    if (this.mod_HandleColor === undefined) {
      this.mod_HandleColor = this.g.basic_HandleColor;
    }
    if (this.mod_HandleLength === undefined) {
      this.mod_HandleLength = this.g.basic_HandleLength;
    }
    if (this.mod_HandleLine === undefined) {
      this.mod_HandleLine = this.g.basic_HandleLine;
    }
    if (this.mod_HandlePosLogic === undefined) {
      this.mod_HandlePosLogic = this.g.basic_HandlePosLogic;
    }
    if (this.mod_HandlePosType === undefined) {
      this.mod_HandlePosType = this.g.basic_HandlePosType;
    }
    if (this.mod_HangerType === undefined) {
      this.mod_HangerType = this.g.basic_HangerType;
    }
    if (this.mod_HardwareColor === undefined) {
      this.mod_HardwareColor = this.g.basic_HardwareColor;
    }
    if (this.mod_OpeningType === undefined) {
      this.mod_OpeningType = this.g.basic_OpeningType;
    }
    if (this.mod_PlinthAreaDesign === undefined) {
      this.mod_PlinthAreaDesign = this.g.basic_PlinthAreaDesign;
    }
    if (this.mod_PlinthAreaHeight === undefined) {
      this.mod_PlinthAreaHeight = this.g.basic_PlinthAreaHeight;
    }
    if (this.mod_PlinthAreaPosBackMatrix === undefined) {
      this.mod_PlinthAreaPosBackMatrix = this.g.basic_PlinthAreaPosBackMatrix;
    }
    if (this.mod_PlinthAreaPosFrontMatrix === undefined) {
      this.mod_PlinthAreaPosFrontMatrix = this.g.basic_PlinthAreaPosFrontMatrix;
    }
    if (this.mod_PlinthAreaPosLeftMatrix === undefined) {
      this.mod_PlinthAreaPosLeftMatrix = this.g.basic_PlinthAreaPosLeftMatrix;
    }
    if (this.mod_PlinthAreaPosRightMatrix === undefined) {
      this.mod_PlinthAreaPosRightMatrix = this.g.basic_PlinthAreaPosRightMatrix;
    }
    if (this.mod_RailhortopbackThk === undefined) {
      this.mod_RailhortopbackThk = this.g.basic_RailhortopbackThk;
    }
    if (this.mod_RailhortopfrontThk === undefined) {
      this.mod_RailhortopfrontThk = this.g.basic_RailhortopfrontThk;
    }
    if (this.mod_RailverttopbackThk === undefined) {
      this.mod_RailverttopbackThk = this.g.basic_RailverttopbackThk;
    }
    if (this.mod_RailverttopfrontThk === undefined) {
      this.mod_RailverttopfrontThk = this.g.basic_RailverttopfrontThk;
    }
    if (this.mod_ShelfadjThk === undefined) {
      this.mod_ShelfadjThk = this.g.basic_ShelfadjThk;
    }
    if (this.mod_ShelfbtmThk === undefined) {
      this.mod_ShelfbtmThk = this.g.basic_ShelfbtmThk;
    }
    if (this.mod_ShelffixedThk === undefined) {
      this.mod_ShelffixedThk = this.g.basic_ShelffixedThk;
    }
    if (this.mod_SidepanelrightThk === undefined) {
      this.mod_SidepanelrightThk = this.g.basic_SidePanelThk;
    }
    if (this.mod_SidepanelleftThk === undefined) {
      this.mod_SidepanelleftThk = this.g.basic_SidePanelThk;
    }
    if (this.mod_ShelftopThk === undefined) {
      this.mod_ShelftopThk = this.g.basic_ShelftopThk;
    }
    if (this.mod_CornerunitStraightConstruction === undefined) {
      this.mod_CornerunitStraightConstruction = this.g.basic_CornerunitStraightConstruction;
    }
    if (this.mod_PanelblindThk === undefined) {
      this.mod_PanelblindThk = this.g.basic_PanelblindThk;
    }
    if (this.mod_FrontGapHorTop === undefined) {
      this.mod_FrontGapHorTop = this.g.basic_FrontGapHorTop;
    }
    if (this.mod_PlinthAreaExtraItem === undefined) {
      this.mod_PlinthAreaExtraItem = this.g.basic_PlinthAreaExtraItem;
    }
    if (this.mod_ShelvesBackwallFittingConnection === undefined) {
      this.mod_ShelvesBackwallFittingConnection = this.g.basic_ShelvesBackwallFittingConnection;
    }
    if (this.mod_CarcasePartConnectionBackHor === undefined) {
      this.mod_CarcasePartConnectionBackHor = this.g.basic_CarcasePartConnectionBackHor;
    }
    if (this.mod_CarcasePartConnectionBackVert === undefined) {
      this.mod_CarcasePartConnectionBackVert = this.g.basic_CarcasePartConnectionBackVert;
    }
    if (this.mod_CarcasePartConnectionBtmVert === undefined) {
      this.mod_CarcasePartConnectionBtmVert = this.g.basic_CarcasePartConnectionBtmVert;
    }
    if (this.mod_CarcasePartConnectionLeftHor === undefined) {
      this.mod_CarcasePartConnectionLeftHor = this.g.basic_CarcasePartConnectionLeftHor;
    }
    if (this.mod_CarcasePartConnectionRightHor === undefined) {
      this.mod_CarcasePartConnectionRightHor = this.g.basic_CarcasePartConnectionRightHor;
    }
    if (this.mod_CarcasePartConnectionTopVert === undefined) {
      this.mod_CarcasePartConnectionTopVert = this.g.basic_CarcasePartConnectionTopVert;
    }
    if (this.mod_FittingConnectionBtmVert === undefined) {
      this.mod_FittingConnectionBtmVert = this.g.basic_FittingConnectionBtmVert;
    }
    if (this.mod_FittingConnectionLeftBtm === undefined) {
      this.mod_FittingConnectionLeftBtm = this.g.basic_FittingConnectionLeftBtm;
    }
    if (this.mod_FittingConnectionLeftHor === undefined) {
      this.mod_FittingConnectionLeftHor = this.g.basic_FittingConnectionLeftHor;
    }
    if (this.mod_FittingConnectionLeftTop === undefined) {
      this.mod_FittingConnectionLeftTop = this.g.basic_FittingConnectionLeftTop;
    }
    if (this.mod_FittingConnectionRightBtm === undefined) {
      this.mod_FittingConnectionRightBtm = this.g.basic_FittingConnectionRightBtm;
    }
    if (this.mod_FittingConnectionRightHor === undefined) {
      this.mod_FittingConnectionRightHor = this.g.basic_FittingConnectionRightHor;
    }
    if (this.mod_FittingConnectionRightTop === undefined) {
      this.mod_FittingConnectionRightTop = this.g.basic_FittingConnectionRightTop;
    }
    if (this.mod_FittingConnectionTopVert === undefined) {
      this.mod_FittingConnectionTopVert = this.g.basic_FittingConnectionTopVert;
    }
    if (this.mod_VertDividerType === undefined) {
      this.mod_VertDividerType = this.g.basic_VertDividerType;
    }
    if (this.mod_SidepanelmiddleThk === undefined) {
      this.mod_SidepanelmiddleThk = this.g.basic_SidepanelmiddleThk;
    }
    if (this.mod_SidepanelmiddleShortWidth === undefined) {
      this.mod_SidepanelmiddleShortWidth = this.g.basic_SidepanelmiddleShortWidth;
    }
    if (this.mod_PushtoopenLine === undefined) {
      this.mod_PushtoopenLine = this.g.basic_PushtoopenLine;
    }
    if (this.mod_PushtoopenColor === undefined) {
      this.mod_PushtoopenColor = this.g.basic_PushtoopenColor;
    }
    if (this.mod_PanelWoodFrameType === undefined) {
      this.mod_PanelWoodFrameType = this.g.basic_PanelWoodFrameType;
    }
    if (this.mod_PanelWoodFrameFillingType === undefined) {
      this.mod_PanelWoodFrameFillingType = this.g.basic_PanelWoodFrameFillingType;
    }
    if (this.mod_FramePartsWidthHor === undefined) {
      this.mod_FramePartsWidthHor = this.g.basic_FramePartsWidthHor;
    }
    if (this.mod_FramePartsWidthVert === undefined) {
      this.mod_FramePartsWidthVert = this.g.basic_FramePartsWidthVert;
    }
    if (this.mod_DoorDirection === undefined) {
      this.mod_DoorDirection = this.g.basic_DoorDirection;
    }
    if (this.mod_SlopedCeilingDimensionLogic === undefined) {
      this.mod_SlopedCeilingDimensionLogic = this.g.basic_SlopedCeilingDimensionLogic;
    }
    if (this.mod_SlopedCeilingConstruction === undefined) {
      this.mod_SlopedCeilingConstruction = this.g.basic_SlopedCeilingConstruction;
    }
    if (this.mod_TopDepth === undefined) {
      this.mod_TopDepth = this.g.basic_TopDepth;
    }
    if (this.mod_GrainLogic === undefined) {
      this.mod_GrainLogic = this.g.basic_GrainLogic;
    }
    if (this.mod_ShelfadjColor === undefined) {
// ###############################################################
// ####################### CUSTOM SCRIPTS ########################
// ###############################################################
      // CUSTOMSCRIPT_mr_CornerunitStraight_mod_ShelfadjColor_SETDEFAULT
      this.mod_ShelfadjColor = this.mod_CarcaseColor;
// ###############################################################
// ################### END CUSTOM SCRIPTS ########################
// ###############################################################
    }
    } 
    catch (error) {
      if (error instanceof Error) {
        logError(error.message + "\n" + error.stack);
      } else {
        logError(JSON.stringify(error, null, 4));
      }
    }
    internal_leaveDataCompletionSetDefault();
  }

  override dataCompletion():void {
    this.#dataCompletionSetDefaultValues();
    // Optionally set the global variables based on this root data
    internal_enterDataCompletionSetGlobalVars(this.modId, this._id);
    this._g!.setRootModuleData(this);
    internal_leaveDataCompletionSetGlobalVars();
    this.#dataCompletionSetDefaultScripts();
    this.m.forEach(subMod => subMod.dataCompletion());
  }

  override manufacturerDataCompletion():void {
    this.#manufacturerDataCompletionInternal();
    this.m.forEach(subMod => subMod.manufacturerDataCompletion());
  }
  #manufacturerDataCompletionInternal = mr_CornerunitStraight_manufacturerDataCompletion;
  override afterDataCompletion():void {
    if(this._adcFinished) return;
    this._adcFinished = true;
    this.validateSelections();
    var adc = new OD_M_mr_CornerunitStraight_NonNull(this);
    adc.afterDataCompletion();
    this.m.forEach(subMod => subMod.afterDataCompletion());

  }
  seal(): IModuleNonNull_mr_CornerunitStraight{
    this.afterDataCompletion();
    const adc = new OD_M_mr_CornerunitStraight_NonNull(this);
    return adc;
  }

  addOD_M_mc_Storageunit01(index?: number): dc_mc_Storageunit01 {
    var m = new OD_M_mc_Storageunit01(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mc_PlinthArea01(index?: number): dc_mc_PlinthArea01 {
    var m = new OD_M_mc_PlinthArea01(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mf_Door(index?: number): dc_mf_Door {
    var m = new OD_M_mf_Door(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mc_CornerunitStraight01(index?: number): dc_mc_CornerunitStraight01 {
    var m = new OD_M_mc_CornerunitStraight01(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mf_RackArea(index?: number): dc_mf_RackArea {
    var m = new OD_M_mf_RackArea(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mf_Drawer(index?: number): dc_mf_Drawer {
    var m = new OD_M_mf_Drawer(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  addOD_M_mf_CornerFillerFront(index?: number): dc_mf_CornerFillerFront {
    var m = new OD_M_mf_CornerFillerFront(this);
    m.dataCompletion();
    if (this._manufacturerMode) {
      m.manufacturerDataCompletion();
    }
    if (index !== undefined) {
      this.m.splice(index, 0, m);
    } else {
      this.m.push(m);
    }
    return m;
  }
  override validateSelections():void {
    this.mod_BackwallFixedHeight_matrix = VariantValidation.mod_BackwallFixedHeight(this, this);
    this.mod_BackwallPos_matrix = VariantValidation.mod_BackwallPos(this, this);
    this.mod_BackwallThk_matrix = VariantValidation.mod_BackwallThk(this, this);
    this.mod_CarcaseColor_matrix = VariantValidation.mod_CarcaseColor(this, this);
    this.mod_CarcaseBackwallColor_matrix = VariantValidation.mod_CarcaseBackwallColor(this, this);
    this.mod_CarcaseBackwallConstruction_matrix = VariantValidation.mod_CarcaseBackwallConstruction(this, this);
    this.mod_CarcaseProgram_matrix = VariantValidation.mod_CarcaseProgram(this, this);
    this.mod_CarcaseBackwallProgram_matrix = VariantValidation.mod_CarcaseBackwallProgram(this, this);
    this.mod_CarcaseConnectionLeftBtm_matrix = VariantValidation.mod_CarcaseConnectionLeftBtm(this, this);
    this.mod_CarcaseConnectionLeftTop_matrix = VariantValidation.mod_CarcaseConnectionLeftTop(this, this);
    this.mod_CarcaseConnectionRightBtm_matrix = VariantValidation.mod_CarcaseConnectionRightBtm(this, this);
    this.mod_CarcaseConnectionRightTop_matrix = VariantValidation.mod_CarcaseConnectionRightTop(this, this);
    this.mod_CarcaseDistanceWall_matrix = VariantValidation.mod_CarcaseDistanceWall(this, this);
    this.mod_CarcaseEdgeBackColor_matrix = VariantValidation.mod_CarcaseEdgeBackColor(this, this);
    this.mod_CarcaseEdgeColor_matrix = VariantValidation.mod_CarcaseEdgeColor(this, this);
    this.mod_CarcaseEdgeFrontColor_matrix = VariantValidation.mod_CarcaseEdgeFrontColor(this, this);
    this.mod_CarcaseOutsideColor_matrix = VariantValidation.mod_CarcaseOutsideColor(this, this);
    this.mod_CarcaseOutsideProgram_matrix = VariantValidation.mod_CarcaseOutsideProgram(this, this);
    this.mod_CarcaseShelfbtmConstruction_matrix = VariantValidation.mod_CarcaseShelfbtmConstruction(this, this);
    this.mod_CarcaseShelfbtmOversizeInsideWall_matrix = VariantValidation.mod_CarcaseShelfbtmOversizeInsideWall(this, this);
    this.mod_CarcaseShelfbtmOversizeLeft_matrix = VariantValidation.mod_CarcaseShelfbtmOversizeLeft(this, this);
    this.mod_CarcaseShelfbtmOversizeRight_matrix = VariantValidation.mod_CarcaseShelfbtmOversizeRight(this, this);
    this.mod_CarcaseShelftopConstruction_matrix = VariantValidation.mod_CarcaseShelftopConstruction(this, this);
    this.mod_CarcaseShelftopOversizeInsideWall_matrix = VariantValidation.mod_CarcaseShelftopOversizeInsideWall(this, this);
    this.mod_CarcaseShelftopOversizeLeft_matrix = VariantValidation.mod_CarcaseShelftopOversizeLeft(this, this);
    this.mod_CarcaseShelftopOversizeRight_matrix = VariantValidation.mod_CarcaseShelftopOversizeRight(this, this);
    this.mod_CarcaseSidepanelleftOversizeBtm_matrix = VariantValidation.mod_CarcaseSidepanelleftOversizeBtm(this, this);
    this.mod_CarcaseSidepanelleftOversizeInsideWall_matrix = VariantValidation.mod_CarcaseSidepanelleftOversizeInsideWall(this, this);
    this.mod_CarcaseSidepanelleftOversizeTop_matrix = VariantValidation.mod_CarcaseSidepanelleftOversizeTop(this, this);
    this.mod_CarcaseSidepanelrightOversizeBtm_matrix = VariantValidation.mod_CarcaseSidepanelrightOversizeBtm(this, this);
    this.mod_CarcaseSidepanelrightOversizeInsideWall_matrix = VariantValidation.mod_CarcaseSidepanelrightOversizeInsideWall(this, this);
    this.mod_CarcaseSidepanelrightOversizeTop_matrix = VariantValidation.mod_CarcaseSidepanelrightOversizeTop(this, this);
    this.mod_CarcaseVisBack_matrix = VariantValidation.mod_CarcaseVisBack(this, this);
    this.mod_CarcaseVisBtm_matrix = VariantValidation.mod_CarcaseVisBtm(this, this);
    this.mod_CarcaseVisLeft_matrix = VariantValidation.mod_CarcaseVisLeft(this, this);
    this.mod_CarcaseVisRight_matrix = VariantValidation.mod_CarcaseVisRight(this, this);
    this.mod_CarcaseVisTop_matrix = VariantValidation.mod_CarcaseVisTop(this, this);
    this.mod_Depth_matrix = VariantValidation.mod_Depth(this, this);
    this.mod_FingergripType_matrix = VariantValidation.mod_FingergripType(this, this);
    this.mod_FrontColor_matrix = VariantValidation.mod_FrontColor(this, this);
    this.mod_FrontDesign_matrix = VariantValidation.mod_FrontDesign(this, this);
    this.mod_FrontEdgeColor_matrix = VariantValidation.mod_FrontEdgeColor(this, this);
    this.mod_FrontEdgeThk_matrix = VariantValidation.mod_FrontEdgeThk(this, this);
    this.mod_FrontFrameColor_matrix = VariantValidation.mod_FrontFrameColor(this, this);
    this.mod_FrontGapCarcase_matrix = VariantValidation.mod_FrontGapCarcase(this, this);
    this.mod_FrontGapHor_matrix = VariantValidation.mod_FrontGapHor(this, this);
    this.mod_FrontGapVert_matrix = VariantValidation.mod_FrontGapVert(this, this);
    this.mod_FrontGlassColor_matrix = VariantValidation.mod_FrontGlassColor(this, this);
    this.mod_FrontPosStart_matrix = VariantValidation.mod_FrontPosStart(this, this);
    this.mod_FrontProgram_matrix = VariantValidation.mod_FrontProgram(this, this);
    this.mod_HandleColor_matrix = VariantValidation.mod_HandleColor(this, this);
    this.mod_HandleDesign_matrix = VariantValidation.mod_HandleDesign(this, this);
    this.mod_HandleLength_matrix = VariantValidation.mod_HandleLength(this, this);
    this.mod_HandleLine_matrix = VariantValidation.mod_HandleLine(this, this);
    this.mod_HandlePosLogic_matrix = VariantValidation.mod_HandlePosLogic(this, this);
    this.mod_HandlePosType_matrix = VariantValidation.mod_HandlePosType(this, this);
    this.mod_HangerPosX_matrix = VariantValidation.mod_HangerPosX(this, this);
    this.mod_HangerPosY_matrix = VariantValidation.mod_HangerPosY(this, this);
    this.mod_HangerType_matrix = VariantValidation.mod_HangerType(this, this);
    this.mod_HardwareColor_matrix = VariantValidation.mod_HardwareColor(this, this);
    this.mod_Height_matrix = VariantValidation.mod_Height(this, this);
    this.mod_HeightPosInsertion_matrix = VariantValidation.mod_HeightPosInsertion(this, this);
    this.mod_LightPart_matrix = VariantValidation.mod_LightPart(this, this);
    this.mod_LightPosX_matrix = VariantValidation.mod_LightPosX(this, this);
    this.mod_LightPosX1_matrix = VariantValidation.mod_LightPosX1(this, this);
    this.mod_LightPosX2_matrix = VariantValidation.mod_LightPosX2(this, this);
    this.mod_LightPosX3_matrix = VariantValidation.mod_LightPosX3(this, this);
    this.mod_LightPosX4_matrix = VariantValidation.mod_LightPosX4(this, this);
    this.mod_LightPosX5_matrix = VariantValidation.mod_LightPosX5(this, this);
    this.mod_LightPosY_matrix = VariantValidation.mod_LightPosY(this, this);
    this.mod_LightSystem_matrix = VariantValidation.mod_LightSystem(this, this);
    this.mod_Model_matrix = VariantValidation.mod_Model(this, this);
    this.mod_OpeningType_matrix = VariantValidation.mod_OpeningType(this, this);
    this.mod_PlinthAreaDesign_matrix = VariantValidation.mod_PlinthAreaDesign(this, this);
    this.mod_PlinthAreaElementColor_matrix = VariantValidation.mod_PlinthAreaElementColor(this, this);
    this.mod_PlinthAreaHeight_matrix = VariantValidation.mod_PlinthAreaHeight(this, this);
    this.mod_PlinthAreaPosBackMatrix_matrix = VariantValidation.mod_PlinthAreaPosBackMatrix(this, this);
    this.mod_PlinthAreaPosFrontMatrix_matrix = VariantValidation.mod_PlinthAreaPosFrontMatrix(this, this);
    this.mod_PlinthAreaPosLeftMatrix_matrix = VariantValidation.mod_PlinthAreaPosLeftMatrix(this, this);
    this.mod_PlinthAreaPosRightMatrix_matrix = VariantValidation.mod_PlinthAreaPosRightMatrix(this, this);
    this.mod_PlinthAreaVisLeft_matrix = VariantValidation.mod_PlinthAreaVisLeft(this, this);
    this.mod_PlinthAreaVisRight_matrix = VariantValidation.mod_PlinthAreaVisRight(this, this);
    this.mod_RailhortopbackThk_matrix = VariantValidation.mod_RailhortopbackThk(this, this);
    this.mod_RailhortopfrontThk_matrix = VariantValidation.mod_RailhortopfrontThk(this, this);
    this.mod_RailverttopbackThk_matrix = VariantValidation.mod_RailverttopbackThk(this, this);
    this.mod_RailverttopfrontThk_matrix = VariantValidation.mod_RailverttopfrontThk(this, this);
    this.mod_ShelfadjThk_matrix = VariantValidation.mod_ShelfadjThk(this, this);
    this.mod_ShelfbtmThk_matrix = VariantValidation.mod_ShelfbtmThk(this, this);
    this.mod_ShelffixedThk_matrix = VariantValidation.mod_ShelffixedThk(this, this);
    this.mod_Width_matrix = VariantValidation.mod_Width(this, this);
    this.mod_TypeElement_matrix = VariantValidation.mod_TypeElement(this, this);
    this.mod_SidepanelrightThk_matrix = VariantValidation.mod_SidepanelrightThk(this, this);
    this.mod_SidepanelleftThk_matrix = VariantValidation.mod_SidepanelleftThk(this, this);
    this.mod_ShelftopThk_matrix = VariantValidation.mod_ShelftopThk(this, this);
    this.mod_CornerunitStraightConstruction_matrix = VariantValidation.mod_CornerunitStraightConstruction(this, this);
    this.mod_PanelblindThk_matrix = VariantValidation.mod_PanelblindThk(this, this);
    this.mod_CarcaseDirection_matrix = VariantValidation.mod_CarcaseDirection(this, this);
    this.mod_ParentName_matrix = VariantValidation.mod_ParentName(this, this);
    this.mod_ModuleName_matrix = VariantValidation.mod_ModuleName(this, this);
    this.mod_CornerunitFrontWidth_matrix = VariantValidation.mod_CornerunitFrontWidth(this, this);
    this.mod_FrontGapHorTop_matrix = VariantValidation.mod_FrontGapHorTop(this, this);
    this.mod_PlinthAreaExtraItem_matrix = VariantValidation.mod_PlinthAreaExtraItem(this, this);
    this.mod_InteriorEquipmentLogic_matrix = VariantValidation.mod_InteriorEquipmentLogic(this, this);
    this.mod_ShelvesBackwallFittingConnection_matrix = VariantValidation.mod_ShelvesBackwallFittingConnection(this, this);
    this.mod_CarcasePartConnectionBackHor_matrix = VariantValidation.mod_CarcasePartConnectionBackHor(this, this);
    this.mod_CarcasePartConnectionBackVert_matrix = VariantValidation.mod_CarcasePartConnectionBackVert(this, this);
    this.mod_CarcasePartConnectionBtmVert_matrix = VariantValidation.mod_CarcasePartConnectionBtmVert(this, this);
    this.mod_CarcasePartConnectionLeftHor_matrix = VariantValidation.mod_CarcasePartConnectionLeftHor(this, this);
    this.mod_CarcasePartConnectionRightHor_matrix = VariantValidation.mod_CarcasePartConnectionRightHor(this, this);
    this.mod_CarcasePartConnectionTopVert_matrix = VariantValidation.mod_CarcasePartConnectionTopVert(this, this);
    this.mod_FittingConnectionBtmVert_matrix = VariantValidation.mod_FittingConnectionBtmVert(this, this);
    this.mod_FittingConnectionLeftBtm_matrix = VariantValidation.mod_FittingConnectionLeftBtm(this, this);
    this.mod_FittingConnectionLeftHor_matrix = VariantValidation.mod_FittingConnectionLeftHor(this, this);
    this.mod_FittingConnectionLeftTop_matrix = VariantValidation.mod_FittingConnectionLeftTop(this, this);
    this.mod_FittingConnectionRightBtm_matrix = VariantValidation.mod_FittingConnectionRightBtm(this, this);
    this.mod_FittingConnectionRightHor_matrix = VariantValidation.mod_FittingConnectionRightHor(this, this);
    this.mod_FittingConnectionRightTop_matrix = VariantValidation.mod_FittingConnectionRightTop(this, this);
    this.mod_FittingConnectionTopVert_matrix = VariantValidation.mod_FittingConnectionTopVert(this, this);
    this.mod_HangerOffsetPosY_matrix = VariantValidation.mod_HangerOffsetPosY(this, this);
    this.mod_HangerColor_matrix = VariantValidation.mod_HangerColor(this, this);
    this.mod_VertDividerType_matrix = VariantValidation.mod_VertDividerType(this, this);
    this.mod_SidepanelmiddleThk_matrix = VariantValidation.mod_SidepanelmiddleThk(this, this);
    this.mod_SidepanelmiddleShortWidth_matrix = VariantValidation.mod_SidepanelmiddleShortWidth(this, this);
    this.mod_CarcaseFrontConstruction_matrix = VariantValidation.mod_CarcaseFrontConstruction(this, this);
    this.mod_CleatThk_matrix = VariantValidation.mod_CleatThk(this, this);
    this.mod_CleatWidth_matrix = VariantValidation.mod_CleatWidth(this, this);
    this.mod_PushtoopenLine_matrix = VariantValidation.mod_PushtoopenLine(this, this);
    this.mod_PushtoopenType_matrix = VariantValidation.mod_PushtoopenType(this, this);
    this.mod_PushtoopenColor_matrix = VariantValidation.mod_PushtoopenColor(this, this);
    this.mod_PanelWoodFrameType_matrix = VariantValidation.mod_PanelWoodFrameType(this, this);
    this.mod_PanelWoodFrameFillingType_matrix = VariantValidation.mod_PanelWoodFrameFillingType(this, this);
    this.mod_FramePartsWidthHor_matrix = VariantValidation.mod_FramePartsWidthHor(this, this);
    this.mod_FramePartsWidthVert_matrix = VariantValidation.mod_FramePartsWidthVert(this, this);
    this.mod_CreateCountertop_matrix = VariantValidation.mod_CreateCountertop(this, this);
    this.mod_CreatePaneltop_matrix = VariantValidation.mod_CreatePaneltop(this, this);
    this.mod_CreateToekick_matrix = VariantValidation.mod_CreateToekick(this, this);
    this.mod_CreateFingergrip_matrix = VariantValidation.mod_CreateFingergrip(this, this);
    this.mod_DoorDirection_matrix = VariantValidation.mod_DoorDirection(this, this);
    this.mod_SlopeAngle_matrix = VariantValidation.mod_SlopeAngle(this, this);
    this.mod_SlopedCeilingDimensionLogic_matrix = VariantValidation.mod_SlopedCeilingDimensionLogic(this, this);
    this.mod_SlopedCeilingConstruction_matrix = VariantValidation.mod_SlopedCeilingConstruction(this, this);
    this.mod_BackHeight_matrix = VariantValidation.mod_BackHeight(this, this);
    this.mod_TopDepth_matrix = VariantValidation.mod_TopDepth(this, this);
    this.mod_FrameFillingWoodColor_matrix = VariantValidation.mod_FrameFillingWoodColor(this, this);
    this.mod_SidepanelrightType_matrix = VariantValidation.mod_SidepanelrightType(this, this);
    this.mod_SidepanelleftType_matrix = VariantValidation.mod_SidepanelleftType(this, this);
    this.mod_GrainLogic_matrix = VariantValidation.mod_GrainLogic(this, this);
    this.mod_ShelfadjColor_matrix = VariantValidation.mod_ShelfadjColor(this, this);
    this.mod_FrameFillingColor_matrix = VariantValidation.mod_FrameFillingColor(this, this);
  }

  override createBuildPlan():void {
    var cbp = new OD_M_mr_CornerunitStraight_NonNull(this);
    cbp.createBuildPlan();
    this.m.forEach(subMod => subMod.createBuildPlan());
  }

}

class OD_M_mr_CornerunitStraight_NonNull implements cbp_mr_CornerunitStraight, adc_mr_CornerunitStraight ,IPartParentsNonNull_mr_CornerunitStraight_mr_StorageunitSingle,IPartParentsNonNull_mr_CornerunitStraight_mr_Filler01_mr_StorageunitSingle,IPartParentsNonNull_mr_CornerunitStraight,IPartParentsNonNull_mr_CornerFiller_mr_CornerunitStraight {
  constructor(parent: OD_M_mr_CornerunitStraight) {
    this.#internalParent = parent;
  }
  #internalParent: OD_M_mr_CornerunitStraight;

  addGenerationContour(generationMethod: GenerationMethod, height: number, contour: Contour): void {
    this.#internalParent.addGenerationContour(
      generationMethod,
      height,
      contour
    );
  }
  getRoomContours(): RoomContour[] { return this.#internalParent.roomContours ?? []; }
  get _posData(): Map<string, string|number> { return this.#internalParent._posData; }

  get _id():string { return this.#internalParent._id; }
  get modId():string { return this.#internalParent.modId; }
  getOrigin():Matrix4 {
    return this.#internalParent.getOrigin();
  }
  getOriginPos():Vector3 {
    return this.#internalParent.getOriginPos();
  }
  createBuildPlan():void {
    this.#createBuildPlanInternal();
  }
  #createBuildPlanInternal = mr_CornerunitStraight_createBuildPlan;
  afterDataCompletion():void {
    this.#afterDataCompletionInternal();
  }
  #afterDataCompletionInternal = mr_CornerunitStraight_afterDataCompletion;
  createPartGroup(groupName:string, part:PartBase): PartGroup { 
    return this.#internalParent.createPartGroup(groupName, part);
  }
  assignPartGroup(groupName:string, part:PartBase): void { 
    this.#internalParent.assignPartGroup(groupName, part);
  }
  createOpenGroup(groupName:string, part:PartBase): OpenGroup { 
    return this.#internalParent.createOpenGroup(groupName, part);
  }
  assignOpenGroup(groupName:string, part:PartBase): void { 
    this.#internalParent.assignOpenGroup(groupName, part);
  }
  setOrigin(x:number|Matrix4,y?:number,z?:number): void { 
    this.#internalParent.setOrigin(x, y, z);
  }
  getFullOrigin(): Vector3 {
    return this.#internalParent.getFullOrigin();
  }
  get m(): OD_Base[] { return this.#internalParent.m; }
  get g(): IGlobalVars { return this.#internalParent.g; }
  get dockingInfo() { return this.#internalParent.dockingInfo; }
  addDockingInfo(id: Dock, start: Vector3, end: Vector3): IDockingInfo {     return this.#internalParent.addDockingInfo(id, start, end);   }
get insertLevelInfo(): IInsertLevelInfo[] { return this.#internalParent.insertLevelInfo; }
get insertLevelFixed(): boolean { return this.#internalParent.insertLevelFixed; }
set insertLevelFixed(value: boolean) { this.#internalParent.insertLevelFixed = value; }
addInsertLevelHeight(height:number, isDefault: boolean|undefined = undefined) : IInsertLevelInfo  { return this.#internalParent.addInsertLevelHeight(height, isDefault); }
  get mod_BackwallFixedHeight(): number  {
    return this.#internalParent.mod_BackwallFixedHeight!;
  }
  get mod_BackwallPos(): number  {
    return this.#internalParent.mod_BackwallPos!;
  }
  get mod_BackwallThk(): number  {
    return this.#internalParent.mod_BackwallThk!;
  }
  get mod_CarcaseColor(): string  {
    return this.#internalParent.mod_CarcaseColor!;
  }
  get mod_CarcaseColor_matrix(): IMatrix_mod_CarcaseColor {
    return this.#internalParent.mod_CarcaseColor_matrix!;
  }
  get mod_CarcaseBackwallColor(): string  {
    return this.#internalParent.mod_CarcaseBackwallColor!;
  }
  get mod_CarcaseBackwallColor_matrix(): IMatrix_mod_CarcaseBackwallColor {
    return this.#internalParent.mod_CarcaseBackwallColor_matrix!;
  }
  get mod_CarcaseBackwallConstruction(): string  {
    return this.#internalParent.mod_CarcaseBackwallConstruction!;
  }
  get mod_CarcaseProgram(): string  {
    return this.#internalParent.mod_CarcaseProgram!;
  }
  get mod_CarcaseProgram_matrix(): IMatrix_mod_CarcaseProgram {
    return this.#internalParent.mod_CarcaseProgram_matrix!;
  }
  get mod_CarcaseBackwallProgram(): string  {
    return this.#internalParent.mod_CarcaseBackwallProgram!;
  }
  get mod_CarcaseBackwallProgram_matrix(): IMatrix_mod_CarcaseBackwallProgram {
    return this.#internalParent.mod_CarcaseBackwallProgram_matrix!;
  }
  get mod_CarcaseConnectionLeftBtm(): string  {
    return this.#internalParent.mod_CarcaseConnectionLeftBtm!;
  }
  get mod_CarcaseConnectionLeftTop(): string  {
    return this.#internalParent.mod_CarcaseConnectionLeftTop!;
  }
  get mod_CarcaseConnectionRightBtm(): string  {
    return this.#internalParent.mod_CarcaseConnectionRightBtm!;
  }
  get mod_CarcaseConnectionRightTop(): string  {
    return this.#internalParent.mod_CarcaseConnectionRightTop!;
  }
  get mod_CarcaseDistanceWall(): number  {
    return this.#internalParent.mod_CarcaseDistanceWall!;
  }
  get mod_CarcaseEdgeBackColor(): string  {
    return this.#internalParent.mod_CarcaseEdgeBackColor!;
  }
  get mod_CarcaseEdgeColor(): string  {
    return this.#internalParent.mod_CarcaseEdgeColor!;
  }
  get mod_CarcaseEdgeFrontColor(): string  {
    return this.#internalParent.mod_CarcaseEdgeFrontColor!;
  }
  get mod_CarcaseOutsideColor(): string  {
    return this.#internalParent.mod_CarcaseOutsideColor!;
  }
  get mod_CarcaseOutsideColor_matrix(): IMatrix_mod_CarcaseOutsideColor {
    return this.#internalParent.mod_CarcaseOutsideColor_matrix!;
  }
  get mod_CarcaseOutsideProgram(): string  {
    return this.#internalParent.mod_CarcaseOutsideProgram!;
  }
  get mod_CarcaseOutsideProgram_matrix(): IMatrix_mod_CarcaseOutsideProgram {
    return this.#internalParent.mod_CarcaseOutsideProgram_matrix!;
  }
  get mod_CarcaseShelfbtmConstruction(): string  {
    return this.#internalParent.mod_CarcaseShelfbtmConstruction!;
  }
  get mod_CarcaseShelfbtmOversizeInsideWall(): number  {
    return this.#internalParent.mod_CarcaseShelfbtmOversizeInsideWall!;
  }
  get mod_CarcaseShelfbtmOversizeLeft(): number  {
    return this.#internalParent.mod_CarcaseShelfbtmOversizeLeft!;
  }
  get mod_CarcaseShelfbtmOversizeRight(): number  {
    return this.#internalParent.mod_CarcaseShelfbtmOversizeRight!;
  }
  get mod_CarcaseShelftopConstruction(): string  {
    return this.#internalParent.mod_CarcaseShelftopConstruction!;
  }
  get mod_CarcaseShelftopOversizeInsideWall(): number  {
    return this.#internalParent.mod_CarcaseShelftopOversizeInsideWall!;
  }
  get mod_CarcaseShelftopOversizeLeft(): number  {
    return this.#internalParent.mod_CarcaseShelftopOversizeLeft!;
  }
  get mod_CarcaseShelftopOversizeRight(): number  {
    return this.#internalParent.mod_CarcaseShelftopOversizeRight!;
  }
  get mod_CarcaseSidepanelleftOversizeBtm(): number  {
    return this.#internalParent.mod_CarcaseSidepanelleftOversizeBtm!;
  }
  get mod_CarcaseSidepanelleftOversizeInsideWall(): number  {
    return this.#internalParent.mod_CarcaseSidepanelleftOversizeInsideWall!;
  }
  get mod_CarcaseSidepanelleftOversizeTop(): number  {
    return this.#internalParent.mod_CarcaseSidepanelleftOversizeTop!;
  }
  get mod_CarcaseSidepanelrightOversizeBtm(): number  {
    return this.#internalParent.mod_CarcaseSidepanelrightOversizeBtm!;
  }
  get mod_CarcaseSidepanelrightOversizeInsideWall(): number  {
    return this.#internalParent.mod_CarcaseSidepanelrightOversizeInsideWall!;
  }
  get mod_CarcaseSidepanelrightOversizeTop(): number  {
    return this.#internalParent.mod_CarcaseSidepanelrightOversizeTop!;
  }
  get mod_CarcaseVisBack(): boolean  {
    return this.#internalParent.mod_CarcaseVisBack!;
  }
  get mod_CarcaseVisBtm(): boolean  {
    return this.#internalParent.mod_CarcaseVisBtm!;
  }
  get mod_CarcaseVisBtm_matrix(): IMatrix_mod_CarcaseVisBtm {
    return this.#internalParent.mod_CarcaseVisBtm_matrix!;
  }
  get mod_CarcaseVisLeft(): boolean  {
    return this.#internalParent.mod_CarcaseVisLeft!;
  }
  get mod_CarcaseVisLeft_matrix(): IMatrix_mod_CarcaseVisLeft {
    return this.#internalParent.mod_CarcaseVisLeft_matrix!;
  }
  get mod_CarcaseVisRight(): boolean  {
    return this.#internalParent.mod_CarcaseVisRight!;
  }
  get mod_CarcaseVisRight_matrix(): IMatrix_mod_CarcaseVisRight {
    return this.#internalParent.mod_CarcaseVisRight_matrix!;
  }
  get mod_CarcaseVisTop(): boolean  {
    return this.#internalParent.mod_CarcaseVisTop!;
  }
  get mod_CarcaseVisTop_matrix(): IMatrix_mod_CarcaseVisTop {
    return this.#internalParent.mod_CarcaseVisTop_matrix!;
  }
  get mod_Depth(): number  {
    return this.#internalParent.mod_Depth!;
  }
  get mod_FingergripType(): string  {
    return this.#internalParent.mod_FingergripType!;
  }
  get mod_FingergripType_matrix(): IMatrix_mod_FingergripType {
    return this.#internalParent.mod_FingergripType_matrix!;
  }
  get mod_FrontColor(): string  {
    return this.#internalParent.mod_FrontColor!;
  }
  get mod_FrontColor_matrix(): IMatrix_mod_FrontColor {
    return this.#internalParent.mod_FrontColor_matrix!;
  }
  get mod_FrontDesign(): string  {
    return this.#internalParent.mod_FrontDesign!;
  }
  get mod_FrontEdgeColor(): string  {
    return this.#internalParent.mod_FrontEdgeColor!;
  }
  get mod_FrontEdgeThk(): string  {
    return this.#internalParent.mod_FrontEdgeThk!;
  }
  get mod_FrontFrameColor(): string  {
    return this.#internalParent.mod_FrontFrameColor!;
  }
  get mod_FrontGapCarcase(): number  {
    return this.#internalParent.mod_FrontGapCarcase!;
  }
  get mod_FrontGapHor(): number  {
    return this.#internalParent.mod_FrontGapHor!;
  }
  get mod_FrontGapVert(): number  {
    return this.#internalParent.mod_FrontGapVert!;
  }
  get mod_FrontGlassColor(): string  {
    return this.#internalParent.mod_FrontGlassColor!;
  }
  get mod_FrontPosStart(): number  {
    return this.#internalParent.mod_FrontPosStart!;
  }
  get mod_FrontProgram(): string  {
    return this.#internalParent.mod_FrontProgram!;
  }
  get mod_FrontProgram_matrix(): IMatrix_mod_FrontProgram {
    return this.#internalParent.mod_FrontProgram_matrix!;
  }
  get mod_HandleColor(): string  {
    return this.#internalParent.mod_HandleColor!;
  }
  get mod_HandleDesign(): string  {
    return this.#internalParent.mod_HandleDesign!;
  }
  get mod_HandleDesign_matrix(): IMatrix_mod_HandleDesign {
    return this.#internalParent.mod_HandleDesign_matrix!;
  }
  get mod_HandleLength(): number  {
    return this.#internalParent.mod_HandleLength!;
  }
  get mod_HandleLine(): number  {
    return this.#internalParent.mod_HandleLine!;
  }
  get mod_HandlePosLogic(): string  {
    return this.#internalParent.mod_HandlePosLogic!;
  }
  get mod_HandlePosType(): string  {
    return this.#internalParent.mod_HandlePosType!;
  }
  get mod_HangerPosX(): string  {
    return this.#internalParent.mod_HangerPosX!;
  }
  get mod_HangerPosX_matrix(): IMatrix_mod_HangerPosX {
    return this.#internalParent.mod_HangerPosX_matrix!;
  }
  get mod_HangerPosY(): string  {
    return this.#internalParent.mod_HangerPosY!;
  }
  get mod_HangerType(): string  {
    return this.#internalParent.mod_HangerType!;
  }
  get mod_HardwareColor(): string  {
    return this.#internalParent.mod_HardwareColor!;
  }
  get mod_Height(): number  {
    return this.#internalParent.mod_Height!;
  }
  get mod_HeightPosInsertion(): number  {
    return this.#internalParent.mod_HeightPosInsertion!;
  }
  get mod_LightPart(): string  {
    return this.#internalParent.mod_LightPart!;
  }
  get mod_LightPosX(): string  {
    return this.#internalParent.mod_LightPosX!;
  }
  get mod_LightPosX_matrix(): IMatrix_mod_LightPosX {
    return this.#internalParent.mod_LightPosX_matrix!;
  }
  get mod_LightPosX1(): number  {
    return this.#internalParent.mod_LightPosX1!;
  }
  get mod_LightPosX2(): number  {
    return this.#internalParent.mod_LightPosX2!;
  }
  get mod_LightPosX3(): number  {
    return this.#internalParent.mod_LightPosX3!;
  }
  get mod_LightPosX4(): number  {
    return this.#internalParent.mod_LightPosX4!;
  }
  get mod_LightPosX5(): number  {
    return this.#internalParent.mod_LightPosX5!;
  }
  get mod_LightPosY(): number  {
    return this.#internalParent.mod_LightPosY!;
  }
  get mod_LightSystem(): string  {
    return this.#internalParent.mod_LightSystem!;
  }
  get mod_LightSystem_matrix(): IMatrix_mod_LightSystem {
    return this.#internalParent.mod_LightSystem_matrix!;
  }
  get mod_Model(): string  {
    return this.#internalParent.mod_Model!;
  }
  get mod_OpeningType(): string  {
    return this.#internalParent.mod_OpeningType!;
  }
  get mod_PlinthAreaDesign(): string  {
    return this.#internalParent.mod_PlinthAreaDesign!;
  }
  get mod_PlinthAreaDesign_matrix(): IMatrix_mod_PlinthAreaDesign {
    return this.#internalParent.mod_PlinthAreaDesign_matrix!;
  }
  get mod_PlinthAreaElementColor(): string  {
    return this.#internalParent.mod_PlinthAreaElementColor!;
  }
  get mod_PlinthAreaHeight(): number  {
    return this.#internalParent.mod_PlinthAreaHeight!;
  }
  get mod_PlinthAreaPosBackMatrix(): string  {
    return this.#internalParent.mod_PlinthAreaPosBackMatrix!;
  }
  get mod_PlinthAreaPosFrontMatrix(): string  {
    return this.#internalParent.mod_PlinthAreaPosFrontMatrix!;
  }
  get mod_PlinthAreaPosLeftMatrix(): string  {
    return this.#internalParent.mod_PlinthAreaPosLeftMatrix!;
  }
  get mod_PlinthAreaPosRightMatrix(): string  {
    return this.#internalParent.mod_PlinthAreaPosRightMatrix!;
  }
  get mod_PlinthAreaVisLeft(): boolean  {
    return this.#internalParent.mod_PlinthAreaVisLeft!;
  }
  get mod_PlinthAreaVisRight(): boolean  {
    return this.#internalParent.mod_PlinthAreaVisRight!;
  }
  get mod_RailhortopbackThk(): number  {
    return this.#internalParent.mod_RailhortopbackThk!;
  }
  get mod_RailhortopfrontThk(): number  {
    return this.#internalParent.mod_RailhortopfrontThk!;
  }
  get mod_RailverttopbackThk(): number  {
    return this.#internalParent.mod_RailverttopbackThk!;
  }
  get mod_RailverttopfrontThk(): number  {
    return this.#internalParent.mod_RailverttopfrontThk!;
  }
  get mod_ShelfadjThk(): number  {
    return this.#internalParent.mod_ShelfadjThk!;
  }
  get mod_ShelfbtmThk(): number  {
    return this.#internalParent.mod_ShelfbtmThk!;
  }
  get mod_ShelffixedThk(): number  {
    return this.#internalParent.mod_ShelffixedThk!;
  }
  get mod_Width(): number  {
    return this.#internalParent.mod_Width!;
  }
  get mod_TypeElement(): string  {
    return this.#internalParent.mod_TypeElement!;
  }
  get mod_SidepanelrightThk(): number  {
    return this.#internalParent.mod_SidepanelrightThk!;
  }
  get mod_SidepanelleftThk(): number  {
    return this.#internalParent.mod_SidepanelleftThk!;
  }
  get mod_ShelftopThk(): number  {
    return this.#internalParent.mod_ShelftopThk!;
  }
  get mod_CornerunitStraightConstruction(): string  {
    return this.#internalParent.mod_CornerunitStraightConstruction!;
  }
  get mod_CornerunitStraightConstruction_matrix(): IMatrix_mod_CornerunitStraightConstruction {
    return this.#internalParent.mod_CornerunitStraightConstruction_matrix!;
  }
  get mod_PanelblindThk(): number  {
    return this.#internalParent.mod_PanelblindThk!;
  }
  get mod_CarcaseDirection(): string  {
    return this.#internalParent.mod_CarcaseDirection!;
  }
  get mod_ParentName(): string  {
    return this.#internalParent.mod_ParentName!;
  }
  get mod_ModuleName(): string  {
    return this.#internalParent.mod_ModuleName!;
  }
  get mod_CornerunitFrontWidth(): number  {
    return this.#internalParent.mod_CornerunitFrontWidth!;
  }
  get mod_FrontGapHorTop(): number  {
    return this.#internalParent.mod_FrontGapHorTop!;
  }
  get mod_PlinthAreaExtraItem(): string  {
    return this.#internalParent.mod_PlinthAreaExtraItem!;
  }
  get mod_PlinthAreaExtraItem_matrix(): IMatrix_mod_PlinthAreaExtraItem {
    return this.#internalParent.mod_PlinthAreaExtraItem_matrix!;
  }
  get mod_InteriorEquipmentLogic(): string  {
    return this.#internalParent.mod_InteriorEquipmentLogic!;
  }
  get mod_ShelvesBackwallFittingConnection(): string  {
    return this.#internalParent.mod_ShelvesBackwallFittingConnection!;
  }
  get mod_CarcasePartConnectionBackHor(): string  {
    return this.#internalParent.mod_CarcasePartConnectionBackHor!;
  }
  get mod_CarcasePartConnectionBackVert(): string  {
    return this.#internalParent.mod_CarcasePartConnectionBackVert!;
  }
  get mod_CarcasePartConnectionBtmVert(): string  {
    return this.#internalParent.mod_CarcasePartConnectionBtmVert!;
  }
  get mod_CarcasePartConnectionLeftHor(): string  {
    return this.#internalParent.mod_CarcasePartConnectionLeftHor!;
  }
  get mod_CarcasePartConnectionRightHor(): string  {
    return this.#internalParent.mod_CarcasePartConnectionRightHor!;
  }
  get mod_CarcasePartConnectionTopVert(): string  {
    return this.#internalParent.mod_CarcasePartConnectionTopVert!;
  }
  get mod_FittingConnectionBtmVert(): string  {
    return this.#internalParent.mod_FittingConnectionBtmVert!;
  }
  get mod_FittingConnectionLeftBtm(): string  {
    return this.#internalParent.mod_FittingConnectionLeftBtm!;
  }
  get mod_FittingConnectionLeftHor(): string  {
    return this.#internalParent.mod_FittingConnectionLeftHor!;
  }
  get mod_FittingConnectionLeftTop(): string  {
    return this.#internalParent.mod_FittingConnectionLeftTop!;
  }
  get mod_FittingConnectionRightBtm(): string  {
    return this.#internalParent.mod_FittingConnectionRightBtm!;
  }
  get mod_FittingConnectionRightHor(): string  {
    return this.#internalParent.mod_FittingConnectionRightHor!;
  }
  get mod_FittingConnectionRightTop(): string  {
    return this.#internalParent.mod_FittingConnectionRightTop!;
  }
  get mod_FittingConnectionTopVert(): string  {
    return this.#internalParent.mod_FittingConnectionTopVert!;
  }
  get mod_HangerOffsetPosY(): number  {
    return this.#internalParent.mod_HangerOffsetPosY!;
  }
  get mod_HangerColor(): string  {
    return this.#internalParent.mod_HangerColor!;
  }
  get mod_VertDividerType(): string  {
    return this.#internalParent.mod_VertDividerType!;
  }
  get mod_VertDividerType_matrix(): IMatrix_mod_VertDividerType {
    return this.#internalParent.mod_VertDividerType_matrix!;
  }
  get mod_SidepanelmiddleThk(): number  {
    return this.#internalParent.mod_SidepanelmiddleThk!;
  }
  get mod_SidepanelmiddleShortWidth(): number  {
    return this.#internalParent.mod_SidepanelmiddleShortWidth!;
  }
  get mod_CarcaseFrontConstruction(): string  {
    return this.#internalParent.mod_CarcaseFrontConstruction!;
  }
  get mod_CarcaseFrontConstruction_matrix(): IMatrix_mod_CarcaseFrontConstruction {
    return this.#internalParent.mod_CarcaseFrontConstruction_matrix!;
  }
  get mod_CleatThk(): number  {
    return this.#internalParent.mod_CleatThk!;
  }
  get mod_CleatWidth(): number  {
    return this.#internalParent.mod_CleatWidth!;
  }
  get mod_CarcasePartInfo(): string [] {
    return this.#internalParent.mod_CarcasePartInfo!;
  }
  get mod_PushtoopenLine(): number  {
    return this.#internalParent.mod_PushtoopenLine!;
  }
  get mod_PushtoopenType(): string  {
    return this.#internalParent.mod_PushtoopenType!;
  }
  get mod_PushtoopenColor(): string  {
    return this.#internalParent.mod_PushtoopenColor!;
  }
  get mod_PanelWoodFrameType(): string  {
    return this.#internalParent.mod_PanelWoodFrameType!;
  }
  get mod_PanelWoodFrameFillingType(): string  {
    return this.#internalParent.mod_PanelWoodFrameFillingType!;
  }
  get mod_PanelWoodFrameFillingType_matrix(): IMatrix_mod_PanelWoodFrameFillingType {
    return this.#internalParent.mod_PanelWoodFrameFillingType_matrix!;
  }
  get mod_FramePartsWidthHor(): number  {
    return this.#internalParent.mod_FramePartsWidthHor!;
  }
  get mod_FramePartsWidthVert(): number  {
    return this.#internalParent.mod_FramePartsWidthVert!;
  }
  get mod_CreateCountertop(): boolean  {
    return this.#internalParent.mod_CreateCountertop!;
  }
  get mod_CreatePaneltop(): boolean  {
    return this.#internalParent.mod_CreatePaneltop!;
  }
  get mod_CreateToekick(): boolean  {
    return this.#internalParent.mod_CreateToekick!;
  }
  get mod_CreateFingergrip(): boolean  {
    return this.#internalParent.mod_CreateFingergrip!;
  }
  get mod_PlinthAreaPositionInfo(): string [] {
    return this.#internalParent.mod_PlinthAreaPositionInfo!;
  }
  get mod_DoorDirection(): string  {
    return this.#internalParent.mod_DoorDirection!;
  }
  get mod_DoorDirection_matrix(): IMatrix_mod_DoorDirection {
    return this.#internalParent.mod_DoorDirection_matrix!;
  }
  get mod_SlopeAngle(): number  {
    return this.#internalParent.mod_SlopeAngle!;
  }
  get mod_SlopedCeilingDimensionLogic(): string  {
    return this.#internalParent.mod_SlopedCeilingDimensionLogic!;
  }
  get mod_SlopedCeilingDimensionLogic_matrix(): IMatrix_mod_SlopedCeilingDimensionLogic {
    return this.#internalParent.mod_SlopedCeilingDimensionLogic_matrix!;
  }
  get mod_SlopedCeilingConstruction(): string  {
    return this.#internalParent.mod_SlopedCeilingConstruction!;
  }
  get mod_BackHeight(): number  {
    return this.#internalParent.mod_BackHeight!;
  }
  get mod_TopDepth(): number  {
    return this.#internalParent.mod_TopDepth!;
  }
  get mod_FrameFillingWoodColor(): string  {
    return this.#internalParent.mod_FrameFillingWoodColor!;
  }
  get mod_SidepanelrightType(): string  {
    return this.#internalParent.mod_SidepanelrightType!;
  }
  get mod_SidepanelleftType(): string  {
    return this.#internalParent.mod_SidepanelleftType!;
  }
  get mod_GrainLogic(): string  {
    return this.#internalParent.mod_GrainLogic!;
  }
  get mod_ShelfadjColor(): string  {
    return this.#internalParent.mod_ShelfadjColor!;
  }
  get mod_ShelfadjColor_matrix(): IMatrix_mod_ShelfadjColor {
    return this.#internalParent.mod_ShelfadjColor_matrix!;
  }
  get mod_FrameFillingColor(): string  {
    return this.#internalParent.mod_FrameFillingColor!;
  }
  get mod_FrameFillingColor_matrix(): IMatrix_mod_FrameFillingColor {
    return this.#internalParent.mod_FrameFillingColor_matrix!;
  }
  addOD_M_mc_Storageunit01(index?: number): dc_mc_Storageunit01 {
    return this.#internalParent.addOD_M_mc_Storageunit01(index);
  }
  addOD_M_mc_PlinthArea01(index?: number): dc_mc_PlinthArea01 {
    return this.#internalParent.addOD_M_mc_PlinthArea01(index);
  }
  addOD_M_mf_Door(index?: number): dc_mf_Door {
    return this.#internalParent.addOD_M_mf_Door(index);
  }
  addOD_M_mc_CornerunitStraight01(index?: number): dc_mc_CornerunitStraight01 {
    return this.#internalParent.addOD_M_mc_CornerunitStraight01(index);
  }
  addOD_M_mf_RackArea(index?: number): dc_mf_RackArea {
    return this.#internalParent.addOD_M_mf_RackArea(index);
  }
  addOD_M_mf_Drawer(index?: number): dc_mf_Drawer {
    return this.#internalParent.addOD_M_mf_Drawer(index);
  }
  addOD_M_mf_CornerFillerFront(index?: number): dc_mf_CornerFillerFront {
    return this.#internalParent.addOD_M_mf_CornerFillerFront(index);
  }
}

